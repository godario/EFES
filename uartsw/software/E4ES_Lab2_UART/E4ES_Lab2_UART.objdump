
E4ES_Lab2_UART.elf:     file format elf32-littlenios2
E4ES_Lab2_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00007758 memsz 0x00007758 flags r-x
    LOAD off    0x00008778 vaddr 0x04007778 paddr 0x040092e8 align 2**12
         filesz 0x00001b70 memsz 0x00001b70 flags rw-
    LOAD off    0x0000ae58 vaddr 0x0400ae58 paddr 0x0400ae58 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007548  040001c0  040001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000070  04007708  04007708  00008708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b70  04007778  040092e8  00008778  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  0400ae58  0400ae58  0000ae58  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  0400afb0  0400afb0  0000a2e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000a2e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000af0  00000000  00000000  0000a310  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000186c5  00000000  00000000  0000ae00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006a17  00000000  00000000  000234c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007230  00000000  00000000  00029edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001d6c  00000000  00000000  0003110c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002fcb  00000000  00000000  00032e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000035c6  00000000  00000000  00035e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0003940c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000530  00000000  00000000  00039450  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c98a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0003c98d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003c999  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003c99a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003c99b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003c99f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003c9a3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003c9a7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003c9b2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003c9bd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  0003c9c8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002f  00000000  00000000  0003c9d7  2**0
                  CONTENTS, READONLY
 29 .jdi          00005497  00000000  00000000  0003ca06  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     002d5982  00000000  00000000  00041e9d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001c0 l    d  .text	00000000 .text
04007708 l    d  .rodata	00000000 .rodata
04007778 l    d  .rwdata	00000000 .rwdata
0400ae58 l    d  .bss	00000000 .bss
0400afb0 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../E4ES_Lab2_UART_bsp//obj/HAL/src/crt0.o
040001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 impure.c
04007778 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04000be0 l     F .text	00000008 __fp_unlock
04000bf4 l     F .text	0000019c __sinit.part.1
04000d90 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0400251c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04002630 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400265c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04002750 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04002838 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04002924 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04002b00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040092d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
04002d74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04002eb0 l     F .text	00000034 alt_dev_reg
0400814c l     O .rwdata	00000038 i2c_0
04008184 l     O .rwdata	00001060 jtag_uart_0
040091e4 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
04002fb0 l     F .text	00000110 optional_irq_callback
04003110 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04004dec l     F .text	0000020c altera_avalon_jtag_uart_irq
04004ff8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
04005904 l     F .text	0000009c altera_avalon_uart_irq
040059a0 l     F .text	000000e4 altera_avalon_uart_rxirq
04005a84 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
04005c20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
04005e38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
040062c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040067b4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04006914 l     F .text	0000003c alt_get_errno
04006950 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0400050c g     F .text	00000018 putchar
040023e0 g     F .text	00000054 _isatty_r
04002a3c g     F .text	0000007c alt_main
0400aeb0 g     O .bss	00000100 alt_irq
04002434 g     F .text	00000060 _lseek_r
040092e8 g       *ABS*	00000000 __flash_rwdata_start
0400afb0 g       *ABS*	00000000 __alt_heap_start
04002168 g     F .text	0000005c __sseek
04000f40 g     F .text	00000010 __sinit
0400068c g     F .text	00000140 __swbuf_r
04000d98 g     F .text	00000078 __sfmoreglue
04003808 g     F .text	000000a8 alt_avalon_i2c_rx_read
04002adc g     F .text	00000024 __malloc_unlock
04004a20 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0400358c g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
0400ae78 g     O .bss	00000004 altera_avalon_timer_ts_freq
04000f28 g     F .text	00000018 _cleanup
04004270 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04002384 g     F .text	0000005c _fstat_r
0400ae64 g     O .bss	00000004 errno
040020e4 g     F .text	00000008 __seofread
0400ae6c g     O .bss	00000004 alt_argv
040112a8 g       *ABS*	00000000 _gp
04004a64 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0400371c g     F .text	00000044 alt_avalon_i2c_is_busy
04007fcc g     O .rwdata	00000180 alt_fd_list
04000504 g     F .text	00000008 _putchar_r
040034c0 g     F .text	000000cc alt_avalon_i2c_master_config_set
04006464 g     F .text	00000090 alt_find_dev
0400725c g     F .text	00000148 memcpy
04000be8 g     F .text	0000000c _cleanup_r
04006898 g     F .text	0000007c alt_io_redirect
04007708 g       *ABS*	00000000 __DTOR_END__
040040b0 g     F .text	000001c0 alt_avalon_i2c_master_transmit
040051f0 g     F .text	0000021c altera_avalon_jtag_uart_read
04000448 g     F .text	00000064 .hidden __udivsi3
0400278c g     F .text	000000ac isatty
0400332c g     F .text	00000098 alt_avalon_i2c_enable
0400ae60 g     O .bss	00000004 __malloc_top_pad
04004954 g     F .text	00000068 alt_avalon_i2c_int_disable
0400203c g     F .text	00000054 _sbrk_r
04002494 g     F .text	00000060 _read_r
040092c8 g     O .rwdata	00000004 alt_max_fd
04002280 g     F .text	000000f0 _fclose_r
04000bb0 g     F .text	00000030 fflush
0400ae5c g     O .bss	00000004 __malloc_max_sbrked_mem
0400447c g     F .text	00000210 alt_avalon_i2c_master_receive
04002960 g     F .text	000000dc lseek
040049bc g     F .text	00000064 alt_avalon_i2c_int_enable
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
040092a8 g     O .rwdata	00000004 _global_impure_ptr
0400afb0 g       *ABS*	00000000 __bss_end
040066c4 g     F .text	000000f0 alt_iic_isr_register
04006e9c g     F .text	00000108 alt_tick
0400487c g     F .text	00000058 alt_avalon_i2c_int_status_get
04005858 g     F .text	000000ac altera_avalon_uart_init
04000f60 g     F .text	00000018 __fp_lock_all
04006678 g     F .text	0000004c alt_ic_irq_enabled
04006e00 g     F .text	0000009c alt_alarm_stop
040031ac g     F .text	00000054 alt_avalon_i2c_register_callback
0400ae7c g     O .bss	00000004 alt_irq_active
04003200 g     F .text	000000ec alt_avalon_i2c_init
040000ec g     F .exceptions	000000d4 alt_irq_handler
04007fa4 g     O .rwdata	00000028 alt_dev_null
040062a4 g     F .text	00000020 alt_dcache_flush_all
040092e8 g       *ABS*	00000000 __ram_rwdata_end
040092c0 g     O .rwdata	00000008 alt_dev_list
04002db0 g     F .text	00000100 write
04000524 g     F .text	000000a0 _putc_r
04003b3c g     F .text	0000004c alt_avalon_i2c_check_arblost
04005728 g     F .text	00000020 alt_timestamp_freq
04004918 g     F .text	0000003c alt_avalon_i2c_int_clear
04007778 g       *ABS*	00000000 __ram_rodata_end
04002698 g     F .text	000000b8 fstat
040092d4 g     O .rwdata	00000008 alt_avalon_i2c_list
040004ac g     F .text	00000058 .hidden __umodsi3
0400afb0 g       *ABS*	00000000 end
04005e74 g     F .text	000001ac altera_avalon_uart_write
04004d2c g     F .text	000000c0 altera_avalon_jtag_uart_init
040032ec g     F .text	00000040 alt_avalon_i2c_open
04007708 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04003cc4 g     F .text	000000e8 alt_avalon_i2c_master_tx
040057a8 g     F .text	00000060 altera_avalon_uart_write_fd
04005808 g     F .text	00000050 altera_avalon_uart_close_fd
0400540c g     F .text	00000224 altera_avalon_jtag_uart_write
04000f50 g     F .text	00000004 __sfp_lock_acquire
040010b4 g     F .text	00000310 _free_r
04006b98 g     F .text	0000022c alt_printf
04007554 g     F .text	00000180 __call_exitprocs
040030c0 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
040092b0 g     O .rwdata	00000004 __malloc_sbrk_base
040001c0 g     F .text	0000003c _start
0400ae80 g     O .bss	00000004 _alt_tick_rate
0400468c g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
04004ab0 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0400ae84 g     O .bss	00000004 _alt_nticks
04002b3c g     F .text	00000104 read
04002f1c g     F .text	00000094 alt_sys_init
0400743c g     F .text	00000118 __register_exitproc
04003ee8 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
04005098 g     F .text	00000068 altera_avalon_jtag_uart_close
040024f4 g     F .text	00000028 .hidden __mulsi3
04007778 g       *ABS*	00000000 __ram_rwdata_start
04007708 g       *ABS*	00000000 __ram_rodata_start
0400ae88 g     O .bss	00000028 __malloc_current_mallinfo
04004bc8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040070d0 g     F .text	000000c4 alt_get_fd
0400614c g     F .text	00000158 alt_busy_sleep
0400222c g     F .text	00000054 _close_r
040071e0 g     F .text	0000007c memcmp
04003760 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
04004c88 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0400afb0 g       *ABS*	00000000 __alt_stack_base
04004cd8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040007e4 g     F .text	00000154 __swsetup_r
04000e10 g     F .text	00000118 __sfp
04007b9c g     O .rwdata	00000408 __malloc_av_
04000f5c g     F .text	00000004 __sinit_lock_release
04002090 g     F .text	00000054 __sread
04006fc8 g     F .text	00000108 alt_find_file
04006300 g     F .text	000000a4 alt_dev_llist_insert
04002ab8 g     F .text	00000024 __malloc_lock
04002cc4 g     F .text	000000b0 sbrk
04003b88 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
04003af0 g     F .text	0000004c alt_avalon_i2c_check_nack
04000b54 g     F .text	0000005c _fflush_r
0400ae58 g       *ABS*	00000000 __bss_start
04001f14 g     F .text	00000128 memset
040001fc g     F .text	00000154 main
04003abc g     F .text	00000034 alt_avalon_i2c_master_target_set
0400ae70 g     O .bss	00000004 alt_envp
0400ae58 g     O .bss	00000004 __malloc_max_total_mem
04004c28 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040007cc g     F .text	00000018 __swbuf
040048d4 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
040021c4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04002370 g     F .text	00000014 fclose
04005630 g     F .text	00000078 alt_timestamp_start
04001708 g     F .text	0000080c _malloc_r
040092cc g     O .rwdata	00000004 alt_errno
040013c4 g     F .text	000000c4 _fwalk
040005c4 g     F .text	000000c8 putc
04000350 g     F .text	00000084 .hidden __divsi3
04000f90 g     F .text	00000124 _malloc_trim_r
04007708 g       *ABS*	00000000 __CTOR_END__
04007708 g       *ABS*	00000000 __flash_rodata_start
04007708 g       *ABS*	00000000 __DTOR_LIST__
04002ee4 g     F .text	00000038 alt_irq_init
04002c40 g     F .text	00000084 alt_release_fd
04007194 g     F .text	00000014 atexit
040021cc g     F .text	00000060 _write_r
040092ac g     O .rwdata	00000004 _impure_ptr
0400ae68 g     O .bss	00000004 alt_argc
04000938 g     F .text	0000021c __sflush_r
0400ae74 g     O .bss	00000004 altera_avalon_timer_ts_base
04006404 g     F .text	00000060 _do_dtors
04003a84 g     F .text	00000038 alt_avalon_i2c_master_target_get
04003994 g     F .text	000000f0 alt_avalon_i2c_send_address
04000020 g       .exceptions	00000000 alt_irq_entry
04000f78 g     F .text	00000018 __fp_unlock_all
040092b8 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
040056a8 g     F .text	00000080 alt_timestamp
04004b60 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
04006514 g     F .text	00000050 alt_ic_isr_register
040033c4 g     F .text	0000004c alt_avalon_i2c_disable
040092e8 g       *ABS*	00000000 _edata
04005748 g     F .text	00000060 altera_avalon_uart_read_fd
0400afb0 g       *ABS*	00000000 _end
040001c0 g       *ABS*	00000000 __ram_exceptions_end
04005100 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04003410 g     F .text	000000b0 alt_avalon_i2c_master_config_get
040065ec g     F .text	0000008c alt_ic_irq_disable
040020ec g     F .text	0000007c __swrite
040092b4 g     O .rwdata	00000004 __malloc_trim_threshold
04006fa4 g     F .text	00000024 altera_nios2_qsys_irq_init
040071a8 g     F .text	00000038 exit
04001488 g     F .text	000000c4 _fwalk_reent
040003d4 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000f54 g     F .text	00000004 __sfp_lock_release
04003620 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
040038b0 g     F .text	000000e4 alt_avalon_i2c_cmd_write
04005bcc g     F .text	00000054 altera_avalon_uart_close
040076d4 g     F .text	00000034 _exit
04006020 g     F .text	0000012c alt_alarm_start
0400154c g     F .text	000001bc __smakebuf_r
040073a4 g     F .text	00000098 strlen
04006a3c g     F .text	0000015c open
04006dc4 g     F .text	0000003c alt_putchar
040064f4 g     F .text	00000020 alt_icache_flush_all
040092dc g     O .rwdata	00000004 alt_priority_mask
04006564 g     F .text	00000088 alt_ic_irq_enable
04005c5c g     F .text	000001dc altera_avalon_uart_read
040092e0 g     O .rwdata	00000008 alt_alarm_list
040063a4 g     F .text	00000060 _do_ctors
04002558 g     F .text	000000d8 close
04004b14 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
040028a0 g     F .text	00000084 alt_load
04003dac g     F .text	0000013c alt_avalon_i2c_master_rx
04000f58 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08407014 	ori	at,at,448
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)

04000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0fffb17 	ldw	r3,-20(fp)
 4000120:	e0bffc17 	ldw	r2,-16(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	10001426 	beq	r2,zero,400017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	00810074 	movhi	r2,1025
 4000130:	10abac04 	addi	r2,r2,-20816
 4000134:	e0fffd17 	ldw	r3,-12(fp)
 4000138:	180690fa 	slli	r3,r3,3
 400013c:	10c5883a 	add	r2,r2,r3
 4000140:	10c00017 	ldw	r3,0(r2)
 4000144:	00810074 	movhi	r2,1025
 4000148:	10abac04 	addi	r2,r2,-20816
 400014c:	e13ffd17 	ldw	r4,-12(fp)
 4000150:	200890fa 	slli	r4,r4,3
 4000154:	1105883a 	add	r2,r2,r4
 4000158:	10800104 	addi	r2,r2,4
 400015c:	10800017 	ldw	r2,0(r2)
 4000160:	1009883a 	mov	r4,r2
 4000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400016c:	0005313a 	rdctl	r2,ipending
 4000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000174:	e0bfff17 	ldw	r2,-4(fp)
 4000178:	00000706 	br	4000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400017c:	e0bffc17 	ldw	r2,-16(fp)
 4000180:	1085883a 	add	r2,r2,r2
 4000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000188:	e0bffd17 	ldw	r2,-12(fp)
 400018c:	10800044 	addi	r2,r2,1
 4000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 4000194:	003fe106 	br	400011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 4000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400019c:	e0bffb17 	ldw	r2,-20(fp)
 40001a0:	103fdb1e 	bne	r2,zero,4000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a4:	0001883a 	nop
}
 40001a8:	0001883a 	nop
 40001ac:	e037883a 	mov	sp,fp
 40001b0:	dfc00117 	ldw	ra,4(sp)
 40001b4:	df000017 	ldw	fp,0(sp)
 40001b8:	dec00204 	addi	sp,sp,8
 40001bc:	f800283a 	ret

Disassembly of section .text:

040001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001c0:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40001c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001c8:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 40001cc:	d684aa14 	ori	gp,gp,4776
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001d0:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001d4:	10ab9614 	ori	r2,r2,44632

    movhi r3, %hi(__bss_end)
 40001d8:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001dc:	18ebec14 	ori	r3,r3,44976

    beq r2, r3, 1f
 40001e0:	10c00326 	beq	r2,r3,40001f0 <_start+0x30>

0:
    stw zero, (r2)
 40001e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001ec:	10fffd36 	bltu	r2,r3,40001e4 <__alt_data_end+0xfc0001e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001f0:	40028a00 	call	40028a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001f4:	4002a3c0 	call	4002a3c <alt_main>

040001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001f8:	003fff06 	br	40001f8 <__alt_data_end+0xfc0001f8>

040001fc <main>:
#define EVENPARITY 1
#define ODDPARITY 2
#define PARITY NOPARITY

int main()
{
 40001fc:	defff804 	addi	sp,sp,-32
 4000200:	dfc00715 	stw	ra,28(sp)
 4000204:	df000615 	stw	fp,24(sp)
 4000208:	df000604 	addi	fp,sp,24
  char charToPrint = 0;
 400020c:	e03ffa05 	stb	zero,-24(fp)
  int ticksPerSec = alt_timestamp_freq();
 4000210:	40057280 	call	4005728 <alt_timestamp_freq>
 4000214:	e0bffd15 	stw	r2,-12(fp)
  int t1, t2, nticks;
  int ticksPerBit = ticksPerSec/BAUDRATE;
 4000218:	e0bffd17 	ldw	r2,-12(fp)
 400021c:	0144b004 	movi	r5,4800
 4000220:	1009883a 	mov	r4,r2
 4000224:	40003500 	call	4000350 <__divsi3>
 4000228:	e0bffe15 	stw	r2,-8(fp)
  int halfBitTime = ticksPerBit/2;
 400022c:	e0bffe17 	ldw	r2,-8(fp)
 4000230:	1006d7fa 	srli	r3,r2,31
 4000234:	1885883a 	add	r2,r3,r2
 4000238:	1005d07a 	srai	r2,r2,1
 400023c:	e0bfff15 	stw	r2,-4(fp)
  int val = IORD_ALTERA_AVALON_PIO_DATA(NIOS_UARTRX_BASE);
 4000240:	00820034 	movhi	r2,2048
 4000244:	10844004 	addi	r2,r2,4352
 4000248:	10800037 	ldwio	r2,0(r2)
 400024c:	e0bffb15 	stw	r2,-20(fp)
  while(1){
	  while(val){
 4000250:	00000406 	br	4000264 <main+0x68>
		  val = IORD_ALTERA_AVALON_PIO_DATA(NIOS_UARTRX_BASE);
 4000254:	00820034 	movhi	r2,2048
 4000258:	10844004 	addi	r2,r2,4352
 400025c:	10800037 	ldwio	r2,0(r2)
 4000260:	e0bffb15 	stw	r2,-20(fp)
  int t1, t2, nticks;
  int ticksPerBit = ticksPerSec/BAUDRATE;
  int halfBitTime = ticksPerBit/2;
  int val = IORD_ALTERA_AVALON_PIO_DATA(NIOS_UARTRX_BASE);
  while(1){
	  while(val){
 4000264:	e0bffb17 	ldw	r2,-20(fp)
 4000268:	103ffa1e 	bne	r2,zero,4000254 <__alt_data_end+0xfc000254>
		  val = IORD_ALTERA_AVALON_PIO_DATA(NIOS_UARTRX_BASE);
	  }
	  alt_timestamp_start();
 400026c:	40056300 	call	4005630 <alt_timestamp_start>
/* 	  t1 = alt_timestamp();
	  do {
		  t2 = alt_timestamp();
  		  nticks = t2 - t1;
	  } while(nticks < halfBitTime); */
	  while(alt_timestamp() < halfBitTime){};
 4000270:	0001883a 	nop
 4000274:	40056a80 	call	40056a8 <alt_timestamp>
 4000278:	1007883a 	mov	r3,r2
 400027c:	e0bfff17 	ldw	r2,-4(fp)
 4000280:	18bffc36 	bltu	r3,r2,4000274 <__alt_data_end+0xfc000274>
	  val = IORD_ALTERA_AVALON_PIO_DATA(NIOS_UARTRX_BASE);
 4000284:	00820034 	movhi	r2,2048
 4000288:	10844004 	addi	r2,r2,4352
 400028c:	10800037 	ldwio	r2,0(r2)
 4000290:	e0bffb15 	stw	r2,-20(fp)
	  if (!val){ //check if START BIT is effectively low
 4000294:	e0bffb17 	ldw	r2,-20(fp)
 4000298:	103fed1e 	bne	r2,zero,4000250 <__alt_data_end+0xfc000250>
		  for (int i=0; i<NBIT; ++i){
 400029c:	e03ffc15 	stw	zero,-16(fp)
 40002a0:	00001706 	br	4000300 <main+0x104>
			  alt_timestamp_start();
 40002a4:	40056300 	call	4005630 <alt_timestamp_start>
			  /* t1 = alt_timestamp();
			  do {
				  t2 = alt_timestamp();
			  	  nticks = t2 - t1;
			   } while(nticks < ticksPerBit); */
			  while(alt_timestamp() < ticksPerBit){};
 40002a8:	0001883a 	nop
 40002ac:	40056a80 	call	40056a8 <alt_timestamp>
 40002b0:	1007883a 	mov	r3,r2
 40002b4:	e0bffe17 	ldw	r2,-8(fp)
 40002b8:	18bffc36 	bltu	r3,r2,40002ac <__alt_data_end+0xfc0002ac>
			  val = IORD_ALTERA_AVALON_PIO_DATA(NIOS_UARTRX_BASE);
 40002bc:	00820034 	movhi	r2,2048
 40002c0:	10844004 	addi	r2,r2,4352
 40002c4:	10800037 	ldwio	r2,0(r2)
 40002c8:	e0bffb15 	stw	r2,-20(fp)
			  val = val & 0x01;
 40002cc:	e0bffb17 	ldw	r2,-20(fp)
 40002d0:	1080004c 	andi	r2,r2,1
 40002d4:	e0bffb15 	stw	r2,-20(fp)
			  charToPrint |= val << i;
 40002d8:	e0fffb17 	ldw	r3,-20(fp)
 40002dc:	e0bffc17 	ldw	r2,-16(fp)
 40002e0:	1884983a 	sll	r2,r3,r2
 40002e4:	1007883a 	mov	r3,r2
 40002e8:	e0bffa03 	ldbu	r2,-24(fp)
 40002ec:	1884b03a 	or	r2,r3,r2
 40002f0:	e0bffa05 	stb	r2,-24(fp)
  		  nticks = t2 - t1;
	  } while(nticks < halfBitTime); */
	  while(alt_timestamp() < halfBitTime){};
	  val = IORD_ALTERA_AVALON_PIO_DATA(NIOS_UARTRX_BASE);
	  if (!val){ //check if START BIT is effectively low
		  for (int i=0; i<NBIT; ++i){
 40002f4:	e0bffc17 	ldw	r2,-16(fp)
 40002f8:	10800044 	addi	r2,r2,1
 40002fc:	e0bffc15 	stw	r2,-16(fp)
 4000300:	e0bffc17 	ldw	r2,-16(fp)
 4000304:	10800210 	cmplti	r2,r2,8
 4000308:	103fe61e 	bne	r2,zero,40002a4 <__alt_data_end+0xfc0002a4>
			  while(alt_timestamp() < ticksPerBit){};
			  val = IORD_ALTERA_AVALON_PIO_DATA(NIOS_UARTRX_BASE);
			  val = val & 0x01;
			  charToPrint |= val << i;
		  }
		  alt_timestamp_start();
 400030c:	40056300 	call	4005630 <alt_timestamp_start>
		  /* t1 = alt_timestamp();
		  do {
			  t2 = alt_timestamp();
		  	  nticks = t2 - t1;
		  } while(nticks < ticksPerBit); */
		  while(alt_timestamp() < ticksPerBit){};
 4000310:	0001883a 	nop
 4000314:	40056a80 	call	40056a8 <alt_timestamp>
 4000318:	1007883a 	mov	r3,r2
 400031c:	e0bffe17 	ldw	r2,-8(fp)
 4000320:	18bffc36 	bltu	r3,r2,4000314 <__alt_data_end+0xfc000314>
		  val = IORD_ALTERA_AVALON_PIO_DATA(NIOS_UARTRX_BASE); //sample the STOP bit
 4000324:	00820034 	movhi	r2,2048
 4000328:	10844004 	addi	r2,r2,4352
 400032c:	10800037 	ldwio	r2,0(r2)
 4000330:	e0bffb15 	stw	r2,-20(fp)
		  if(val)
 4000334:	e0bffb17 	ldw	r2,-20(fp)
 4000338:	10000326 	beq	r2,zero,4000348 <main+0x14c>
			  printf("%c", charToPrint);
 400033c:	e0bffa07 	ldb	r2,-24(fp)
 4000340:	1009883a 	mov	r4,r2
 4000344:	400050c0 	call	400050c <putchar>
		  charToPrint = 0;
 4000348:	e03ffa05 	stb	zero,-24(fp)
	  }
  }
 400034c:	003fc006 	br	4000250 <__alt_data_end+0xfc000250>

04000350 <__divsi3>:
 4000350:	20001b16 	blt	r4,zero,40003c0 <__divsi3+0x70>
 4000354:	000f883a 	mov	r7,zero
 4000358:	28001616 	blt	r5,zero,40003b4 <__divsi3+0x64>
 400035c:	200d883a 	mov	r6,r4
 4000360:	29001a2e 	bgeu	r5,r4,40003cc <__divsi3+0x7c>
 4000364:	00800804 	movi	r2,32
 4000368:	00c00044 	movi	r3,1
 400036c:	00000106 	br	4000374 <__divsi3+0x24>
 4000370:	10000d26 	beq	r2,zero,40003a8 <__divsi3+0x58>
 4000374:	294b883a 	add	r5,r5,r5
 4000378:	10bfffc4 	addi	r2,r2,-1
 400037c:	18c7883a 	add	r3,r3,r3
 4000380:	293ffb36 	bltu	r5,r4,4000370 <__alt_data_end+0xfc000370>
 4000384:	0005883a 	mov	r2,zero
 4000388:	18000726 	beq	r3,zero,40003a8 <__divsi3+0x58>
 400038c:	0005883a 	mov	r2,zero
 4000390:	31400236 	bltu	r6,r5,400039c <__divsi3+0x4c>
 4000394:	314dc83a 	sub	r6,r6,r5
 4000398:	10c4b03a 	or	r2,r2,r3
 400039c:	1806d07a 	srli	r3,r3,1
 40003a0:	280ad07a 	srli	r5,r5,1
 40003a4:	183ffa1e 	bne	r3,zero,4000390 <__alt_data_end+0xfc000390>
 40003a8:	38000126 	beq	r7,zero,40003b0 <__divsi3+0x60>
 40003ac:	0085c83a 	sub	r2,zero,r2
 40003b0:	f800283a 	ret
 40003b4:	014bc83a 	sub	r5,zero,r5
 40003b8:	39c0005c 	xori	r7,r7,1
 40003bc:	003fe706 	br	400035c <__alt_data_end+0xfc00035c>
 40003c0:	0109c83a 	sub	r4,zero,r4
 40003c4:	01c00044 	movi	r7,1
 40003c8:	003fe306 	br	4000358 <__alt_data_end+0xfc000358>
 40003cc:	00c00044 	movi	r3,1
 40003d0:	003fee06 	br	400038c <__alt_data_end+0xfc00038c>

040003d4 <__modsi3>:
 40003d4:	20001716 	blt	r4,zero,4000434 <__modsi3+0x60>
 40003d8:	000f883a 	mov	r7,zero
 40003dc:	2005883a 	mov	r2,r4
 40003e0:	28001216 	blt	r5,zero,400042c <__modsi3+0x58>
 40003e4:	2900162e 	bgeu	r5,r4,4000440 <__modsi3+0x6c>
 40003e8:	01800804 	movi	r6,32
 40003ec:	00c00044 	movi	r3,1
 40003f0:	00000106 	br	40003f8 <__modsi3+0x24>
 40003f4:	30000a26 	beq	r6,zero,4000420 <__modsi3+0x4c>
 40003f8:	294b883a 	add	r5,r5,r5
 40003fc:	31bfffc4 	addi	r6,r6,-1
 4000400:	18c7883a 	add	r3,r3,r3
 4000404:	293ffb36 	bltu	r5,r4,40003f4 <__alt_data_end+0xfc0003f4>
 4000408:	18000526 	beq	r3,zero,4000420 <__modsi3+0x4c>
 400040c:	1806d07a 	srli	r3,r3,1
 4000410:	11400136 	bltu	r2,r5,4000418 <__modsi3+0x44>
 4000414:	1145c83a 	sub	r2,r2,r5
 4000418:	280ad07a 	srli	r5,r5,1
 400041c:	183ffb1e 	bne	r3,zero,400040c <__alt_data_end+0xfc00040c>
 4000420:	38000126 	beq	r7,zero,4000428 <__modsi3+0x54>
 4000424:	0085c83a 	sub	r2,zero,r2
 4000428:	f800283a 	ret
 400042c:	014bc83a 	sub	r5,zero,r5
 4000430:	003fec06 	br	40003e4 <__alt_data_end+0xfc0003e4>
 4000434:	0109c83a 	sub	r4,zero,r4
 4000438:	01c00044 	movi	r7,1
 400043c:	003fe706 	br	40003dc <__alt_data_end+0xfc0003dc>
 4000440:	00c00044 	movi	r3,1
 4000444:	003ff106 	br	400040c <__alt_data_end+0xfc00040c>

04000448 <__udivsi3>:
 4000448:	200d883a 	mov	r6,r4
 400044c:	2900152e 	bgeu	r5,r4,40004a4 <__udivsi3+0x5c>
 4000450:	28001416 	blt	r5,zero,40004a4 <__udivsi3+0x5c>
 4000454:	00800804 	movi	r2,32
 4000458:	00c00044 	movi	r3,1
 400045c:	00000206 	br	4000468 <__udivsi3+0x20>
 4000460:	10000e26 	beq	r2,zero,400049c <__udivsi3+0x54>
 4000464:	28000516 	blt	r5,zero,400047c <__udivsi3+0x34>
 4000468:	294b883a 	add	r5,r5,r5
 400046c:	10bfffc4 	addi	r2,r2,-1
 4000470:	18c7883a 	add	r3,r3,r3
 4000474:	293ffa36 	bltu	r5,r4,4000460 <__alt_data_end+0xfc000460>
 4000478:	18000826 	beq	r3,zero,400049c <__udivsi3+0x54>
 400047c:	0005883a 	mov	r2,zero
 4000480:	31400236 	bltu	r6,r5,400048c <__udivsi3+0x44>
 4000484:	314dc83a 	sub	r6,r6,r5
 4000488:	10c4b03a 	or	r2,r2,r3
 400048c:	1806d07a 	srli	r3,r3,1
 4000490:	280ad07a 	srli	r5,r5,1
 4000494:	183ffa1e 	bne	r3,zero,4000480 <__alt_data_end+0xfc000480>
 4000498:	f800283a 	ret
 400049c:	0005883a 	mov	r2,zero
 40004a0:	f800283a 	ret
 40004a4:	00c00044 	movi	r3,1
 40004a8:	003ff406 	br	400047c <__alt_data_end+0xfc00047c>

040004ac <__umodsi3>:
 40004ac:	2005883a 	mov	r2,r4
 40004b0:	2900122e 	bgeu	r5,r4,40004fc <__umodsi3+0x50>
 40004b4:	28001116 	blt	r5,zero,40004fc <__umodsi3+0x50>
 40004b8:	01800804 	movi	r6,32
 40004bc:	00c00044 	movi	r3,1
 40004c0:	00000206 	br	40004cc <__umodsi3+0x20>
 40004c4:	30000c26 	beq	r6,zero,40004f8 <__umodsi3+0x4c>
 40004c8:	28000516 	blt	r5,zero,40004e0 <__umodsi3+0x34>
 40004cc:	294b883a 	add	r5,r5,r5
 40004d0:	31bfffc4 	addi	r6,r6,-1
 40004d4:	18c7883a 	add	r3,r3,r3
 40004d8:	293ffa36 	bltu	r5,r4,40004c4 <__alt_data_end+0xfc0004c4>
 40004dc:	18000626 	beq	r3,zero,40004f8 <__umodsi3+0x4c>
 40004e0:	1806d07a 	srli	r3,r3,1
 40004e4:	11400136 	bltu	r2,r5,40004ec <__umodsi3+0x40>
 40004e8:	1145c83a 	sub	r2,r2,r5
 40004ec:	280ad07a 	srli	r5,r5,1
 40004f0:	183ffb1e 	bne	r3,zero,40004e0 <__alt_data_end+0xfc0004e0>
 40004f4:	f800283a 	ret
 40004f8:	f800283a 	ret
 40004fc:	00c00044 	movi	r3,1
 4000500:	003ff706 	br	40004e0 <__alt_data_end+0xfc0004e0>

04000504 <_putchar_r>:
 4000504:	21800217 	ldw	r6,8(r4)
 4000508:	40005241 	jmpi	4000524 <_putc_r>

0400050c <putchar>:
 400050c:	00810074 	movhi	r2,1025
 4000510:	10a4ab04 	addi	r2,r2,-27988
 4000514:	200b883a 	mov	r5,r4
 4000518:	11000017 	ldw	r4,0(r2)
 400051c:	21800217 	ldw	r6,8(r4)
 4000520:	40005241 	jmpi	4000524 <_putc_r>

04000524 <_putc_r>:
 4000524:	defffc04 	addi	sp,sp,-16
 4000528:	dc000215 	stw	r16,8(sp)
 400052c:	dfc00315 	stw	ra,12(sp)
 4000530:	2021883a 	mov	r16,r4
 4000534:	20000226 	beq	r4,zero,4000540 <_putc_r+0x1c>
 4000538:	20800e17 	ldw	r2,56(r4)
 400053c:	10001b26 	beq	r2,zero,40005ac <_putc_r+0x88>
 4000540:	30800217 	ldw	r2,8(r6)
 4000544:	10bfffc4 	addi	r2,r2,-1
 4000548:	30800215 	stw	r2,8(r6)
 400054c:	10000a16 	blt	r2,zero,4000578 <_putc_r+0x54>
 4000550:	30800017 	ldw	r2,0(r6)
 4000554:	11400005 	stb	r5,0(r2)
 4000558:	30800017 	ldw	r2,0(r6)
 400055c:	10c00044 	addi	r3,r2,1
 4000560:	30c00015 	stw	r3,0(r6)
 4000564:	10800003 	ldbu	r2,0(r2)
 4000568:	dfc00317 	ldw	ra,12(sp)
 400056c:	dc000217 	ldw	r16,8(sp)
 4000570:	dec00404 	addi	sp,sp,16
 4000574:	f800283a 	ret
 4000578:	30c00617 	ldw	r3,24(r6)
 400057c:	10c00616 	blt	r2,r3,4000598 <_putc_r+0x74>
 4000580:	30800017 	ldw	r2,0(r6)
 4000584:	00c00284 	movi	r3,10
 4000588:	11400005 	stb	r5,0(r2)
 400058c:	30800017 	ldw	r2,0(r6)
 4000590:	11400003 	ldbu	r5,0(r2)
 4000594:	28fff11e 	bne	r5,r3,400055c <__alt_data_end+0xfc00055c>
 4000598:	8009883a 	mov	r4,r16
 400059c:	dfc00317 	ldw	ra,12(sp)
 40005a0:	dc000217 	ldw	r16,8(sp)
 40005a4:	dec00404 	addi	sp,sp,16
 40005a8:	400068c1 	jmpi	400068c <__swbuf_r>
 40005ac:	d9400015 	stw	r5,0(sp)
 40005b0:	d9800115 	stw	r6,4(sp)
 40005b4:	4000f400 	call	4000f40 <__sinit>
 40005b8:	d9800117 	ldw	r6,4(sp)
 40005bc:	d9400017 	ldw	r5,0(sp)
 40005c0:	003fdf06 	br	4000540 <__alt_data_end+0xfc000540>

040005c4 <putc>:
 40005c4:	00810074 	movhi	r2,1025
 40005c8:	defffc04 	addi	sp,sp,-16
 40005cc:	10a4ab04 	addi	r2,r2,-27988
 40005d0:	dc000115 	stw	r16,4(sp)
 40005d4:	14000017 	ldw	r16,0(r2)
 40005d8:	dc400215 	stw	r17,8(sp)
 40005dc:	dfc00315 	stw	ra,12(sp)
 40005e0:	2023883a 	mov	r17,r4
 40005e4:	80000226 	beq	r16,zero,40005f0 <putc+0x2c>
 40005e8:	80800e17 	ldw	r2,56(r16)
 40005ec:	10001a26 	beq	r2,zero,4000658 <putc+0x94>
 40005f0:	28800217 	ldw	r2,8(r5)
 40005f4:	10bfffc4 	addi	r2,r2,-1
 40005f8:	28800215 	stw	r2,8(r5)
 40005fc:	10000b16 	blt	r2,zero,400062c <putc+0x68>
 4000600:	28800017 	ldw	r2,0(r5)
 4000604:	14400005 	stb	r17,0(r2)
 4000608:	28800017 	ldw	r2,0(r5)
 400060c:	10c00044 	addi	r3,r2,1
 4000610:	28c00015 	stw	r3,0(r5)
 4000614:	10800003 	ldbu	r2,0(r2)
 4000618:	dfc00317 	ldw	ra,12(sp)
 400061c:	dc400217 	ldw	r17,8(sp)
 4000620:	dc000117 	ldw	r16,4(sp)
 4000624:	dec00404 	addi	sp,sp,16
 4000628:	f800283a 	ret
 400062c:	28c00617 	ldw	r3,24(r5)
 4000630:	10c00e16 	blt	r2,r3,400066c <putc+0xa8>
 4000634:	28800017 	ldw	r2,0(r5)
 4000638:	01000284 	movi	r4,10
 400063c:	14400005 	stb	r17,0(r2)
 4000640:	28800017 	ldw	r2,0(r5)
 4000644:	10c00003 	ldbu	r3,0(r2)
 4000648:	193ff01e 	bne	r3,r4,400060c <__alt_data_end+0xfc00060c>
 400064c:	280d883a 	mov	r6,r5
 4000650:	180b883a 	mov	r5,r3
 4000654:	00000706 	br	4000674 <putc+0xb0>
 4000658:	8009883a 	mov	r4,r16
 400065c:	d9400015 	stw	r5,0(sp)
 4000660:	4000f400 	call	4000f40 <__sinit>
 4000664:	d9400017 	ldw	r5,0(sp)
 4000668:	003fe106 	br	40005f0 <__alt_data_end+0xfc0005f0>
 400066c:	280d883a 	mov	r6,r5
 4000670:	880b883a 	mov	r5,r17
 4000674:	8009883a 	mov	r4,r16
 4000678:	dfc00317 	ldw	ra,12(sp)
 400067c:	dc400217 	ldw	r17,8(sp)
 4000680:	dc000117 	ldw	r16,4(sp)
 4000684:	dec00404 	addi	sp,sp,16
 4000688:	400068c1 	jmpi	400068c <__swbuf_r>

0400068c <__swbuf_r>:
 400068c:	defffb04 	addi	sp,sp,-20
 4000690:	dcc00315 	stw	r19,12(sp)
 4000694:	dc800215 	stw	r18,8(sp)
 4000698:	dc000015 	stw	r16,0(sp)
 400069c:	dfc00415 	stw	ra,16(sp)
 40006a0:	dc400115 	stw	r17,4(sp)
 40006a4:	2025883a 	mov	r18,r4
 40006a8:	2827883a 	mov	r19,r5
 40006ac:	3021883a 	mov	r16,r6
 40006b0:	20000226 	beq	r4,zero,40006bc <__swbuf_r+0x30>
 40006b4:	20800e17 	ldw	r2,56(r4)
 40006b8:	10004226 	beq	r2,zero,40007c4 <__swbuf_r+0x138>
 40006bc:	80800617 	ldw	r2,24(r16)
 40006c0:	8100030b 	ldhu	r4,12(r16)
 40006c4:	80800215 	stw	r2,8(r16)
 40006c8:	2080020c 	andi	r2,r4,8
 40006cc:	10003626 	beq	r2,zero,40007a8 <__swbuf_r+0x11c>
 40006d0:	80c00417 	ldw	r3,16(r16)
 40006d4:	18003426 	beq	r3,zero,40007a8 <__swbuf_r+0x11c>
 40006d8:	2088000c 	andi	r2,r4,8192
 40006dc:	9c403fcc 	andi	r17,r19,255
 40006e0:	10001a26 	beq	r2,zero,400074c <__swbuf_r+0xc0>
 40006e4:	80800017 	ldw	r2,0(r16)
 40006e8:	81000517 	ldw	r4,20(r16)
 40006ec:	10c7c83a 	sub	r3,r2,r3
 40006f0:	1900200e 	bge	r3,r4,4000774 <__swbuf_r+0xe8>
 40006f4:	18c00044 	addi	r3,r3,1
 40006f8:	81000217 	ldw	r4,8(r16)
 40006fc:	11400044 	addi	r5,r2,1
 4000700:	81400015 	stw	r5,0(r16)
 4000704:	213fffc4 	addi	r4,r4,-1
 4000708:	81000215 	stw	r4,8(r16)
 400070c:	14c00005 	stb	r19,0(r2)
 4000710:	80800517 	ldw	r2,20(r16)
 4000714:	10c01e26 	beq	r2,r3,4000790 <__swbuf_r+0x104>
 4000718:	8080030b 	ldhu	r2,12(r16)
 400071c:	1080004c 	andi	r2,r2,1
 4000720:	10000226 	beq	r2,zero,400072c <__swbuf_r+0xa0>
 4000724:	00800284 	movi	r2,10
 4000728:	88801926 	beq	r17,r2,4000790 <__swbuf_r+0x104>
 400072c:	8805883a 	mov	r2,r17
 4000730:	dfc00417 	ldw	ra,16(sp)
 4000734:	dcc00317 	ldw	r19,12(sp)
 4000738:	dc800217 	ldw	r18,8(sp)
 400073c:	dc400117 	ldw	r17,4(sp)
 4000740:	dc000017 	ldw	r16,0(sp)
 4000744:	dec00504 	addi	sp,sp,20
 4000748:	f800283a 	ret
 400074c:	81401917 	ldw	r5,100(r16)
 4000750:	00b7ffc4 	movi	r2,-8193
 4000754:	21080014 	ori	r4,r4,8192
 4000758:	2884703a 	and	r2,r5,r2
 400075c:	80801915 	stw	r2,100(r16)
 4000760:	80800017 	ldw	r2,0(r16)
 4000764:	8100030d 	sth	r4,12(r16)
 4000768:	81000517 	ldw	r4,20(r16)
 400076c:	10c7c83a 	sub	r3,r2,r3
 4000770:	193fe016 	blt	r3,r4,40006f4 <__alt_data_end+0xfc0006f4>
 4000774:	800b883a 	mov	r5,r16
 4000778:	9009883a 	mov	r4,r18
 400077c:	4000b540 	call	4000b54 <_fflush_r>
 4000780:	1000071e 	bne	r2,zero,40007a0 <__swbuf_r+0x114>
 4000784:	80800017 	ldw	r2,0(r16)
 4000788:	00c00044 	movi	r3,1
 400078c:	003fda06 	br	40006f8 <__alt_data_end+0xfc0006f8>
 4000790:	800b883a 	mov	r5,r16
 4000794:	9009883a 	mov	r4,r18
 4000798:	4000b540 	call	4000b54 <_fflush_r>
 400079c:	103fe326 	beq	r2,zero,400072c <__alt_data_end+0xfc00072c>
 40007a0:	00bfffc4 	movi	r2,-1
 40007a4:	003fe206 	br	4000730 <__alt_data_end+0xfc000730>
 40007a8:	800b883a 	mov	r5,r16
 40007ac:	9009883a 	mov	r4,r18
 40007b0:	40007e40 	call	40007e4 <__swsetup_r>
 40007b4:	103ffa1e 	bne	r2,zero,40007a0 <__alt_data_end+0xfc0007a0>
 40007b8:	8100030b 	ldhu	r4,12(r16)
 40007bc:	80c00417 	ldw	r3,16(r16)
 40007c0:	003fc506 	br	40006d8 <__alt_data_end+0xfc0006d8>
 40007c4:	4000f400 	call	4000f40 <__sinit>
 40007c8:	003fbc06 	br	40006bc <__alt_data_end+0xfc0006bc>

040007cc <__swbuf>:
 40007cc:	00810074 	movhi	r2,1025
 40007d0:	10a4ab04 	addi	r2,r2,-27988
 40007d4:	280d883a 	mov	r6,r5
 40007d8:	200b883a 	mov	r5,r4
 40007dc:	11000017 	ldw	r4,0(r2)
 40007e0:	400068c1 	jmpi	400068c <__swbuf_r>

040007e4 <__swsetup_r>:
 40007e4:	00810074 	movhi	r2,1025
 40007e8:	defffd04 	addi	sp,sp,-12
 40007ec:	10a4ab04 	addi	r2,r2,-27988
 40007f0:	dc400115 	stw	r17,4(sp)
 40007f4:	2023883a 	mov	r17,r4
 40007f8:	11000017 	ldw	r4,0(r2)
 40007fc:	dc000015 	stw	r16,0(sp)
 4000800:	dfc00215 	stw	ra,8(sp)
 4000804:	2821883a 	mov	r16,r5
 4000808:	20000226 	beq	r4,zero,4000814 <__swsetup_r+0x30>
 400080c:	20800e17 	ldw	r2,56(r4)
 4000810:	10003126 	beq	r2,zero,40008d8 <__swsetup_r+0xf4>
 4000814:	8080030b 	ldhu	r2,12(r16)
 4000818:	10c0020c 	andi	r3,r2,8
 400081c:	1009883a 	mov	r4,r2
 4000820:	18000f26 	beq	r3,zero,4000860 <__swsetup_r+0x7c>
 4000824:	80c00417 	ldw	r3,16(r16)
 4000828:	18001526 	beq	r3,zero,4000880 <__swsetup_r+0x9c>
 400082c:	1100004c 	andi	r4,r2,1
 4000830:	20001c1e 	bne	r4,zero,40008a4 <__swsetup_r+0xc0>
 4000834:	1080008c 	andi	r2,r2,2
 4000838:	1000291e 	bne	r2,zero,40008e0 <__swsetup_r+0xfc>
 400083c:	80800517 	ldw	r2,20(r16)
 4000840:	80800215 	stw	r2,8(r16)
 4000844:	18001c26 	beq	r3,zero,40008b8 <__swsetup_r+0xd4>
 4000848:	0005883a 	mov	r2,zero
 400084c:	dfc00217 	ldw	ra,8(sp)
 4000850:	dc400117 	ldw	r17,4(sp)
 4000854:	dc000017 	ldw	r16,0(sp)
 4000858:	dec00304 	addi	sp,sp,12
 400085c:	f800283a 	ret
 4000860:	2080040c 	andi	r2,r4,16
 4000864:	10002e26 	beq	r2,zero,4000920 <__swsetup_r+0x13c>
 4000868:	2080010c 	andi	r2,r4,4
 400086c:	10001e1e 	bne	r2,zero,40008e8 <__swsetup_r+0x104>
 4000870:	80c00417 	ldw	r3,16(r16)
 4000874:	20800214 	ori	r2,r4,8
 4000878:	8080030d 	sth	r2,12(r16)
 400087c:	183feb1e 	bne	r3,zero,400082c <__alt_data_end+0xfc00082c>
 4000880:	1100a00c 	andi	r4,r2,640
 4000884:	01408004 	movi	r5,512
 4000888:	217fe826 	beq	r4,r5,400082c <__alt_data_end+0xfc00082c>
 400088c:	800b883a 	mov	r5,r16
 4000890:	8809883a 	mov	r4,r17
 4000894:	400154c0 	call	400154c <__smakebuf_r>
 4000898:	8080030b 	ldhu	r2,12(r16)
 400089c:	80c00417 	ldw	r3,16(r16)
 40008a0:	003fe206 	br	400082c <__alt_data_end+0xfc00082c>
 40008a4:	80800517 	ldw	r2,20(r16)
 40008a8:	80000215 	stw	zero,8(r16)
 40008ac:	0085c83a 	sub	r2,zero,r2
 40008b0:	80800615 	stw	r2,24(r16)
 40008b4:	183fe41e 	bne	r3,zero,4000848 <__alt_data_end+0xfc000848>
 40008b8:	80c0030b 	ldhu	r3,12(r16)
 40008bc:	0005883a 	mov	r2,zero
 40008c0:	1900200c 	andi	r4,r3,128
 40008c4:	203fe126 	beq	r4,zero,400084c <__alt_data_end+0xfc00084c>
 40008c8:	18c01014 	ori	r3,r3,64
 40008cc:	80c0030d 	sth	r3,12(r16)
 40008d0:	00bfffc4 	movi	r2,-1
 40008d4:	003fdd06 	br	400084c <__alt_data_end+0xfc00084c>
 40008d8:	4000f400 	call	4000f40 <__sinit>
 40008dc:	003fcd06 	br	4000814 <__alt_data_end+0xfc000814>
 40008e0:	0005883a 	mov	r2,zero
 40008e4:	003fd606 	br	4000840 <__alt_data_end+0xfc000840>
 40008e8:	81400c17 	ldw	r5,48(r16)
 40008ec:	28000626 	beq	r5,zero,4000908 <__swsetup_r+0x124>
 40008f0:	80801004 	addi	r2,r16,64
 40008f4:	28800326 	beq	r5,r2,4000904 <__swsetup_r+0x120>
 40008f8:	8809883a 	mov	r4,r17
 40008fc:	40010b40 	call	40010b4 <_free_r>
 4000900:	8100030b 	ldhu	r4,12(r16)
 4000904:	80000c15 	stw	zero,48(r16)
 4000908:	80c00417 	ldw	r3,16(r16)
 400090c:	00bff6c4 	movi	r2,-37
 4000910:	1108703a 	and	r4,r2,r4
 4000914:	80000115 	stw	zero,4(r16)
 4000918:	80c00015 	stw	r3,0(r16)
 400091c:	003fd506 	br	4000874 <__alt_data_end+0xfc000874>
 4000920:	00800244 	movi	r2,9
 4000924:	88800015 	stw	r2,0(r17)
 4000928:	20801014 	ori	r2,r4,64
 400092c:	8080030d 	sth	r2,12(r16)
 4000930:	00bfffc4 	movi	r2,-1
 4000934:	003fc506 	br	400084c <__alt_data_end+0xfc00084c>

04000938 <__sflush_r>:
 4000938:	2880030b 	ldhu	r2,12(r5)
 400093c:	defffb04 	addi	sp,sp,-20
 4000940:	dcc00315 	stw	r19,12(sp)
 4000944:	dc400115 	stw	r17,4(sp)
 4000948:	dfc00415 	stw	ra,16(sp)
 400094c:	dc800215 	stw	r18,8(sp)
 4000950:	dc000015 	stw	r16,0(sp)
 4000954:	10c0020c 	andi	r3,r2,8
 4000958:	2823883a 	mov	r17,r5
 400095c:	2027883a 	mov	r19,r4
 4000960:	1800311e 	bne	r3,zero,4000a28 <__sflush_r+0xf0>
 4000964:	28c00117 	ldw	r3,4(r5)
 4000968:	10820014 	ori	r2,r2,2048
 400096c:	2880030d 	sth	r2,12(r5)
 4000970:	00c04b0e 	bge	zero,r3,4000aa0 <__sflush_r+0x168>
 4000974:	8a000a17 	ldw	r8,40(r17)
 4000978:	40002326 	beq	r8,zero,4000a08 <__sflush_r+0xd0>
 400097c:	9c000017 	ldw	r16,0(r19)
 4000980:	10c4000c 	andi	r3,r2,4096
 4000984:	98000015 	stw	zero,0(r19)
 4000988:	18004826 	beq	r3,zero,4000aac <__sflush_r+0x174>
 400098c:	89801417 	ldw	r6,80(r17)
 4000990:	10c0010c 	andi	r3,r2,4
 4000994:	18000626 	beq	r3,zero,40009b0 <__sflush_r+0x78>
 4000998:	88c00117 	ldw	r3,4(r17)
 400099c:	88800c17 	ldw	r2,48(r17)
 40009a0:	30cdc83a 	sub	r6,r6,r3
 40009a4:	10000226 	beq	r2,zero,40009b0 <__sflush_r+0x78>
 40009a8:	88800f17 	ldw	r2,60(r17)
 40009ac:	308dc83a 	sub	r6,r6,r2
 40009b0:	89400717 	ldw	r5,28(r17)
 40009b4:	000f883a 	mov	r7,zero
 40009b8:	9809883a 	mov	r4,r19
 40009bc:	403ee83a 	callr	r8
 40009c0:	00ffffc4 	movi	r3,-1
 40009c4:	10c04426 	beq	r2,r3,4000ad8 <__sflush_r+0x1a0>
 40009c8:	88c0030b 	ldhu	r3,12(r17)
 40009cc:	89000417 	ldw	r4,16(r17)
 40009d0:	88000115 	stw	zero,4(r17)
 40009d4:	197dffcc 	andi	r5,r3,63487
 40009d8:	8940030d 	sth	r5,12(r17)
 40009dc:	89000015 	stw	r4,0(r17)
 40009e0:	18c4000c 	andi	r3,r3,4096
 40009e4:	18002c1e 	bne	r3,zero,4000a98 <__sflush_r+0x160>
 40009e8:	89400c17 	ldw	r5,48(r17)
 40009ec:	9c000015 	stw	r16,0(r19)
 40009f0:	28000526 	beq	r5,zero,4000a08 <__sflush_r+0xd0>
 40009f4:	88801004 	addi	r2,r17,64
 40009f8:	28800226 	beq	r5,r2,4000a04 <__sflush_r+0xcc>
 40009fc:	9809883a 	mov	r4,r19
 4000a00:	40010b40 	call	40010b4 <_free_r>
 4000a04:	88000c15 	stw	zero,48(r17)
 4000a08:	0005883a 	mov	r2,zero
 4000a0c:	dfc00417 	ldw	ra,16(sp)
 4000a10:	dcc00317 	ldw	r19,12(sp)
 4000a14:	dc800217 	ldw	r18,8(sp)
 4000a18:	dc400117 	ldw	r17,4(sp)
 4000a1c:	dc000017 	ldw	r16,0(sp)
 4000a20:	dec00504 	addi	sp,sp,20
 4000a24:	f800283a 	ret
 4000a28:	2c800417 	ldw	r18,16(r5)
 4000a2c:	903ff626 	beq	r18,zero,4000a08 <__alt_data_end+0xfc000a08>
 4000a30:	2c000017 	ldw	r16,0(r5)
 4000a34:	108000cc 	andi	r2,r2,3
 4000a38:	2c800015 	stw	r18,0(r5)
 4000a3c:	84a1c83a 	sub	r16,r16,r18
 4000a40:	1000131e 	bne	r2,zero,4000a90 <__sflush_r+0x158>
 4000a44:	28800517 	ldw	r2,20(r5)
 4000a48:	88800215 	stw	r2,8(r17)
 4000a4c:	04000316 	blt	zero,r16,4000a5c <__sflush_r+0x124>
 4000a50:	003fed06 	br	4000a08 <__alt_data_end+0xfc000a08>
 4000a54:	90a5883a 	add	r18,r18,r2
 4000a58:	043feb0e 	bge	zero,r16,4000a08 <__alt_data_end+0xfc000a08>
 4000a5c:	88800917 	ldw	r2,36(r17)
 4000a60:	89400717 	ldw	r5,28(r17)
 4000a64:	800f883a 	mov	r7,r16
 4000a68:	900d883a 	mov	r6,r18
 4000a6c:	9809883a 	mov	r4,r19
 4000a70:	103ee83a 	callr	r2
 4000a74:	80a1c83a 	sub	r16,r16,r2
 4000a78:	00bff616 	blt	zero,r2,4000a54 <__alt_data_end+0xfc000a54>
 4000a7c:	88c0030b 	ldhu	r3,12(r17)
 4000a80:	00bfffc4 	movi	r2,-1
 4000a84:	18c01014 	ori	r3,r3,64
 4000a88:	88c0030d 	sth	r3,12(r17)
 4000a8c:	003fdf06 	br	4000a0c <__alt_data_end+0xfc000a0c>
 4000a90:	0005883a 	mov	r2,zero
 4000a94:	003fec06 	br	4000a48 <__alt_data_end+0xfc000a48>
 4000a98:	88801415 	stw	r2,80(r17)
 4000a9c:	003fd206 	br	40009e8 <__alt_data_end+0xfc0009e8>
 4000aa0:	28c00f17 	ldw	r3,60(r5)
 4000aa4:	00ffb316 	blt	zero,r3,4000974 <__alt_data_end+0xfc000974>
 4000aa8:	003fd706 	br	4000a08 <__alt_data_end+0xfc000a08>
 4000aac:	89400717 	ldw	r5,28(r17)
 4000ab0:	000d883a 	mov	r6,zero
 4000ab4:	01c00044 	movi	r7,1
 4000ab8:	9809883a 	mov	r4,r19
 4000abc:	403ee83a 	callr	r8
 4000ac0:	100d883a 	mov	r6,r2
 4000ac4:	00bfffc4 	movi	r2,-1
 4000ac8:	30801426 	beq	r6,r2,4000b1c <__sflush_r+0x1e4>
 4000acc:	8880030b 	ldhu	r2,12(r17)
 4000ad0:	8a000a17 	ldw	r8,40(r17)
 4000ad4:	003fae06 	br	4000990 <__alt_data_end+0xfc000990>
 4000ad8:	98c00017 	ldw	r3,0(r19)
 4000adc:	183fba26 	beq	r3,zero,40009c8 <__alt_data_end+0xfc0009c8>
 4000ae0:	01000744 	movi	r4,29
 4000ae4:	19000626 	beq	r3,r4,4000b00 <__sflush_r+0x1c8>
 4000ae8:	01000584 	movi	r4,22
 4000aec:	19000426 	beq	r3,r4,4000b00 <__sflush_r+0x1c8>
 4000af0:	88c0030b 	ldhu	r3,12(r17)
 4000af4:	18c01014 	ori	r3,r3,64
 4000af8:	88c0030d 	sth	r3,12(r17)
 4000afc:	003fc306 	br	4000a0c <__alt_data_end+0xfc000a0c>
 4000b00:	8880030b 	ldhu	r2,12(r17)
 4000b04:	88c00417 	ldw	r3,16(r17)
 4000b08:	88000115 	stw	zero,4(r17)
 4000b0c:	10bdffcc 	andi	r2,r2,63487
 4000b10:	8880030d 	sth	r2,12(r17)
 4000b14:	88c00015 	stw	r3,0(r17)
 4000b18:	003fb306 	br	40009e8 <__alt_data_end+0xfc0009e8>
 4000b1c:	98800017 	ldw	r2,0(r19)
 4000b20:	103fea26 	beq	r2,zero,4000acc <__alt_data_end+0xfc000acc>
 4000b24:	00c00744 	movi	r3,29
 4000b28:	10c00226 	beq	r2,r3,4000b34 <__sflush_r+0x1fc>
 4000b2c:	00c00584 	movi	r3,22
 4000b30:	10c0031e 	bne	r2,r3,4000b40 <__sflush_r+0x208>
 4000b34:	9c000015 	stw	r16,0(r19)
 4000b38:	0005883a 	mov	r2,zero
 4000b3c:	003fb306 	br	4000a0c <__alt_data_end+0xfc000a0c>
 4000b40:	88c0030b 	ldhu	r3,12(r17)
 4000b44:	3005883a 	mov	r2,r6
 4000b48:	18c01014 	ori	r3,r3,64
 4000b4c:	88c0030d 	sth	r3,12(r17)
 4000b50:	003fae06 	br	4000a0c <__alt_data_end+0xfc000a0c>

04000b54 <_fflush_r>:
 4000b54:	defffd04 	addi	sp,sp,-12
 4000b58:	dc000115 	stw	r16,4(sp)
 4000b5c:	dfc00215 	stw	ra,8(sp)
 4000b60:	2021883a 	mov	r16,r4
 4000b64:	20000226 	beq	r4,zero,4000b70 <_fflush_r+0x1c>
 4000b68:	20800e17 	ldw	r2,56(r4)
 4000b6c:	10000c26 	beq	r2,zero,4000ba0 <_fflush_r+0x4c>
 4000b70:	2880030f 	ldh	r2,12(r5)
 4000b74:	1000051e 	bne	r2,zero,4000b8c <_fflush_r+0x38>
 4000b78:	0005883a 	mov	r2,zero
 4000b7c:	dfc00217 	ldw	ra,8(sp)
 4000b80:	dc000117 	ldw	r16,4(sp)
 4000b84:	dec00304 	addi	sp,sp,12
 4000b88:	f800283a 	ret
 4000b8c:	8009883a 	mov	r4,r16
 4000b90:	dfc00217 	ldw	ra,8(sp)
 4000b94:	dc000117 	ldw	r16,4(sp)
 4000b98:	dec00304 	addi	sp,sp,12
 4000b9c:	40009381 	jmpi	4000938 <__sflush_r>
 4000ba0:	d9400015 	stw	r5,0(sp)
 4000ba4:	4000f400 	call	4000f40 <__sinit>
 4000ba8:	d9400017 	ldw	r5,0(sp)
 4000bac:	003ff006 	br	4000b70 <__alt_data_end+0xfc000b70>

04000bb0 <fflush>:
 4000bb0:	20000526 	beq	r4,zero,4000bc8 <fflush+0x18>
 4000bb4:	00810074 	movhi	r2,1025
 4000bb8:	10a4ab04 	addi	r2,r2,-27988
 4000bbc:	200b883a 	mov	r5,r4
 4000bc0:	11000017 	ldw	r4,0(r2)
 4000bc4:	4000b541 	jmpi	4000b54 <_fflush_r>
 4000bc8:	00810074 	movhi	r2,1025
 4000bcc:	10a4aa04 	addi	r2,r2,-27992
 4000bd0:	11000017 	ldw	r4,0(r2)
 4000bd4:	01410034 	movhi	r5,1024
 4000bd8:	2942d504 	addi	r5,r5,2900
 4000bdc:	40014881 	jmpi	4001488 <_fwalk_reent>

04000be0 <__fp_unlock>:
 4000be0:	0005883a 	mov	r2,zero
 4000be4:	f800283a 	ret

04000be8 <_cleanup_r>:
 4000be8:	01410034 	movhi	r5,1024
 4000bec:	2948a004 	addi	r5,r5,8832
 4000bf0:	40014881 	jmpi	4001488 <_fwalk_reent>

04000bf4 <__sinit.part.1>:
 4000bf4:	defff704 	addi	sp,sp,-36
 4000bf8:	00c10034 	movhi	r3,1024
 4000bfc:	dfc00815 	stw	ra,32(sp)
 4000c00:	ddc00715 	stw	r23,28(sp)
 4000c04:	dd800615 	stw	r22,24(sp)
 4000c08:	dd400515 	stw	r21,20(sp)
 4000c0c:	dd000415 	stw	r20,16(sp)
 4000c10:	dcc00315 	stw	r19,12(sp)
 4000c14:	dc800215 	stw	r18,8(sp)
 4000c18:	dc400115 	stw	r17,4(sp)
 4000c1c:	dc000015 	stw	r16,0(sp)
 4000c20:	18c2fa04 	addi	r3,r3,3048
 4000c24:	24000117 	ldw	r16,4(r4)
 4000c28:	20c00f15 	stw	r3,60(r4)
 4000c2c:	2080bb04 	addi	r2,r4,748
 4000c30:	00c000c4 	movi	r3,3
 4000c34:	20c0b915 	stw	r3,740(r4)
 4000c38:	2080ba15 	stw	r2,744(r4)
 4000c3c:	2000b815 	stw	zero,736(r4)
 4000c40:	05c00204 	movi	r23,8
 4000c44:	00800104 	movi	r2,4
 4000c48:	2025883a 	mov	r18,r4
 4000c4c:	b80d883a 	mov	r6,r23
 4000c50:	81001704 	addi	r4,r16,92
 4000c54:	000b883a 	mov	r5,zero
 4000c58:	80000015 	stw	zero,0(r16)
 4000c5c:	80000115 	stw	zero,4(r16)
 4000c60:	80000215 	stw	zero,8(r16)
 4000c64:	8080030d 	sth	r2,12(r16)
 4000c68:	80001915 	stw	zero,100(r16)
 4000c6c:	8000038d 	sth	zero,14(r16)
 4000c70:	80000415 	stw	zero,16(r16)
 4000c74:	80000515 	stw	zero,20(r16)
 4000c78:	80000615 	stw	zero,24(r16)
 4000c7c:	4001f140 	call	4001f14 <memset>
 4000c80:	05810034 	movhi	r22,1024
 4000c84:	94400217 	ldw	r17,8(r18)
 4000c88:	05410034 	movhi	r21,1024
 4000c8c:	05010034 	movhi	r20,1024
 4000c90:	04c10034 	movhi	r19,1024
 4000c94:	b5882404 	addi	r22,r22,8336
 4000c98:	ad483b04 	addi	r21,r21,8428
 4000c9c:	a5085a04 	addi	r20,r20,8552
 4000ca0:	9cc87104 	addi	r19,r19,8644
 4000ca4:	85800815 	stw	r22,32(r16)
 4000ca8:	85400915 	stw	r21,36(r16)
 4000cac:	85000a15 	stw	r20,40(r16)
 4000cb0:	84c00b15 	stw	r19,44(r16)
 4000cb4:	84000715 	stw	r16,28(r16)
 4000cb8:	00800284 	movi	r2,10
 4000cbc:	8880030d 	sth	r2,12(r17)
 4000cc0:	00800044 	movi	r2,1
 4000cc4:	b80d883a 	mov	r6,r23
 4000cc8:	89001704 	addi	r4,r17,92
 4000ccc:	000b883a 	mov	r5,zero
 4000cd0:	88000015 	stw	zero,0(r17)
 4000cd4:	88000115 	stw	zero,4(r17)
 4000cd8:	88000215 	stw	zero,8(r17)
 4000cdc:	88001915 	stw	zero,100(r17)
 4000ce0:	8880038d 	sth	r2,14(r17)
 4000ce4:	88000415 	stw	zero,16(r17)
 4000ce8:	88000515 	stw	zero,20(r17)
 4000cec:	88000615 	stw	zero,24(r17)
 4000cf0:	4001f140 	call	4001f14 <memset>
 4000cf4:	94000317 	ldw	r16,12(r18)
 4000cf8:	00800484 	movi	r2,18
 4000cfc:	8c400715 	stw	r17,28(r17)
 4000d00:	8d800815 	stw	r22,32(r17)
 4000d04:	8d400915 	stw	r21,36(r17)
 4000d08:	8d000a15 	stw	r20,40(r17)
 4000d0c:	8cc00b15 	stw	r19,44(r17)
 4000d10:	8080030d 	sth	r2,12(r16)
 4000d14:	00800084 	movi	r2,2
 4000d18:	80000015 	stw	zero,0(r16)
 4000d1c:	80000115 	stw	zero,4(r16)
 4000d20:	80000215 	stw	zero,8(r16)
 4000d24:	80001915 	stw	zero,100(r16)
 4000d28:	8080038d 	sth	r2,14(r16)
 4000d2c:	80000415 	stw	zero,16(r16)
 4000d30:	80000515 	stw	zero,20(r16)
 4000d34:	80000615 	stw	zero,24(r16)
 4000d38:	b80d883a 	mov	r6,r23
 4000d3c:	000b883a 	mov	r5,zero
 4000d40:	81001704 	addi	r4,r16,92
 4000d44:	4001f140 	call	4001f14 <memset>
 4000d48:	00800044 	movi	r2,1
 4000d4c:	84000715 	stw	r16,28(r16)
 4000d50:	85800815 	stw	r22,32(r16)
 4000d54:	85400915 	stw	r21,36(r16)
 4000d58:	85000a15 	stw	r20,40(r16)
 4000d5c:	84c00b15 	stw	r19,44(r16)
 4000d60:	90800e15 	stw	r2,56(r18)
 4000d64:	dfc00817 	ldw	ra,32(sp)
 4000d68:	ddc00717 	ldw	r23,28(sp)
 4000d6c:	dd800617 	ldw	r22,24(sp)
 4000d70:	dd400517 	ldw	r21,20(sp)
 4000d74:	dd000417 	ldw	r20,16(sp)
 4000d78:	dcc00317 	ldw	r19,12(sp)
 4000d7c:	dc800217 	ldw	r18,8(sp)
 4000d80:	dc400117 	ldw	r17,4(sp)
 4000d84:	dc000017 	ldw	r16,0(sp)
 4000d88:	dec00904 	addi	sp,sp,36
 4000d8c:	f800283a 	ret

04000d90 <__fp_lock>:
 4000d90:	0005883a 	mov	r2,zero
 4000d94:	f800283a 	ret

04000d98 <__sfmoreglue>:
 4000d98:	defffc04 	addi	sp,sp,-16
 4000d9c:	dc800215 	stw	r18,8(sp)
 4000da0:	2825883a 	mov	r18,r5
 4000da4:	dc000015 	stw	r16,0(sp)
 4000da8:	01401a04 	movi	r5,104
 4000dac:	2021883a 	mov	r16,r4
 4000db0:	913fffc4 	addi	r4,r18,-1
 4000db4:	dfc00315 	stw	ra,12(sp)
 4000db8:	dc400115 	stw	r17,4(sp)
 4000dbc:	40024f40 	call	40024f4 <__mulsi3>
 4000dc0:	8009883a 	mov	r4,r16
 4000dc4:	11401d04 	addi	r5,r2,116
 4000dc8:	1023883a 	mov	r17,r2
 4000dcc:	40017080 	call	4001708 <_malloc_r>
 4000dd0:	1021883a 	mov	r16,r2
 4000dd4:	10000726 	beq	r2,zero,4000df4 <__sfmoreglue+0x5c>
 4000dd8:	11000304 	addi	r4,r2,12
 4000ddc:	10000015 	stw	zero,0(r2)
 4000de0:	14800115 	stw	r18,4(r2)
 4000de4:	11000215 	stw	r4,8(r2)
 4000de8:	89801a04 	addi	r6,r17,104
 4000dec:	000b883a 	mov	r5,zero
 4000df0:	4001f140 	call	4001f14 <memset>
 4000df4:	8005883a 	mov	r2,r16
 4000df8:	dfc00317 	ldw	ra,12(sp)
 4000dfc:	dc800217 	ldw	r18,8(sp)
 4000e00:	dc400117 	ldw	r17,4(sp)
 4000e04:	dc000017 	ldw	r16,0(sp)
 4000e08:	dec00404 	addi	sp,sp,16
 4000e0c:	f800283a 	ret

04000e10 <__sfp>:
 4000e10:	defffb04 	addi	sp,sp,-20
 4000e14:	dc000015 	stw	r16,0(sp)
 4000e18:	04010074 	movhi	r16,1025
 4000e1c:	8424aa04 	addi	r16,r16,-27992
 4000e20:	dcc00315 	stw	r19,12(sp)
 4000e24:	2027883a 	mov	r19,r4
 4000e28:	81000017 	ldw	r4,0(r16)
 4000e2c:	dfc00415 	stw	ra,16(sp)
 4000e30:	dc800215 	stw	r18,8(sp)
 4000e34:	20800e17 	ldw	r2,56(r4)
 4000e38:	dc400115 	stw	r17,4(sp)
 4000e3c:	1000021e 	bne	r2,zero,4000e48 <__sfp+0x38>
 4000e40:	4000bf40 	call	4000bf4 <__sinit.part.1>
 4000e44:	81000017 	ldw	r4,0(r16)
 4000e48:	2480b804 	addi	r18,r4,736
 4000e4c:	047fffc4 	movi	r17,-1
 4000e50:	91000117 	ldw	r4,4(r18)
 4000e54:	94000217 	ldw	r16,8(r18)
 4000e58:	213fffc4 	addi	r4,r4,-1
 4000e5c:	20000a16 	blt	r4,zero,4000e88 <__sfp+0x78>
 4000e60:	8080030f 	ldh	r2,12(r16)
 4000e64:	10000c26 	beq	r2,zero,4000e98 <__sfp+0x88>
 4000e68:	80c01d04 	addi	r3,r16,116
 4000e6c:	00000206 	br	4000e78 <__sfp+0x68>
 4000e70:	18bfe60f 	ldh	r2,-104(r3)
 4000e74:	10000826 	beq	r2,zero,4000e98 <__sfp+0x88>
 4000e78:	213fffc4 	addi	r4,r4,-1
 4000e7c:	1c3ffd04 	addi	r16,r3,-12
 4000e80:	18c01a04 	addi	r3,r3,104
 4000e84:	247ffa1e 	bne	r4,r17,4000e70 <__alt_data_end+0xfc000e70>
 4000e88:	90800017 	ldw	r2,0(r18)
 4000e8c:	10001d26 	beq	r2,zero,4000f04 <__sfp+0xf4>
 4000e90:	1025883a 	mov	r18,r2
 4000e94:	003fee06 	br	4000e50 <__alt_data_end+0xfc000e50>
 4000e98:	00bfffc4 	movi	r2,-1
 4000e9c:	8080038d 	sth	r2,14(r16)
 4000ea0:	00800044 	movi	r2,1
 4000ea4:	8080030d 	sth	r2,12(r16)
 4000ea8:	80001915 	stw	zero,100(r16)
 4000eac:	80000015 	stw	zero,0(r16)
 4000eb0:	80000215 	stw	zero,8(r16)
 4000eb4:	80000115 	stw	zero,4(r16)
 4000eb8:	80000415 	stw	zero,16(r16)
 4000ebc:	80000515 	stw	zero,20(r16)
 4000ec0:	80000615 	stw	zero,24(r16)
 4000ec4:	01800204 	movi	r6,8
 4000ec8:	000b883a 	mov	r5,zero
 4000ecc:	81001704 	addi	r4,r16,92
 4000ed0:	4001f140 	call	4001f14 <memset>
 4000ed4:	8005883a 	mov	r2,r16
 4000ed8:	80000c15 	stw	zero,48(r16)
 4000edc:	80000d15 	stw	zero,52(r16)
 4000ee0:	80001115 	stw	zero,68(r16)
 4000ee4:	80001215 	stw	zero,72(r16)
 4000ee8:	dfc00417 	ldw	ra,16(sp)
 4000eec:	dcc00317 	ldw	r19,12(sp)
 4000ef0:	dc800217 	ldw	r18,8(sp)
 4000ef4:	dc400117 	ldw	r17,4(sp)
 4000ef8:	dc000017 	ldw	r16,0(sp)
 4000efc:	dec00504 	addi	sp,sp,20
 4000f00:	f800283a 	ret
 4000f04:	01400104 	movi	r5,4
 4000f08:	9809883a 	mov	r4,r19
 4000f0c:	4000d980 	call	4000d98 <__sfmoreglue>
 4000f10:	90800015 	stw	r2,0(r18)
 4000f14:	103fde1e 	bne	r2,zero,4000e90 <__alt_data_end+0xfc000e90>
 4000f18:	00800304 	movi	r2,12
 4000f1c:	98800015 	stw	r2,0(r19)
 4000f20:	0005883a 	mov	r2,zero
 4000f24:	003ff006 	br	4000ee8 <__alt_data_end+0xfc000ee8>

04000f28 <_cleanup>:
 4000f28:	00810074 	movhi	r2,1025
 4000f2c:	10a4aa04 	addi	r2,r2,-27992
 4000f30:	11000017 	ldw	r4,0(r2)
 4000f34:	01410034 	movhi	r5,1024
 4000f38:	2948a004 	addi	r5,r5,8832
 4000f3c:	40014881 	jmpi	4001488 <_fwalk_reent>

04000f40 <__sinit>:
 4000f40:	20800e17 	ldw	r2,56(r4)
 4000f44:	10000126 	beq	r2,zero,4000f4c <__sinit+0xc>
 4000f48:	f800283a 	ret
 4000f4c:	4000bf41 	jmpi	4000bf4 <__sinit.part.1>

04000f50 <__sfp_lock_acquire>:
 4000f50:	f800283a 	ret

04000f54 <__sfp_lock_release>:
 4000f54:	f800283a 	ret

04000f58 <__sinit_lock_acquire>:
 4000f58:	f800283a 	ret

04000f5c <__sinit_lock_release>:
 4000f5c:	f800283a 	ret

04000f60 <__fp_lock_all>:
 4000f60:	00810074 	movhi	r2,1025
 4000f64:	10a4ab04 	addi	r2,r2,-27988
 4000f68:	11000017 	ldw	r4,0(r2)
 4000f6c:	01410034 	movhi	r5,1024
 4000f70:	29436404 	addi	r5,r5,3472
 4000f74:	40013c41 	jmpi	40013c4 <_fwalk>

04000f78 <__fp_unlock_all>:
 4000f78:	00810074 	movhi	r2,1025
 4000f7c:	10a4ab04 	addi	r2,r2,-27988
 4000f80:	11000017 	ldw	r4,0(r2)
 4000f84:	01410034 	movhi	r5,1024
 4000f88:	2942f804 	addi	r5,r5,3040
 4000f8c:	40013c41 	jmpi	40013c4 <_fwalk>

04000f90 <_malloc_trim_r>:
 4000f90:	defffb04 	addi	sp,sp,-20
 4000f94:	dcc00315 	stw	r19,12(sp)
 4000f98:	04c10034 	movhi	r19,1024
 4000f9c:	dc800215 	stw	r18,8(sp)
 4000fa0:	dc400115 	stw	r17,4(sp)
 4000fa4:	dc000015 	stw	r16,0(sp)
 4000fa8:	dfc00415 	stw	ra,16(sp)
 4000fac:	2821883a 	mov	r16,r5
 4000fb0:	9cdee704 	addi	r19,r19,31644
 4000fb4:	2025883a 	mov	r18,r4
 4000fb8:	4002ab80 	call	4002ab8 <__malloc_lock>
 4000fbc:	98800217 	ldw	r2,8(r19)
 4000fc0:	14400117 	ldw	r17,4(r2)
 4000fc4:	00bfff04 	movi	r2,-4
 4000fc8:	88a2703a 	and	r17,r17,r2
 4000fcc:	8c21c83a 	sub	r16,r17,r16
 4000fd0:	8403fbc4 	addi	r16,r16,4079
 4000fd4:	8020d33a 	srli	r16,r16,12
 4000fd8:	0083ffc4 	movi	r2,4095
 4000fdc:	843fffc4 	addi	r16,r16,-1
 4000fe0:	8020933a 	slli	r16,r16,12
 4000fe4:	1400060e 	bge	r2,r16,4001000 <_malloc_trim_r+0x70>
 4000fe8:	000b883a 	mov	r5,zero
 4000fec:	9009883a 	mov	r4,r18
 4000ff0:	400203c0 	call	400203c <_sbrk_r>
 4000ff4:	98c00217 	ldw	r3,8(r19)
 4000ff8:	1c47883a 	add	r3,r3,r17
 4000ffc:	10c00a26 	beq	r2,r3,4001028 <_malloc_trim_r+0x98>
 4001000:	9009883a 	mov	r4,r18
 4001004:	4002adc0 	call	4002adc <__malloc_unlock>
 4001008:	0005883a 	mov	r2,zero
 400100c:	dfc00417 	ldw	ra,16(sp)
 4001010:	dcc00317 	ldw	r19,12(sp)
 4001014:	dc800217 	ldw	r18,8(sp)
 4001018:	dc400117 	ldw	r17,4(sp)
 400101c:	dc000017 	ldw	r16,0(sp)
 4001020:	dec00504 	addi	sp,sp,20
 4001024:	f800283a 	ret
 4001028:	040bc83a 	sub	r5,zero,r16
 400102c:	9009883a 	mov	r4,r18
 4001030:	400203c0 	call	400203c <_sbrk_r>
 4001034:	00ffffc4 	movi	r3,-1
 4001038:	10c00d26 	beq	r2,r3,4001070 <_malloc_trim_r+0xe0>
 400103c:	00c10074 	movhi	r3,1025
 4001040:	18eba204 	addi	r3,r3,-20856
 4001044:	18800017 	ldw	r2,0(r3)
 4001048:	99000217 	ldw	r4,8(r19)
 400104c:	8c23c83a 	sub	r17,r17,r16
 4001050:	8c400054 	ori	r17,r17,1
 4001054:	1421c83a 	sub	r16,r2,r16
 4001058:	24400115 	stw	r17,4(r4)
 400105c:	9009883a 	mov	r4,r18
 4001060:	1c000015 	stw	r16,0(r3)
 4001064:	4002adc0 	call	4002adc <__malloc_unlock>
 4001068:	00800044 	movi	r2,1
 400106c:	003fe706 	br	400100c <__alt_data_end+0xfc00100c>
 4001070:	000b883a 	mov	r5,zero
 4001074:	9009883a 	mov	r4,r18
 4001078:	400203c0 	call	400203c <_sbrk_r>
 400107c:	99000217 	ldw	r4,8(r19)
 4001080:	014003c4 	movi	r5,15
 4001084:	1107c83a 	sub	r3,r2,r4
 4001088:	28ffdd0e 	bge	r5,r3,4001000 <__alt_data_end+0xfc001000>
 400108c:	01410074 	movhi	r5,1025
 4001090:	2964ac04 	addi	r5,r5,-27984
 4001094:	29400017 	ldw	r5,0(r5)
 4001098:	18c00054 	ori	r3,r3,1
 400109c:	20c00115 	stw	r3,4(r4)
 40010a0:	00c10074 	movhi	r3,1025
 40010a4:	1145c83a 	sub	r2,r2,r5
 40010a8:	18eba204 	addi	r3,r3,-20856
 40010ac:	18800015 	stw	r2,0(r3)
 40010b0:	003fd306 	br	4001000 <__alt_data_end+0xfc001000>

040010b4 <_free_r>:
 40010b4:	28004126 	beq	r5,zero,40011bc <_free_r+0x108>
 40010b8:	defffd04 	addi	sp,sp,-12
 40010bc:	dc400115 	stw	r17,4(sp)
 40010c0:	dc000015 	stw	r16,0(sp)
 40010c4:	2023883a 	mov	r17,r4
 40010c8:	2821883a 	mov	r16,r5
 40010cc:	dfc00215 	stw	ra,8(sp)
 40010d0:	4002ab80 	call	4002ab8 <__malloc_lock>
 40010d4:	81ffff17 	ldw	r7,-4(r16)
 40010d8:	00bfff84 	movi	r2,-2
 40010dc:	01010034 	movhi	r4,1024
 40010e0:	81bffe04 	addi	r6,r16,-8
 40010e4:	3884703a 	and	r2,r7,r2
 40010e8:	211ee704 	addi	r4,r4,31644
 40010ec:	308b883a 	add	r5,r6,r2
 40010f0:	2a400117 	ldw	r9,4(r5)
 40010f4:	22000217 	ldw	r8,8(r4)
 40010f8:	00ffff04 	movi	r3,-4
 40010fc:	48c6703a 	and	r3,r9,r3
 4001100:	2a005726 	beq	r5,r8,4001260 <_free_r+0x1ac>
 4001104:	28c00115 	stw	r3,4(r5)
 4001108:	39c0004c 	andi	r7,r7,1
 400110c:	3800091e 	bne	r7,zero,4001134 <_free_r+0x80>
 4001110:	823ffe17 	ldw	r8,-8(r16)
 4001114:	22400204 	addi	r9,r4,8
 4001118:	320dc83a 	sub	r6,r6,r8
 400111c:	31c00217 	ldw	r7,8(r6)
 4001120:	1205883a 	add	r2,r2,r8
 4001124:	3a406526 	beq	r7,r9,40012bc <_free_r+0x208>
 4001128:	32000317 	ldw	r8,12(r6)
 400112c:	3a000315 	stw	r8,12(r7)
 4001130:	41c00215 	stw	r7,8(r8)
 4001134:	28cf883a 	add	r7,r5,r3
 4001138:	39c00117 	ldw	r7,4(r7)
 400113c:	39c0004c 	andi	r7,r7,1
 4001140:	38003a26 	beq	r7,zero,400122c <_free_r+0x178>
 4001144:	10c00054 	ori	r3,r2,1
 4001148:	30c00115 	stw	r3,4(r6)
 400114c:	3087883a 	add	r3,r6,r2
 4001150:	18800015 	stw	r2,0(r3)
 4001154:	00c07fc4 	movi	r3,511
 4001158:	18801936 	bltu	r3,r2,40011c0 <_free_r+0x10c>
 400115c:	1004d0fa 	srli	r2,r2,3
 4001160:	01c00044 	movi	r7,1
 4001164:	21400117 	ldw	r5,4(r4)
 4001168:	10c00044 	addi	r3,r2,1
 400116c:	18c7883a 	add	r3,r3,r3
 4001170:	1005d0ba 	srai	r2,r2,2
 4001174:	18c7883a 	add	r3,r3,r3
 4001178:	18c7883a 	add	r3,r3,r3
 400117c:	1907883a 	add	r3,r3,r4
 4001180:	3884983a 	sll	r2,r7,r2
 4001184:	19c00017 	ldw	r7,0(r3)
 4001188:	1a3ffe04 	addi	r8,r3,-8
 400118c:	1144b03a 	or	r2,r2,r5
 4001190:	32000315 	stw	r8,12(r6)
 4001194:	31c00215 	stw	r7,8(r6)
 4001198:	20800115 	stw	r2,4(r4)
 400119c:	19800015 	stw	r6,0(r3)
 40011a0:	39800315 	stw	r6,12(r7)
 40011a4:	8809883a 	mov	r4,r17
 40011a8:	dfc00217 	ldw	ra,8(sp)
 40011ac:	dc400117 	ldw	r17,4(sp)
 40011b0:	dc000017 	ldw	r16,0(sp)
 40011b4:	dec00304 	addi	sp,sp,12
 40011b8:	4002adc1 	jmpi	4002adc <__malloc_unlock>
 40011bc:	f800283a 	ret
 40011c0:	100ad27a 	srli	r5,r2,9
 40011c4:	00c00104 	movi	r3,4
 40011c8:	19404a36 	bltu	r3,r5,40012f4 <_free_r+0x240>
 40011cc:	100ad1ba 	srli	r5,r2,6
 40011d0:	28c00e44 	addi	r3,r5,57
 40011d4:	18c7883a 	add	r3,r3,r3
 40011d8:	29400e04 	addi	r5,r5,56
 40011dc:	18c7883a 	add	r3,r3,r3
 40011e0:	18c7883a 	add	r3,r3,r3
 40011e4:	1909883a 	add	r4,r3,r4
 40011e8:	20c00017 	ldw	r3,0(r4)
 40011ec:	01c10034 	movhi	r7,1024
 40011f0:	213ffe04 	addi	r4,r4,-8
 40011f4:	39dee704 	addi	r7,r7,31644
 40011f8:	20c04426 	beq	r4,r3,400130c <_free_r+0x258>
 40011fc:	01ffff04 	movi	r7,-4
 4001200:	19400117 	ldw	r5,4(r3)
 4001204:	29ca703a 	and	r5,r5,r7
 4001208:	1140022e 	bgeu	r2,r5,4001214 <_free_r+0x160>
 400120c:	18c00217 	ldw	r3,8(r3)
 4001210:	20fffb1e 	bne	r4,r3,4001200 <__alt_data_end+0xfc001200>
 4001214:	19000317 	ldw	r4,12(r3)
 4001218:	31000315 	stw	r4,12(r6)
 400121c:	30c00215 	stw	r3,8(r6)
 4001220:	21800215 	stw	r6,8(r4)
 4001224:	19800315 	stw	r6,12(r3)
 4001228:	003fde06 	br	40011a4 <__alt_data_end+0xfc0011a4>
 400122c:	29c00217 	ldw	r7,8(r5)
 4001230:	10c5883a 	add	r2,r2,r3
 4001234:	00c10034 	movhi	r3,1024
 4001238:	18dee904 	addi	r3,r3,31652
 400123c:	38c03b26 	beq	r7,r3,400132c <_free_r+0x278>
 4001240:	2a000317 	ldw	r8,12(r5)
 4001244:	11400054 	ori	r5,r2,1
 4001248:	3087883a 	add	r3,r6,r2
 400124c:	3a000315 	stw	r8,12(r7)
 4001250:	41c00215 	stw	r7,8(r8)
 4001254:	31400115 	stw	r5,4(r6)
 4001258:	18800015 	stw	r2,0(r3)
 400125c:	003fbd06 	br	4001154 <__alt_data_end+0xfc001154>
 4001260:	39c0004c 	andi	r7,r7,1
 4001264:	10c5883a 	add	r2,r2,r3
 4001268:	3800071e 	bne	r7,zero,4001288 <_free_r+0x1d4>
 400126c:	81fffe17 	ldw	r7,-8(r16)
 4001270:	31cdc83a 	sub	r6,r6,r7
 4001274:	30c00317 	ldw	r3,12(r6)
 4001278:	31400217 	ldw	r5,8(r6)
 400127c:	11c5883a 	add	r2,r2,r7
 4001280:	28c00315 	stw	r3,12(r5)
 4001284:	19400215 	stw	r5,8(r3)
 4001288:	10c00054 	ori	r3,r2,1
 400128c:	30c00115 	stw	r3,4(r6)
 4001290:	00c10074 	movhi	r3,1025
 4001294:	18e4ad04 	addi	r3,r3,-27980
 4001298:	18c00017 	ldw	r3,0(r3)
 400129c:	21800215 	stw	r6,8(r4)
 40012a0:	10ffc036 	bltu	r2,r3,40011a4 <__alt_data_end+0xfc0011a4>
 40012a4:	00810074 	movhi	r2,1025
 40012a8:	10ab9804 	addi	r2,r2,-20896
 40012ac:	11400017 	ldw	r5,0(r2)
 40012b0:	8809883a 	mov	r4,r17
 40012b4:	4000f900 	call	4000f90 <_malloc_trim_r>
 40012b8:	003fba06 	br	40011a4 <__alt_data_end+0xfc0011a4>
 40012bc:	28c9883a 	add	r4,r5,r3
 40012c0:	21000117 	ldw	r4,4(r4)
 40012c4:	2100004c 	andi	r4,r4,1
 40012c8:	2000391e 	bne	r4,zero,40013b0 <_free_r+0x2fc>
 40012cc:	29c00217 	ldw	r7,8(r5)
 40012d0:	29000317 	ldw	r4,12(r5)
 40012d4:	1885883a 	add	r2,r3,r2
 40012d8:	10c00054 	ori	r3,r2,1
 40012dc:	39000315 	stw	r4,12(r7)
 40012e0:	21c00215 	stw	r7,8(r4)
 40012e4:	30c00115 	stw	r3,4(r6)
 40012e8:	308d883a 	add	r6,r6,r2
 40012ec:	30800015 	stw	r2,0(r6)
 40012f0:	003fac06 	br	40011a4 <__alt_data_end+0xfc0011a4>
 40012f4:	00c00504 	movi	r3,20
 40012f8:	19401536 	bltu	r3,r5,4001350 <_free_r+0x29c>
 40012fc:	28c01704 	addi	r3,r5,92
 4001300:	18c7883a 	add	r3,r3,r3
 4001304:	294016c4 	addi	r5,r5,91
 4001308:	003fb406 	br	40011dc <__alt_data_end+0xfc0011dc>
 400130c:	280bd0ba 	srai	r5,r5,2
 4001310:	00c00044 	movi	r3,1
 4001314:	38800117 	ldw	r2,4(r7)
 4001318:	194a983a 	sll	r5,r3,r5
 400131c:	2007883a 	mov	r3,r4
 4001320:	2884b03a 	or	r2,r5,r2
 4001324:	38800115 	stw	r2,4(r7)
 4001328:	003fbb06 	br	4001218 <__alt_data_end+0xfc001218>
 400132c:	21800515 	stw	r6,20(r4)
 4001330:	21800415 	stw	r6,16(r4)
 4001334:	10c00054 	ori	r3,r2,1
 4001338:	31c00315 	stw	r7,12(r6)
 400133c:	31c00215 	stw	r7,8(r6)
 4001340:	30c00115 	stw	r3,4(r6)
 4001344:	308d883a 	add	r6,r6,r2
 4001348:	30800015 	stw	r2,0(r6)
 400134c:	003f9506 	br	40011a4 <__alt_data_end+0xfc0011a4>
 4001350:	00c01504 	movi	r3,84
 4001354:	19400536 	bltu	r3,r5,400136c <_free_r+0x2b8>
 4001358:	100ad33a 	srli	r5,r2,12
 400135c:	28c01bc4 	addi	r3,r5,111
 4001360:	18c7883a 	add	r3,r3,r3
 4001364:	29401b84 	addi	r5,r5,110
 4001368:	003f9c06 	br	40011dc <__alt_data_end+0xfc0011dc>
 400136c:	00c05504 	movi	r3,340
 4001370:	19400536 	bltu	r3,r5,4001388 <_free_r+0x2d4>
 4001374:	100ad3fa 	srli	r5,r2,15
 4001378:	28c01e04 	addi	r3,r5,120
 400137c:	18c7883a 	add	r3,r3,r3
 4001380:	29401dc4 	addi	r5,r5,119
 4001384:	003f9506 	br	40011dc <__alt_data_end+0xfc0011dc>
 4001388:	00c15504 	movi	r3,1364
 400138c:	19400536 	bltu	r3,r5,40013a4 <_free_r+0x2f0>
 4001390:	100ad4ba 	srli	r5,r2,18
 4001394:	28c01f44 	addi	r3,r5,125
 4001398:	18c7883a 	add	r3,r3,r3
 400139c:	29401f04 	addi	r5,r5,124
 40013a0:	003f8e06 	br	40011dc <__alt_data_end+0xfc0011dc>
 40013a4:	00c03f84 	movi	r3,254
 40013a8:	01401f84 	movi	r5,126
 40013ac:	003f8b06 	br	40011dc <__alt_data_end+0xfc0011dc>
 40013b0:	10c00054 	ori	r3,r2,1
 40013b4:	30c00115 	stw	r3,4(r6)
 40013b8:	308d883a 	add	r6,r6,r2
 40013bc:	30800015 	stw	r2,0(r6)
 40013c0:	003f7806 	br	40011a4 <__alt_data_end+0xfc0011a4>

040013c4 <_fwalk>:
 40013c4:	defff704 	addi	sp,sp,-36
 40013c8:	dd000415 	stw	r20,16(sp)
 40013cc:	dfc00815 	stw	ra,32(sp)
 40013d0:	ddc00715 	stw	r23,28(sp)
 40013d4:	dd800615 	stw	r22,24(sp)
 40013d8:	dd400515 	stw	r21,20(sp)
 40013dc:	dcc00315 	stw	r19,12(sp)
 40013e0:	dc800215 	stw	r18,8(sp)
 40013e4:	dc400115 	stw	r17,4(sp)
 40013e8:	dc000015 	stw	r16,0(sp)
 40013ec:	2500b804 	addi	r20,r4,736
 40013f0:	a0002326 	beq	r20,zero,4001480 <_fwalk+0xbc>
 40013f4:	282b883a 	mov	r21,r5
 40013f8:	002f883a 	mov	r23,zero
 40013fc:	05800044 	movi	r22,1
 4001400:	04ffffc4 	movi	r19,-1
 4001404:	a4400117 	ldw	r17,4(r20)
 4001408:	a4800217 	ldw	r18,8(r20)
 400140c:	8c7fffc4 	addi	r17,r17,-1
 4001410:	88000d16 	blt	r17,zero,4001448 <_fwalk+0x84>
 4001414:	94000304 	addi	r16,r18,12
 4001418:	94800384 	addi	r18,r18,14
 400141c:	8080000b 	ldhu	r2,0(r16)
 4001420:	8c7fffc4 	addi	r17,r17,-1
 4001424:	813ffd04 	addi	r4,r16,-12
 4001428:	b080042e 	bgeu	r22,r2,400143c <_fwalk+0x78>
 400142c:	9080000f 	ldh	r2,0(r18)
 4001430:	14c00226 	beq	r2,r19,400143c <_fwalk+0x78>
 4001434:	a83ee83a 	callr	r21
 4001438:	b8aeb03a 	or	r23,r23,r2
 400143c:	84001a04 	addi	r16,r16,104
 4001440:	94801a04 	addi	r18,r18,104
 4001444:	8cfff51e 	bne	r17,r19,400141c <__alt_data_end+0xfc00141c>
 4001448:	a5000017 	ldw	r20,0(r20)
 400144c:	a03fed1e 	bne	r20,zero,4001404 <__alt_data_end+0xfc001404>
 4001450:	b805883a 	mov	r2,r23
 4001454:	dfc00817 	ldw	ra,32(sp)
 4001458:	ddc00717 	ldw	r23,28(sp)
 400145c:	dd800617 	ldw	r22,24(sp)
 4001460:	dd400517 	ldw	r21,20(sp)
 4001464:	dd000417 	ldw	r20,16(sp)
 4001468:	dcc00317 	ldw	r19,12(sp)
 400146c:	dc800217 	ldw	r18,8(sp)
 4001470:	dc400117 	ldw	r17,4(sp)
 4001474:	dc000017 	ldw	r16,0(sp)
 4001478:	dec00904 	addi	sp,sp,36
 400147c:	f800283a 	ret
 4001480:	002f883a 	mov	r23,zero
 4001484:	003ff206 	br	4001450 <__alt_data_end+0xfc001450>

04001488 <_fwalk_reent>:
 4001488:	defff704 	addi	sp,sp,-36
 400148c:	dd000415 	stw	r20,16(sp)
 4001490:	dfc00815 	stw	ra,32(sp)
 4001494:	ddc00715 	stw	r23,28(sp)
 4001498:	dd800615 	stw	r22,24(sp)
 400149c:	dd400515 	stw	r21,20(sp)
 40014a0:	dcc00315 	stw	r19,12(sp)
 40014a4:	dc800215 	stw	r18,8(sp)
 40014a8:	dc400115 	stw	r17,4(sp)
 40014ac:	dc000015 	stw	r16,0(sp)
 40014b0:	2500b804 	addi	r20,r4,736
 40014b4:	a0002326 	beq	r20,zero,4001544 <_fwalk_reent+0xbc>
 40014b8:	282b883a 	mov	r21,r5
 40014bc:	2027883a 	mov	r19,r4
 40014c0:	002f883a 	mov	r23,zero
 40014c4:	05800044 	movi	r22,1
 40014c8:	04bfffc4 	movi	r18,-1
 40014cc:	a4400117 	ldw	r17,4(r20)
 40014d0:	a4000217 	ldw	r16,8(r20)
 40014d4:	8c7fffc4 	addi	r17,r17,-1
 40014d8:	88000c16 	blt	r17,zero,400150c <_fwalk_reent+0x84>
 40014dc:	84000304 	addi	r16,r16,12
 40014e0:	8080000b 	ldhu	r2,0(r16)
 40014e4:	8c7fffc4 	addi	r17,r17,-1
 40014e8:	817ffd04 	addi	r5,r16,-12
 40014ec:	b080052e 	bgeu	r22,r2,4001504 <_fwalk_reent+0x7c>
 40014f0:	8080008f 	ldh	r2,2(r16)
 40014f4:	9809883a 	mov	r4,r19
 40014f8:	14800226 	beq	r2,r18,4001504 <_fwalk_reent+0x7c>
 40014fc:	a83ee83a 	callr	r21
 4001500:	b8aeb03a 	or	r23,r23,r2
 4001504:	84001a04 	addi	r16,r16,104
 4001508:	8cbff51e 	bne	r17,r18,40014e0 <__alt_data_end+0xfc0014e0>
 400150c:	a5000017 	ldw	r20,0(r20)
 4001510:	a03fee1e 	bne	r20,zero,40014cc <__alt_data_end+0xfc0014cc>
 4001514:	b805883a 	mov	r2,r23
 4001518:	dfc00817 	ldw	ra,32(sp)
 400151c:	ddc00717 	ldw	r23,28(sp)
 4001520:	dd800617 	ldw	r22,24(sp)
 4001524:	dd400517 	ldw	r21,20(sp)
 4001528:	dd000417 	ldw	r20,16(sp)
 400152c:	dcc00317 	ldw	r19,12(sp)
 4001530:	dc800217 	ldw	r18,8(sp)
 4001534:	dc400117 	ldw	r17,4(sp)
 4001538:	dc000017 	ldw	r16,0(sp)
 400153c:	dec00904 	addi	sp,sp,36
 4001540:	f800283a 	ret
 4001544:	002f883a 	mov	r23,zero
 4001548:	003ff206 	br	4001514 <__alt_data_end+0xfc001514>

0400154c <__smakebuf_r>:
 400154c:	2880030b 	ldhu	r2,12(r5)
 4001550:	10c0008c 	andi	r3,r2,2
 4001554:	1800411e 	bne	r3,zero,400165c <__smakebuf_r+0x110>
 4001558:	deffec04 	addi	sp,sp,-80
 400155c:	dc000f15 	stw	r16,60(sp)
 4001560:	2821883a 	mov	r16,r5
 4001564:	2940038f 	ldh	r5,14(r5)
 4001568:	dc401015 	stw	r17,64(sp)
 400156c:	dfc01315 	stw	ra,76(sp)
 4001570:	dcc01215 	stw	r19,72(sp)
 4001574:	dc801115 	stw	r18,68(sp)
 4001578:	2023883a 	mov	r17,r4
 400157c:	28001c16 	blt	r5,zero,40015f0 <__smakebuf_r+0xa4>
 4001580:	d80d883a 	mov	r6,sp
 4001584:	40023840 	call	4002384 <_fstat_r>
 4001588:	10001816 	blt	r2,zero,40015ec <__smakebuf_r+0xa0>
 400158c:	d8800117 	ldw	r2,4(sp)
 4001590:	00e00014 	movui	r3,32768
 4001594:	10bc000c 	andi	r2,r2,61440
 4001598:	14c80020 	cmpeqi	r19,r2,8192
 400159c:	10c03726 	beq	r2,r3,400167c <__smakebuf_r+0x130>
 40015a0:	80c0030b 	ldhu	r3,12(r16)
 40015a4:	18c20014 	ori	r3,r3,2048
 40015a8:	80c0030d 	sth	r3,12(r16)
 40015ac:	00c80004 	movi	r3,8192
 40015b0:	10c0521e 	bne	r2,r3,40016fc <__smakebuf_r+0x1b0>
 40015b4:	8140038f 	ldh	r5,14(r16)
 40015b8:	8809883a 	mov	r4,r17
 40015bc:	40023e00 	call	40023e0 <_isatty_r>
 40015c0:	10004c26 	beq	r2,zero,40016f4 <__smakebuf_r+0x1a8>
 40015c4:	8080030b 	ldhu	r2,12(r16)
 40015c8:	80c010c4 	addi	r3,r16,67
 40015cc:	80c00015 	stw	r3,0(r16)
 40015d0:	10800054 	ori	r2,r2,1
 40015d4:	8080030d 	sth	r2,12(r16)
 40015d8:	00800044 	movi	r2,1
 40015dc:	80c00415 	stw	r3,16(r16)
 40015e0:	80800515 	stw	r2,20(r16)
 40015e4:	04810004 	movi	r18,1024
 40015e8:	00000706 	br	4001608 <__smakebuf_r+0xbc>
 40015ec:	8080030b 	ldhu	r2,12(r16)
 40015f0:	10c0200c 	andi	r3,r2,128
 40015f4:	18001f1e 	bne	r3,zero,4001674 <__smakebuf_r+0x128>
 40015f8:	04810004 	movi	r18,1024
 40015fc:	10820014 	ori	r2,r2,2048
 4001600:	8080030d 	sth	r2,12(r16)
 4001604:	0027883a 	mov	r19,zero
 4001608:	900b883a 	mov	r5,r18
 400160c:	8809883a 	mov	r4,r17
 4001610:	40017080 	call	4001708 <_malloc_r>
 4001614:	10002c26 	beq	r2,zero,40016c8 <__smakebuf_r+0x17c>
 4001618:	80c0030b 	ldhu	r3,12(r16)
 400161c:	01010034 	movhi	r4,1024
 4001620:	2102fa04 	addi	r4,r4,3048
 4001624:	89000f15 	stw	r4,60(r17)
 4001628:	18c02014 	ori	r3,r3,128
 400162c:	80c0030d 	sth	r3,12(r16)
 4001630:	80800015 	stw	r2,0(r16)
 4001634:	80800415 	stw	r2,16(r16)
 4001638:	84800515 	stw	r18,20(r16)
 400163c:	98001a1e 	bne	r19,zero,40016a8 <__smakebuf_r+0x15c>
 4001640:	dfc01317 	ldw	ra,76(sp)
 4001644:	dcc01217 	ldw	r19,72(sp)
 4001648:	dc801117 	ldw	r18,68(sp)
 400164c:	dc401017 	ldw	r17,64(sp)
 4001650:	dc000f17 	ldw	r16,60(sp)
 4001654:	dec01404 	addi	sp,sp,80
 4001658:	f800283a 	ret
 400165c:	288010c4 	addi	r2,r5,67
 4001660:	28800015 	stw	r2,0(r5)
 4001664:	28800415 	stw	r2,16(r5)
 4001668:	00800044 	movi	r2,1
 400166c:	28800515 	stw	r2,20(r5)
 4001670:	f800283a 	ret
 4001674:	04801004 	movi	r18,64
 4001678:	003fe006 	br	40015fc <__alt_data_end+0xfc0015fc>
 400167c:	81000a17 	ldw	r4,40(r16)
 4001680:	00c10034 	movhi	r3,1024
 4001684:	18c85a04 	addi	r3,r3,8552
 4001688:	20ffc51e 	bne	r4,r3,40015a0 <__alt_data_end+0xfc0015a0>
 400168c:	8080030b 	ldhu	r2,12(r16)
 4001690:	04810004 	movi	r18,1024
 4001694:	84801315 	stw	r18,76(r16)
 4001698:	1484b03a 	or	r2,r2,r18
 400169c:	8080030d 	sth	r2,12(r16)
 40016a0:	0027883a 	mov	r19,zero
 40016a4:	003fd806 	br	4001608 <__alt_data_end+0xfc001608>
 40016a8:	8140038f 	ldh	r5,14(r16)
 40016ac:	8809883a 	mov	r4,r17
 40016b0:	40023e00 	call	40023e0 <_isatty_r>
 40016b4:	103fe226 	beq	r2,zero,4001640 <__alt_data_end+0xfc001640>
 40016b8:	8080030b 	ldhu	r2,12(r16)
 40016bc:	10800054 	ori	r2,r2,1
 40016c0:	8080030d 	sth	r2,12(r16)
 40016c4:	003fde06 	br	4001640 <__alt_data_end+0xfc001640>
 40016c8:	8080030b 	ldhu	r2,12(r16)
 40016cc:	10c0800c 	andi	r3,r2,512
 40016d0:	183fdb1e 	bne	r3,zero,4001640 <__alt_data_end+0xfc001640>
 40016d4:	10800094 	ori	r2,r2,2
 40016d8:	80c010c4 	addi	r3,r16,67
 40016dc:	8080030d 	sth	r2,12(r16)
 40016e0:	00800044 	movi	r2,1
 40016e4:	80c00015 	stw	r3,0(r16)
 40016e8:	80c00415 	stw	r3,16(r16)
 40016ec:	80800515 	stw	r2,20(r16)
 40016f0:	003fd306 	br	4001640 <__alt_data_end+0xfc001640>
 40016f4:	04810004 	movi	r18,1024
 40016f8:	003fc306 	br	4001608 <__alt_data_end+0xfc001608>
 40016fc:	0027883a 	mov	r19,zero
 4001700:	04810004 	movi	r18,1024
 4001704:	003fc006 	br	4001608 <__alt_data_end+0xfc001608>

04001708 <_malloc_r>:
 4001708:	defff504 	addi	sp,sp,-44
 400170c:	dc800315 	stw	r18,12(sp)
 4001710:	dfc00a15 	stw	ra,40(sp)
 4001714:	df000915 	stw	fp,36(sp)
 4001718:	ddc00815 	stw	r23,32(sp)
 400171c:	dd800715 	stw	r22,28(sp)
 4001720:	dd400615 	stw	r21,24(sp)
 4001724:	dd000515 	stw	r20,20(sp)
 4001728:	dcc00415 	stw	r19,16(sp)
 400172c:	dc400215 	stw	r17,8(sp)
 4001730:	dc000115 	stw	r16,4(sp)
 4001734:	288002c4 	addi	r2,r5,11
 4001738:	00c00584 	movi	r3,22
 400173c:	2025883a 	mov	r18,r4
 4001740:	18807f2e 	bgeu	r3,r2,4001940 <_malloc_r+0x238>
 4001744:	047ffe04 	movi	r17,-8
 4001748:	1462703a 	and	r17,r2,r17
 400174c:	8800a316 	blt	r17,zero,40019dc <_malloc_r+0x2d4>
 4001750:	8940a236 	bltu	r17,r5,40019dc <_malloc_r+0x2d4>
 4001754:	4002ab80 	call	4002ab8 <__malloc_lock>
 4001758:	00807dc4 	movi	r2,503
 400175c:	1441e92e 	bgeu	r2,r17,4001f04 <_malloc_r+0x7fc>
 4001760:	8804d27a 	srli	r2,r17,9
 4001764:	1000a126 	beq	r2,zero,40019ec <_malloc_r+0x2e4>
 4001768:	00c00104 	movi	r3,4
 400176c:	18811e36 	bltu	r3,r2,4001be8 <_malloc_r+0x4e0>
 4001770:	8804d1ba 	srli	r2,r17,6
 4001774:	12000e44 	addi	r8,r2,57
 4001778:	11c00e04 	addi	r7,r2,56
 400177c:	4209883a 	add	r4,r8,r8
 4001780:	04c10034 	movhi	r19,1024
 4001784:	2109883a 	add	r4,r4,r4
 4001788:	9cdee704 	addi	r19,r19,31644
 400178c:	2109883a 	add	r4,r4,r4
 4001790:	9909883a 	add	r4,r19,r4
 4001794:	24000117 	ldw	r16,4(r4)
 4001798:	213ffe04 	addi	r4,r4,-8
 400179c:	24009726 	beq	r4,r16,40019fc <_malloc_r+0x2f4>
 40017a0:	80800117 	ldw	r2,4(r16)
 40017a4:	01bfff04 	movi	r6,-4
 40017a8:	014003c4 	movi	r5,15
 40017ac:	1184703a 	and	r2,r2,r6
 40017b0:	1447c83a 	sub	r3,r2,r17
 40017b4:	28c00716 	blt	r5,r3,40017d4 <_malloc_r+0xcc>
 40017b8:	1800920e 	bge	r3,zero,4001a04 <_malloc_r+0x2fc>
 40017bc:	84000317 	ldw	r16,12(r16)
 40017c0:	24008e26 	beq	r4,r16,40019fc <_malloc_r+0x2f4>
 40017c4:	80800117 	ldw	r2,4(r16)
 40017c8:	1184703a 	and	r2,r2,r6
 40017cc:	1447c83a 	sub	r3,r2,r17
 40017d0:	28fff90e 	bge	r5,r3,40017b8 <__alt_data_end+0xfc0017b8>
 40017d4:	3809883a 	mov	r4,r7
 40017d8:	01810034 	movhi	r6,1024
 40017dc:	9c000417 	ldw	r16,16(r19)
 40017e0:	319ee704 	addi	r6,r6,31644
 40017e4:	32000204 	addi	r8,r6,8
 40017e8:	82013426 	beq	r16,r8,4001cbc <_malloc_r+0x5b4>
 40017ec:	80c00117 	ldw	r3,4(r16)
 40017f0:	00bfff04 	movi	r2,-4
 40017f4:	188e703a 	and	r7,r3,r2
 40017f8:	3c45c83a 	sub	r2,r7,r17
 40017fc:	00c003c4 	movi	r3,15
 4001800:	18811f16 	blt	r3,r2,4001c80 <_malloc_r+0x578>
 4001804:	32000515 	stw	r8,20(r6)
 4001808:	32000415 	stw	r8,16(r6)
 400180c:	10007f0e 	bge	r2,zero,4001a0c <_malloc_r+0x304>
 4001810:	00807fc4 	movi	r2,511
 4001814:	11c0fd36 	bltu	r2,r7,4001c0c <_malloc_r+0x504>
 4001818:	3806d0fa 	srli	r3,r7,3
 400181c:	01c00044 	movi	r7,1
 4001820:	30800117 	ldw	r2,4(r6)
 4001824:	19400044 	addi	r5,r3,1
 4001828:	294b883a 	add	r5,r5,r5
 400182c:	1807d0ba 	srai	r3,r3,2
 4001830:	294b883a 	add	r5,r5,r5
 4001834:	294b883a 	add	r5,r5,r5
 4001838:	298b883a 	add	r5,r5,r6
 400183c:	38c6983a 	sll	r3,r7,r3
 4001840:	29c00017 	ldw	r7,0(r5)
 4001844:	2a7ffe04 	addi	r9,r5,-8
 4001848:	1886b03a 	or	r3,r3,r2
 400184c:	82400315 	stw	r9,12(r16)
 4001850:	81c00215 	stw	r7,8(r16)
 4001854:	30c00115 	stw	r3,4(r6)
 4001858:	2c000015 	stw	r16,0(r5)
 400185c:	3c000315 	stw	r16,12(r7)
 4001860:	2005d0ba 	srai	r2,r4,2
 4001864:	01400044 	movi	r5,1
 4001868:	288a983a 	sll	r5,r5,r2
 400186c:	19406f36 	bltu	r3,r5,4001a2c <_malloc_r+0x324>
 4001870:	28c4703a 	and	r2,r5,r3
 4001874:	10000a1e 	bne	r2,zero,40018a0 <_malloc_r+0x198>
 4001878:	00bfff04 	movi	r2,-4
 400187c:	294b883a 	add	r5,r5,r5
 4001880:	2088703a 	and	r4,r4,r2
 4001884:	28c4703a 	and	r2,r5,r3
 4001888:	21000104 	addi	r4,r4,4
 400188c:	1000041e 	bne	r2,zero,40018a0 <_malloc_r+0x198>
 4001890:	294b883a 	add	r5,r5,r5
 4001894:	28c4703a 	and	r2,r5,r3
 4001898:	21000104 	addi	r4,r4,4
 400189c:	103ffc26 	beq	r2,zero,4001890 <__alt_data_end+0xfc001890>
 40018a0:	02bfff04 	movi	r10,-4
 40018a4:	024003c4 	movi	r9,15
 40018a8:	21800044 	addi	r6,r4,1
 40018ac:	318d883a 	add	r6,r6,r6
 40018b0:	318d883a 	add	r6,r6,r6
 40018b4:	318d883a 	add	r6,r6,r6
 40018b8:	998d883a 	add	r6,r19,r6
 40018bc:	333ffe04 	addi	r12,r6,-8
 40018c0:	2017883a 	mov	r11,r4
 40018c4:	31800104 	addi	r6,r6,4
 40018c8:	34000017 	ldw	r16,0(r6)
 40018cc:	31fffd04 	addi	r7,r6,-12
 40018d0:	81c0041e 	bne	r16,r7,40018e4 <_malloc_r+0x1dc>
 40018d4:	0000fb06 	br	4001cc4 <_malloc_r+0x5bc>
 40018d8:	1801030e 	bge	r3,zero,4001ce8 <_malloc_r+0x5e0>
 40018dc:	84000317 	ldw	r16,12(r16)
 40018e0:	81c0f826 	beq	r16,r7,4001cc4 <_malloc_r+0x5bc>
 40018e4:	80800117 	ldw	r2,4(r16)
 40018e8:	1284703a 	and	r2,r2,r10
 40018ec:	1447c83a 	sub	r3,r2,r17
 40018f0:	48fff90e 	bge	r9,r3,40018d8 <__alt_data_end+0xfc0018d8>
 40018f4:	80800317 	ldw	r2,12(r16)
 40018f8:	81000217 	ldw	r4,8(r16)
 40018fc:	89400054 	ori	r5,r17,1
 4001900:	81400115 	stw	r5,4(r16)
 4001904:	20800315 	stw	r2,12(r4)
 4001908:	11000215 	stw	r4,8(r2)
 400190c:	8463883a 	add	r17,r16,r17
 4001910:	9c400515 	stw	r17,20(r19)
 4001914:	9c400415 	stw	r17,16(r19)
 4001918:	18800054 	ori	r2,r3,1
 400191c:	88800115 	stw	r2,4(r17)
 4001920:	8a000315 	stw	r8,12(r17)
 4001924:	8a000215 	stw	r8,8(r17)
 4001928:	88e3883a 	add	r17,r17,r3
 400192c:	88c00015 	stw	r3,0(r17)
 4001930:	9009883a 	mov	r4,r18
 4001934:	4002adc0 	call	4002adc <__malloc_unlock>
 4001938:	80800204 	addi	r2,r16,8
 400193c:	00001b06 	br	40019ac <_malloc_r+0x2a4>
 4001940:	04400404 	movi	r17,16
 4001944:	89402536 	bltu	r17,r5,40019dc <_malloc_r+0x2d4>
 4001948:	4002ab80 	call	4002ab8 <__malloc_lock>
 400194c:	00800184 	movi	r2,6
 4001950:	01000084 	movi	r4,2
 4001954:	04c10034 	movhi	r19,1024
 4001958:	1085883a 	add	r2,r2,r2
 400195c:	9cdee704 	addi	r19,r19,31644
 4001960:	1085883a 	add	r2,r2,r2
 4001964:	9885883a 	add	r2,r19,r2
 4001968:	14000117 	ldw	r16,4(r2)
 400196c:	10fffe04 	addi	r3,r2,-8
 4001970:	80c0d926 	beq	r16,r3,4001cd8 <_malloc_r+0x5d0>
 4001974:	80c00117 	ldw	r3,4(r16)
 4001978:	81000317 	ldw	r4,12(r16)
 400197c:	00bfff04 	movi	r2,-4
 4001980:	1884703a 	and	r2,r3,r2
 4001984:	81400217 	ldw	r5,8(r16)
 4001988:	8085883a 	add	r2,r16,r2
 400198c:	10c00117 	ldw	r3,4(r2)
 4001990:	29000315 	stw	r4,12(r5)
 4001994:	21400215 	stw	r5,8(r4)
 4001998:	18c00054 	ori	r3,r3,1
 400199c:	10c00115 	stw	r3,4(r2)
 40019a0:	9009883a 	mov	r4,r18
 40019a4:	4002adc0 	call	4002adc <__malloc_unlock>
 40019a8:	80800204 	addi	r2,r16,8
 40019ac:	dfc00a17 	ldw	ra,40(sp)
 40019b0:	df000917 	ldw	fp,36(sp)
 40019b4:	ddc00817 	ldw	r23,32(sp)
 40019b8:	dd800717 	ldw	r22,28(sp)
 40019bc:	dd400617 	ldw	r21,24(sp)
 40019c0:	dd000517 	ldw	r20,20(sp)
 40019c4:	dcc00417 	ldw	r19,16(sp)
 40019c8:	dc800317 	ldw	r18,12(sp)
 40019cc:	dc400217 	ldw	r17,8(sp)
 40019d0:	dc000117 	ldw	r16,4(sp)
 40019d4:	dec00b04 	addi	sp,sp,44
 40019d8:	f800283a 	ret
 40019dc:	00800304 	movi	r2,12
 40019e0:	90800015 	stw	r2,0(r18)
 40019e4:	0005883a 	mov	r2,zero
 40019e8:	003ff006 	br	40019ac <__alt_data_end+0xfc0019ac>
 40019ec:	01002004 	movi	r4,128
 40019f0:	02001004 	movi	r8,64
 40019f4:	01c00fc4 	movi	r7,63
 40019f8:	003f6106 	br	4001780 <__alt_data_end+0xfc001780>
 40019fc:	4009883a 	mov	r4,r8
 4001a00:	003f7506 	br	40017d8 <__alt_data_end+0xfc0017d8>
 4001a04:	81000317 	ldw	r4,12(r16)
 4001a08:	003fde06 	br	4001984 <__alt_data_end+0xfc001984>
 4001a0c:	81c5883a 	add	r2,r16,r7
 4001a10:	11400117 	ldw	r5,4(r2)
 4001a14:	9009883a 	mov	r4,r18
 4001a18:	29400054 	ori	r5,r5,1
 4001a1c:	11400115 	stw	r5,4(r2)
 4001a20:	4002adc0 	call	4002adc <__malloc_unlock>
 4001a24:	80800204 	addi	r2,r16,8
 4001a28:	003fe006 	br	40019ac <__alt_data_end+0xfc0019ac>
 4001a2c:	9c000217 	ldw	r16,8(r19)
 4001a30:	00bfff04 	movi	r2,-4
 4001a34:	85800117 	ldw	r22,4(r16)
 4001a38:	b0ac703a 	and	r22,r22,r2
 4001a3c:	b4400336 	bltu	r22,r17,4001a4c <_malloc_r+0x344>
 4001a40:	b445c83a 	sub	r2,r22,r17
 4001a44:	00c003c4 	movi	r3,15
 4001a48:	18805d16 	blt	r3,r2,4001bc0 <_malloc_r+0x4b8>
 4001a4c:	05c10074 	movhi	r23,1025
 4001a50:	00810074 	movhi	r2,1025
 4001a54:	10ab9804 	addi	r2,r2,-20896
 4001a58:	bde4ac04 	addi	r23,r23,-27984
 4001a5c:	15400017 	ldw	r21,0(r2)
 4001a60:	b8c00017 	ldw	r3,0(r23)
 4001a64:	00bfffc4 	movi	r2,-1
 4001a68:	858d883a 	add	r6,r16,r22
 4001a6c:	8d6b883a 	add	r21,r17,r21
 4001a70:	1880ea26 	beq	r3,r2,4001e1c <_malloc_r+0x714>
 4001a74:	ad4403c4 	addi	r21,r21,4111
 4001a78:	00bc0004 	movi	r2,-4096
 4001a7c:	a8aa703a 	and	r21,r21,r2
 4001a80:	a80b883a 	mov	r5,r21
 4001a84:	9009883a 	mov	r4,r18
 4001a88:	d9800015 	stw	r6,0(sp)
 4001a8c:	400203c0 	call	400203c <_sbrk_r>
 4001a90:	1029883a 	mov	r20,r2
 4001a94:	00bfffc4 	movi	r2,-1
 4001a98:	d9800017 	ldw	r6,0(sp)
 4001a9c:	a080e826 	beq	r20,r2,4001e40 <_malloc_r+0x738>
 4001aa0:	a180a636 	bltu	r20,r6,4001d3c <_malloc_r+0x634>
 4001aa4:	07010074 	movhi	fp,1025
 4001aa8:	e72ba204 	addi	fp,fp,-20856
 4001aac:	e0800017 	ldw	r2,0(fp)
 4001ab0:	a887883a 	add	r3,r21,r2
 4001ab4:	e0c00015 	stw	r3,0(fp)
 4001ab8:	3500e626 	beq	r6,r20,4001e54 <_malloc_r+0x74c>
 4001abc:	b9000017 	ldw	r4,0(r23)
 4001ac0:	00bfffc4 	movi	r2,-1
 4001ac4:	2080ee26 	beq	r4,r2,4001e80 <_malloc_r+0x778>
 4001ac8:	a185c83a 	sub	r2,r20,r6
 4001acc:	10c5883a 	add	r2,r2,r3
 4001ad0:	e0800015 	stw	r2,0(fp)
 4001ad4:	a0c001cc 	andi	r3,r20,7
 4001ad8:	1800bc26 	beq	r3,zero,4001dcc <_malloc_r+0x6c4>
 4001adc:	a0e9c83a 	sub	r20,r20,r3
 4001ae0:	00840204 	movi	r2,4104
 4001ae4:	a5000204 	addi	r20,r20,8
 4001ae8:	10c7c83a 	sub	r3,r2,r3
 4001aec:	a545883a 	add	r2,r20,r21
 4001af0:	1083ffcc 	andi	r2,r2,4095
 4001af4:	18abc83a 	sub	r21,r3,r2
 4001af8:	a80b883a 	mov	r5,r21
 4001afc:	9009883a 	mov	r4,r18
 4001b00:	400203c0 	call	400203c <_sbrk_r>
 4001b04:	00ffffc4 	movi	r3,-1
 4001b08:	10c0e126 	beq	r2,r3,4001e90 <_malloc_r+0x788>
 4001b0c:	1505c83a 	sub	r2,r2,r20
 4001b10:	1545883a 	add	r2,r2,r21
 4001b14:	10800054 	ori	r2,r2,1
 4001b18:	e0c00017 	ldw	r3,0(fp)
 4001b1c:	9d000215 	stw	r20,8(r19)
 4001b20:	a0800115 	stw	r2,4(r20)
 4001b24:	a8c7883a 	add	r3,r21,r3
 4001b28:	e0c00015 	stw	r3,0(fp)
 4001b2c:	84c00e26 	beq	r16,r19,4001b68 <_malloc_r+0x460>
 4001b30:	018003c4 	movi	r6,15
 4001b34:	3580a72e 	bgeu	r6,r22,4001dd4 <_malloc_r+0x6cc>
 4001b38:	81400117 	ldw	r5,4(r16)
 4001b3c:	013ffe04 	movi	r4,-8
 4001b40:	b0bffd04 	addi	r2,r22,-12
 4001b44:	1104703a 	and	r2,r2,r4
 4001b48:	2900004c 	andi	r4,r5,1
 4001b4c:	2088b03a 	or	r4,r4,r2
 4001b50:	81000115 	stw	r4,4(r16)
 4001b54:	01400144 	movi	r5,5
 4001b58:	8089883a 	add	r4,r16,r2
 4001b5c:	21400115 	stw	r5,4(r4)
 4001b60:	21400215 	stw	r5,8(r4)
 4001b64:	3080cd36 	bltu	r6,r2,4001e9c <_malloc_r+0x794>
 4001b68:	00810074 	movhi	r2,1025
 4001b6c:	10ab9704 	addi	r2,r2,-20900
 4001b70:	11000017 	ldw	r4,0(r2)
 4001b74:	20c0012e 	bgeu	r4,r3,4001b7c <_malloc_r+0x474>
 4001b78:	10c00015 	stw	r3,0(r2)
 4001b7c:	00810074 	movhi	r2,1025
 4001b80:	10ab9604 	addi	r2,r2,-20904
 4001b84:	11000017 	ldw	r4,0(r2)
 4001b88:	9c000217 	ldw	r16,8(r19)
 4001b8c:	20c0012e 	bgeu	r4,r3,4001b94 <_malloc_r+0x48c>
 4001b90:	10c00015 	stw	r3,0(r2)
 4001b94:	80c00117 	ldw	r3,4(r16)
 4001b98:	00bfff04 	movi	r2,-4
 4001b9c:	1886703a 	and	r3,r3,r2
 4001ba0:	1c45c83a 	sub	r2,r3,r17
 4001ba4:	1c400236 	bltu	r3,r17,4001bb0 <_malloc_r+0x4a8>
 4001ba8:	00c003c4 	movi	r3,15
 4001bac:	18800416 	blt	r3,r2,4001bc0 <_malloc_r+0x4b8>
 4001bb0:	9009883a 	mov	r4,r18
 4001bb4:	4002adc0 	call	4002adc <__malloc_unlock>
 4001bb8:	0005883a 	mov	r2,zero
 4001bbc:	003f7b06 	br	40019ac <__alt_data_end+0xfc0019ac>
 4001bc0:	88c00054 	ori	r3,r17,1
 4001bc4:	80c00115 	stw	r3,4(r16)
 4001bc8:	8463883a 	add	r17,r16,r17
 4001bcc:	10800054 	ori	r2,r2,1
 4001bd0:	9c400215 	stw	r17,8(r19)
 4001bd4:	88800115 	stw	r2,4(r17)
 4001bd8:	9009883a 	mov	r4,r18
 4001bdc:	4002adc0 	call	4002adc <__malloc_unlock>
 4001be0:	80800204 	addi	r2,r16,8
 4001be4:	003f7106 	br	40019ac <__alt_data_end+0xfc0019ac>
 4001be8:	00c00504 	movi	r3,20
 4001bec:	18804a2e 	bgeu	r3,r2,4001d18 <_malloc_r+0x610>
 4001bf0:	00c01504 	movi	r3,84
 4001bf4:	18806e36 	bltu	r3,r2,4001db0 <_malloc_r+0x6a8>
 4001bf8:	8804d33a 	srli	r2,r17,12
 4001bfc:	12001bc4 	addi	r8,r2,111
 4001c00:	11c01b84 	addi	r7,r2,110
 4001c04:	4209883a 	add	r4,r8,r8
 4001c08:	003edd06 	br	4001780 <__alt_data_end+0xfc001780>
 4001c0c:	3804d27a 	srli	r2,r7,9
 4001c10:	00c00104 	movi	r3,4
 4001c14:	1880442e 	bgeu	r3,r2,4001d28 <_malloc_r+0x620>
 4001c18:	00c00504 	movi	r3,20
 4001c1c:	18808136 	bltu	r3,r2,4001e24 <_malloc_r+0x71c>
 4001c20:	11401704 	addi	r5,r2,92
 4001c24:	10c016c4 	addi	r3,r2,91
 4001c28:	294b883a 	add	r5,r5,r5
 4001c2c:	294b883a 	add	r5,r5,r5
 4001c30:	294b883a 	add	r5,r5,r5
 4001c34:	994b883a 	add	r5,r19,r5
 4001c38:	28800017 	ldw	r2,0(r5)
 4001c3c:	01810034 	movhi	r6,1024
 4001c40:	297ffe04 	addi	r5,r5,-8
 4001c44:	319ee704 	addi	r6,r6,31644
 4001c48:	28806526 	beq	r5,r2,4001de0 <_malloc_r+0x6d8>
 4001c4c:	01bfff04 	movi	r6,-4
 4001c50:	10c00117 	ldw	r3,4(r2)
 4001c54:	1986703a 	and	r3,r3,r6
 4001c58:	38c0022e 	bgeu	r7,r3,4001c64 <_malloc_r+0x55c>
 4001c5c:	10800217 	ldw	r2,8(r2)
 4001c60:	28bffb1e 	bne	r5,r2,4001c50 <__alt_data_end+0xfc001c50>
 4001c64:	11400317 	ldw	r5,12(r2)
 4001c68:	98c00117 	ldw	r3,4(r19)
 4001c6c:	81400315 	stw	r5,12(r16)
 4001c70:	80800215 	stw	r2,8(r16)
 4001c74:	2c000215 	stw	r16,8(r5)
 4001c78:	14000315 	stw	r16,12(r2)
 4001c7c:	003ef806 	br	4001860 <__alt_data_end+0xfc001860>
 4001c80:	88c00054 	ori	r3,r17,1
 4001c84:	80c00115 	stw	r3,4(r16)
 4001c88:	8463883a 	add	r17,r16,r17
 4001c8c:	34400515 	stw	r17,20(r6)
 4001c90:	34400415 	stw	r17,16(r6)
 4001c94:	10c00054 	ori	r3,r2,1
 4001c98:	8a000315 	stw	r8,12(r17)
 4001c9c:	8a000215 	stw	r8,8(r17)
 4001ca0:	88c00115 	stw	r3,4(r17)
 4001ca4:	88a3883a 	add	r17,r17,r2
 4001ca8:	88800015 	stw	r2,0(r17)
 4001cac:	9009883a 	mov	r4,r18
 4001cb0:	4002adc0 	call	4002adc <__malloc_unlock>
 4001cb4:	80800204 	addi	r2,r16,8
 4001cb8:	003f3c06 	br	40019ac <__alt_data_end+0xfc0019ac>
 4001cbc:	30c00117 	ldw	r3,4(r6)
 4001cc0:	003ee706 	br	4001860 <__alt_data_end+0xfc001860>
 4001cc4:	5ac00044 	addi	r11,r11,1
 4001cc8:	588000cc 	andi	r2,r11,3
 4001ccc:	31800204 	addi	r6,r6,8
 4001cd0:	103efd1e 	bne	r2,zero,40018c8 <__alt_data_end+0xfc0018c8>
 4001cd4:	00002406 	br	4001d68 <_malloc_r+0x660>
 4001cd8:	14000317 	ldw	r16,12(r2)
 4001cdc:	143f251e 	bne	r2,r16,4001974 <__alt_data_end+0xfc001974>
 4001ce0:	21000084 	addi	r4,r4,2
 4001ce4:	003ebc06 	br	40017d8 <__alt_data_end+0xfc0017d8>
 4001ce8:	8085883a 	add	r2,r16,r2
 4001cec:	10c00117 	ldw	r3,4(r2)
 4001cf0:	81000317 	ldw	r4,12(r16)
 4001cf4:	81400217 	ldw	r5,8(r16)
 4001cf8:	18c00054 	ori	r3,r3,1
 4001cfc:	10c00115 	stw	r3,4(r2)
 4001d00:	29000315 	stw	r4,12(r5)
 4001d04:	21400215 	stw	r5,8(r4)
 4001d08:	9009883a 	mov	r4,r18
 4001d0c:	4002adc0 	call	4002adc <__malloc_unlock>
 4001d10:	80800204 	addi	r2,r16,8
 4001d14:	003f2506 	br	40019ac <__alt_data_end+0xfc0019ac>
 4001d18:	12001704 	addi	r8,r2,92
 4001d1c:	11c016c4 	addi	r7,r2,91
 4001d20:	4209883a 	add	r4,r8,r8
 4001d24:	003e9606 	br	4001780 <__alt_data_end+0xfc001780>
 4001d28:	3804d1ba 	srli	r2,r7,6
 4001d2c:	11400e44 	addi	r5,r2,57
 4001d30:	10c00e04 	addi	r3,r2,56
 4001d34:	294b883a 	add	r5,r5,r5
 4001d38:	003fbc06 	br	4001c2c <__alt_data_end+0xfc001c2c>
 4001d3c:	84ff5926 	beq	r16,r19,4001aa4 <__alt_data_end+0xfc001aa4>
 4001d40:	00810034 	movhi	r2,1024
 4001d44:	109ee704 	addi	r2,r2,31644
 4001d48:	14000217 	ldw	r16,8(r2)
 4001d4c:	00bfff04 	movi	r2,-4
 4001d50:	80c00117 	ldw	r3,4(r16)
 4001d54:	1886703a 	and	r3,r3,r2
 4001d58:	003f9106 	br	4001ba0 <__alt_data_end+0xfc001ba0>
 4001d5c:	60800217 	ldw	r2,8(r12)
 4001d60:	213fffc4 	addi	r4,r4,-1
 4001d64:	1300651e 	bne	r2,r12,4001efc <_malloc_r+0x7f4>
 4001d68:	208000cc 	andi	r2,r4,3
 4001d6c:	633ffe04 	addi	r12,r12,-8
 4001d70:	103ffa1e 	bne	r2,zero,4001d5c <__alt_data_end+0xfc001d5c>
 4001d74:	98800117 	ldw	r2,4(r19)
 4001d78:	0146303a 	nor	r3,zero,r5
 4001d7c:	1884703a 	and	r2,r3,r2
 4001d80:	98800115 	stw	r2,4(r19)
 4001d84:	294b883a 	add	r5,r5,r5
 4001d88:	117f2836 	bltu	r2,r5,4001a2c <__alt_data_end+0xfc001a2c>
 4001d8c:	283f2726 	beq	r5,zero,4001a2c <__alt_data_end+0xfc001a2c>
 4001d90:	2886703a 	and	r3,r5,r2
 4001d94:	5809883a 	mov	r4,r11
 4001d98:	183ec31e 	bne	r3,zero,40018a8 <__alt_data_end+0xfc0018a8>
 4001d9c:	294b883a 	add	r5,r5,r5
 4001da0:	2886703a 	and	r3,r5,r2
 4001da4:	21000104 	addi	r4,r4,4
 4001da8:	183ffc26 	beq	r3,zero,4001d9c <__alt_data_end+0xfc001d9c>
 4001dac:	003ebe06 	br	40018a8 <__alt_data_end+0xfc0018a8>
 4001db0:	00c05504 	movi	r3,340
 4001db4:	18801236 	bltu	r3,r2,4001e00 <_malloc_r+0x6f8>
 4001db8:	8804d3fa 	srli	r2,r17,15
 4001dbc:	12001e04 	addi	r8,r2,120
 4001dc0:	11c01dc4 	addi	r7,r2,119
 4001dc4:	4209883a 	add	r4,r8,r8
 4001dc8:	003e6d06 	br	4001780 <__alt_data_end+0xfc001780>
 4001dcc:	00c40004 	movi	r3,4096
 4001dd0:	003f4606 	br	4001aec <__alt_data_end+0xfc001aec>
 4001dd4:	00800044 	movi	r2,1
 4001dd8:	a0800115 	stw	r2,4(r20)
 4001ddc:	003f7406 	br	4001bb0 <__alt_data_end+0xfc001bb0>
 4001de0:	1805d0ba 	srai	r2,r3,2
 4001de4:	01c00044 	movi	r7,1
 4001de8:	30c00117 	ldw	r3,4(r6)
 4001dec:	388e983a 	sll	r7,r7,r2
 4001df0:	2805883a 	mov	r2,r5
 4001df4:	38c6b03a 	or	r3,r7,r3
 4001df8:	30c00115 	stw	r3,4(r6)
 4001dfc:	003f9b06 	br	4001c6c <__alt_data_end+0xfc001c6c>
 4001e00:	00c15504 	movi	r3,1364
 4001e04:	18801a36 	bltu	r3,r2,4001e70 <_malloc_r+0x768>
 4001e08:	8804d4ba 	srli	r2,r17,18
 4001e0c:	12001f44 	addi	r8,r2,125
 4001e10:	11c01f04 	addi	r7,r2,124
 4001e14:	4209883a 	add	r4,r8,r8
 4001e18:	003e5906 	br	4001780 <__alt_data_end+0xfc001780>
 4001e1c:	ad400404 	addi	r21,r21,16
 4001e20:	003f1706 	br	4001a80 <__alt_data_end+0xfc001a80>
 4001e24:	00c01504 	movi	r3,84
 4001e28:	18802336 	bltu	r3,r2,4001eb8 <_malloc_r+0x7b0>
 4001e2c:	3804d33a 	srli	r2,r7,12
 4001e30:	11401bc4 	addi	r5,r2,111
 4001e34:	10c01b84 	addi	r3,r2,110
 4001e38:	294b883a 	add	r5,r5,r5
 4001e3c:	003f7b06 	br	4001c2c <__alt_data_end+0xfc001c2c>
 4001e40:	9c000217 	ldw	r16,8(r19)
 4001e44:	00bfff04 	movi	r2,-4
 4001e48:	80c00117 	ldw	r3,4(r16)
 4001e4c:	1886703a 	and	r3,r3,r2
 4001e50:	003f5306 	br	4001ba0 <__alt_data_end+0xfc001ba0>
 4001e54:	3083ffcc 	andi	r2,r6,4095
 4001e58:	103f181e 	bne	r2,zero,4001abc <__alt_data_end+0xfc001abc>
 4001e5c:	99000217 	ldw	r4,8(r19)
 4001e60:	b545883a 	add	r2,r22,r21
 4001e64:	10800054 	ori	r2,r2,1
 4001e68:	20800115 	stw	r2,4(r4)
 4001e6c:	003f3e06 	br	4001b68 <__alt_data_end+0xfc001b68>
 4001e70:	01003f84 	movi	r4,254
 4001e74:	02001fc4 	movi	r8,127
 4001e78:	01c01f84 	movi	r7,126
 4001e7c:	003e4006 	br	4001780 <__alt_data_end+0xfc001780>
 4001e80:	00810074 	movhi	r2,1025
 4001e84:	10a4ac04 	addi	r2,r2,-27984
 4001e88:	15000015 	stw	r20,0(r2)
 4001e8c:	003f1106 	br	4001ad4 <__alt_data_end+0xfc001ad4>
 4001e90:	00800044 	movi	r2,1
 4001e94:	002b883a 	mov	r21,zero
 4001e98:	003f1f06 	br	4001b18 <__alt_data_end+0xfc001b18>
 4001e9c:	81400204 	addi	r5,r16,8
 4001ea0:	9009883a 	mov	r4,r18
 4001ea4:	40010b40 	call	40010b4 <_free_r>
 4001ea8:	00810074 	movhi	r2,1025
 4001eac:	10aba204 	addi	r2,r2,-20856
 4001eb0:	10c00017 	ldw	r3,0(r2)
 4001eb4:	003f2c06 	br	4001b68 <__alt_data_end+0xfc001b68>
 4001eb8:	00c05504 	movi	r3,340
 4001ebc:	18800536 	bltu	r3,r2,4001ed4 <_malloc_r+0x7cc>
 4001ec0:	3804d3fa 	srli	r2,r7,15
 4001ec4:	11401e04 	addi	r5,r2,120
 4001ec8:	10c01dc4 	addi	r3,r2,119
 4001ecc:	294b883a 	add	r5,r5,r5
 4001ed0:	003f5606 	br	4001c2c <__alt_data_end+0xfc001c2c>
 4001ed4:	00c15504 	movi	r3,1364
 4001ed8:	18800536 	bltu	r3,r2,4001ef0 <_malloc_r+0x7e8>
 4001edc:	3804d4ba 	srli	r2,r7,18
 4001ee0:	11401f44 	addi	r5,r2,125
 4001ee4:	10c01f04 	addi	r3,r2,124
 4001ee8:	294b883a 	add	r5,r5,r5
 4001eec:	003f4f06 	br	4001c2c <__alt_data_end+0xfc001c2c>
 4001ef0:	01403f84 	movi	r5,254
 4001ef4:	00c01f84 	movi	r3,126
 4001ef8:	003f4c06 	br	4001c2c <__alt_data_end+0xfc001c2c>
 4001efc:	98800117 	ldw	r2,4(r19)
 4001f00:	003fa006 	br	4001d84 <__alt_data_end+0xfc001d84>
 4001f04:	8808d0fa 	srli	r4,r17,3
 4001f08:	20800044 	addi	r2,r4,1
 4001f0c:	1085883a 	add	r2,r2,r2
 4001f10:	003e9006 	br	4001954 <__alt_data_end+0xfc001954>

04001f14 <memset>:
 4001f14:	20c000cc 	andi	r3,r4,3
 4001f18:	2005883a 	mov	r2,r4
 4001f1c:	18004426 	beq	r3,zero,4002030 <memset+0x11c>
 4001f20:	31ffffc4 	addi	r7,r6,-1
 4001f24:	30004026 	beq	r6,zero,4002028 <memset+0x114>
 4001f28:	2813883a 	mov	r9,r5
 4001f2c:	200d883a 	mov	r6,r4
 4001f30:	2007883a 	mov	r3,r4
 4001f34:	00000406 	br	4001f48 <memset+0x34>
 4001f38:	3a3fffc4 	addi	r8,r7,-1
 4001f3c:	31800044 	addi	r6,r6,1
 4001f40:	38003926 	beq	r7,zero,4002028 <memset+0x114>
 4001f44:	400f883a 	mov	r7,r8
 4001f48:	18c00044 	addi	r3,r3,1
 4001f4c:	32400005 	stb	r9,0(r6)
 4001f50:	1a0000cc 	andi	r8,r3,3
 4001f54:	403ff81e 	bne	r8,zero,4001f38 <__alt_data_end+0xfc001f38>
 4001f58:	010000c4 	movi	r4,3
 4001f5c:	21c02d2e 	bgeu	r4,r7,4002014 <memset+0x100>
 4001f60:	29003fcc 	andi	r4,r5,255
 4001f64:	200c923a 	slli	r6,r4,8
 4001f68:	3108b03a 	or	r4,r6,r4
 4001f6c:	200c943a 	slli	r6,r4,16
 4001f70:	218cb03a 	or	r6,r4,r6
 4001f74:	010003c4 	movi	r4,15
 4001f78:	21c0182e 	bgeu	r4,r7,4001fdc <memset+0xc8>
 4001f7c:	3b3ffc04 	addi	r12,r7,-16
 4001f80:	6018d13a 	srli	r12,r12,4
 4001f84:	1a000104 	addi	r8,r3,4
 4001f88:	1ac00204 	addi	r11,r3,8
 4001f8c:	6008913a 	slli	r4,r12,4
 4001f90:	1a800304 	addi	r10,r3,12
 4001f94:	1813883a 	mov	r9,r3
 4001f98:	21000504 	addi	r4,r4,20
 4001f9c:	1909883a 	add	r4,r3,r4
 4001fa0:	49800015 	stw	r6,0(r9)
 4001fa4:	41800015 	stw	r6,0(r8)
 4001fa8:	59800015 	stw	r6,0(r11)
 4001fac:	51800015 	stw	r6,0(r10)
 4001fb0:	42000404 	addi	r8,r8,16
 4001fb4:	4a400404 	addi	r9,r9,16
 4001fb8:	5ac00404 	addi	r11,r11,16
 4001fbc:	52800404 	addi	r10,r10,16
 4001fc0:	413ff71e 	bne	r8,r4,4001fa0 <__alt_data_end+0xfc001fa0>
 4001fc4:	63000044 	addi	r12,r12,1
 4001fc8:	6018913a 	slli	r12,r12,4
 4001fcc:	39c003cc 	andi	r7,r7,15
 4001fd0:	010000c4 	movi	r4,3
 4001fd4:	1b07883a 	add	r3,r3,r12
 4001fd8:	21c00e2e 	bgeu	r4,r7,4002014 <memset+0x100>
 4001fdc:	1813883a 	mov	r9,r3
 4001fe0:	3811883a 	mov	r8,r7
 4001fe4:	010000c4 	movi	r4,3
 4001fe8:	49800015 	stw	r6,0(r9)
 4001fec:	423fff04 	addi	r8,r8,-4
 4001ff0:	4a400104 	addi	r9,r9,4
 4001ff4:	223ffc36 	bltu	r4,r8,4001fe8 <__alt_data_end+0xfc001fe8>
 4001ff8:	393fff04 	addi	r4,r7,-4
 4001ffc:	2008d0ba 	srli	r4,r4,2
 4002000:	39c000cc 	andi	r7,r7,3
 4002004:	21000044 	addi	r4,r4,1
 4002008:	2109883a 	add	r4,r4,r4
 400200c:	2109883a 	add	r4,r4,r4
 4002010:	1907883a 	add	r3,r3,r4
 4002014:	38000526 	beq	r7,zero,400202c <memset+0x118>
 4002018:	19cf883a 	add	r7,r3,r7
 400201c:	19400005 	stb	r5,0(r3)
 4002020:	18c00044 	addi	r3,r3,1
 4002024:	38fffd1e 	bne	r7,r3,400201c <__alt_data_end+0xfc00201c>
 4002028:	f800283a 	ret
 400202c:	f800283a 	ret
 4002030:	2007883a 	mov	r3,r4
 4002034:	300f883a 	mov	r7,r6
 4002038:	003fc706 	br	4001f58 <__alt_data_end+0xfc001f58>

0400203c <_sbrk_r>:
 400203c:	defffd04 	addi	sp,sp,-12
 4002040:	dc000015 	stw	r16,0(sp)
 4002044:	04010074 	movhi	r16,1025
 4002048:	dc400115 	stw	r17,4(sp)
 400204c:	842b9904 	addi	r16,r16,-20892
 4002050:	2023883a 	mov	r17,r4
 4002054:	2809883a 	mov	r4,r5
 4002058:	dfc00215 	stw	ra,8(sp)
 400205c:	80000015 	stw	zero,0(r16)
 4002060:	4002cc40 	call	4002cc4 <sbrk>
 4002064:	00ffffc4 	movi	r3,-1
 4002068:	10c00526 	beq	r2,r3,4002080 <_sbrk_r+0x44>
 400206c:	dfc00217 	ldw	ra,8(sp)
 4002070:	dc400117 	ldw	r17,4(sp)
 4002074:	dc000017 	ldw	r16,0(sp)
 4002078:	dec00304 	addi	sp,sp,12
 400207c:	f800283a 	ret
 4002080:	80c00017 	ldw	r3,0(r16)
 4002084:	183ff926 	beq	r3,zero,400206c <__alt_data_end+0xfc00206c>
 4002088:	88c00015 	stw	r3,0(r17)
 400208c:	003ff706 	br	400206c <__alt_data_end+0xfc00206c>

04002090 <__sread>:
 4002090:	defffe04 	addi	sp,sp,-8
 4002094:	dc000015 	stw	r16,0(sp)
 4002098:	2821883a 	mov	r16,r5
 400209c:	2940038f 	ldh	r5,14(r5)
 40020a0:	dfc00115 	stw	ra,4(sp)
 40020a4:	40024940 	call	4002494 <_read_r>
 40020a8:	10000716 	blt	r2,zero,40020c8 <__sread+0x38>
 40020ac:	80c01417 	ldw	r3,80(r16)
 40020b0:	1887883a 	add	r3,r3,r2
 40020b4:	80c01415 	stw	r3,80(r16)
 40020b8:	dfc00117 	ldw	ra,4(sp)
 40020bc:	dc000017 	ldw	r16,0(sp)
 40020c0:	dec00204 	addi	sp,sp,8
 40020c4:	f800283a 	ret
 40020c8:	80c0030b 	ldhu	r3,12(r16)
 40020cc:	18fbffcc 	andi	r3,r3,61439
 40020d0:	80c0030d 	sth	r3,12(r16)
 40020d4:	dfc00117 	ldw	ra,4(sp)
 40020d8:	dc000017 	ldw	r16,0(sp)
 40020dc:	dec00204 	addi	sp,sp,8
 40020e0:	f800283a 	ret

040020e4 <__seofread>:
 40020e4:	0005883a 	mov	r2,zero
 40020e8:	f800283a 	ret

040020ec <__swrite>:
 40020ec:	2880030b 	ldhu	r2,12(r5)
 40020f0:	defffb04 	addi	sp,sp,-20
 40020f4:	dcc00315 	stw	r19,12(sp)
 40020f8:	dc800215 	stw	r18,8(sp)
 40020fc:	dc400115 	stw	r17,4(sp)
 4002100:	dc000015 	stw	r16,0(sp)
 4002104:	dfc00415 	stw	ra,16(sp)
 4002108:	10c0400c 	andi	r3,r2,256
 400210c:	2821883a 	mov	r16,r5
 4002110:	2023883a 	mov	r17,r4
 4002114:	3025883a 	mov	r18,r6
 4002118:	3827883a 	mov	r19,r7
 400211c:	18000526 	beq	r3,zero,4002134 <__swrite+0x48>
 4002120:	2940038f 	ldh	r5,14(r5)
 4002124:	01c00084 	movi	r7,2
 4002128:	000d883a 	mov	r6,zero
 400212c:	40024340 	call	4002434 <_lseek_r>
 4002130:	8080030b 	ldhu	r2,12(r16)
 4002134:	8140038f 	ldh	r5,14(r16)
 4002138:	10bbffcc 	andi	r2,r2,61439
 400213c:	980f883a 	mov	r7,r19
 4002140:	900d883a 	mov	r6,r18
 4002144:	8809883a 	mov	r4,r17
 4002148:	8080030d 	sth	r2,12(r16)
 400214c:	dfc00417 	ldw	ra,16(sp)
 4002150:	dcc00317 	ldw	r19,12(sp)
 4002154:	dc800217 	ldw	r18,8(sp)
 4002158:	dc400117 	ldw	r17,4(sp)
 400215c:	dc000017 	ldw	r16,0(sp)
 4002160:	dec00504 	addi	sp,sp,20
 4002164:	40021cc1 	jmpi	40021cc <_write_r>

04002168 <__sseek>:
 4002168:	defffe04 	addi	sp,sp,-8
 400216c:	dc000015 	stw	r16,0(sp)
 4002170:	2821883a 	mov	r16,r5
 4002174:	2940038f 	ldh	r5,14(r5)
 4002178:	dfc00115 	stw	ra,4(sp)
 400217c:	40024340 	call	4002434 <_lseek_r>
 4002180:	00ffffc4 	movi	r3,-1
 4002184:	10c00826 	beq	r2,r3,40021a8 <__sseek+0x40>
 4002188:	80c0030b 	ldhu	r3,12(r16)
 400218c:	80801415 	stw	r2,80(r16)
 4002190:	18c40014 	ori	r3,r3,4096
 4002194:	80c0030d 	sth	r3,12(r16)
 4002198:	dfc00117 	ldw	ra,4(sp)
 400219c:	dc000017 	ldw	r16,0(sp)
 40021a0:	dec00204 	addi	sp,sp,8
 40021a4:	f800283a 	ret
 40021a8:	80c0030b 	ldhu	r3,12(r16)
 40021ac:	18fbffcc 	andi	r3,r3,61439
 40021b0:	80c0030d 	sth	r3,12(r16)
 40021b4:	dfc00117 	ldw	ra,4(sp)
 40021b8:	dc000017 	ldw	r16,0(sp)
 40021bc:	dec00204 	addi	sp,sp,8
 40021c0:	f800283a 	ret

040021c4 <__sclose>:
 40021c4:	2940038f 	ldh	r5,14(r5)
 40021c8:	400222c1 	jmpi	400222c <_close_r>

040021cc <_write_r>:
 40021cc:	defffd04 	addi	sp,sp,-12
 40021d0:	2805883a 	mov	r2,r5
 40021d4:	dc000015 	stw	r16,0(sp)
 40021d8:	04010074 	movhi	r16,1025
 40021dc:	dc400115 	stw	r17,4(sp)
 40021e0:	300b883a 	mov	r5,r6
 40021e4:	842b9904 	addi	r16,r16,-20892
 40021e8:	2023883a 	mov	r17,r4
 40021ec:	380d883a 	mov	r6,r7
 40021f0:	1009883a 	mov	r4,r2
 40021f4:	dfc00215 	stw	ra,8(sp)
 40021f8:	80000015 	stw	zero,0(r16)
 40021fc:	4002db00 	call	4002db0 <write>
 4002200:	00ffffc4 	movi	r3,-1
 4002204:	10c00526 	beq	r2,r3,400221c <_write_r+0x50>
 4002208:	dfc00217 	ldw	ra,8(sp)
 400220c:	dc400117 	ldw	r17,4(sp)
 4002210:	dc000017 	ldw	r16,0(sp)
 4002214:	dec00304 	addi	sp,sp,12
 4002218:	f800283a 	ret
 400221c:	80c00017 	ldw	r3,0(r16)
 4002220:	183ff926 	beq	r3,zero,4002208 <__alt_data_end+0xfc002208>
 4002224:	88c00015 	stw	r3,0(r17)
 4002228:	003ff706 	br	4002208 <__alt_data_end+0xfc002208>

0400222c <_close_r>:
 400222c:	defffd04 	addi	sp,sp,-12
 4002230:	dc000015 	stw	r16,0(sp)
 4002234:	04010074 	movhi	r16,1025
 4002238:	dc400115 	stw	r17,4(sp)
 400223c:	842b9904 	addi	r16,r16,-20892
 4002240:	2023883a 	mov	r17,r4
 4002244:	2809883a 	mov	r4,r5
 4002248:	dfc00215 	stw	ra,8(sp)
 400224c:	80000015 	stw	zero,0(r16)
 4002250:	40025580 	call	4002558 <close>
 4002254:	00ffffc4 	movi	r3,-1
 4002258:	10c00526 	beq	r2,r3,4002270 <_close_r+0x44>
 400225c:	dfc00217 	ldw	ra,8(sp)
 4002260:	dc400117 	ldw	r17,4(sp)
 4002264:	dc000017 	ldw	r16,0(sp)
 4002268:	dec00304 	addi	sp,sp,12
 400226c:	f800283a 	ret
 4002270:	80c00017 	ldw	r3,0(r16)
 4002274:	183ff926 	beq	r3,zero,400225c <__alt_data_end+0xfc00225c>
 4002278:	88c00015 	stw	r3,0(r17)
 400227c:	003ff706 	br	400225c <__alt_data_end+0xfc00225c>

04002280 <_fclose_r>:
 4002280:	28003926 	beq	r5,zero,4002368 <_fclose_r+0xe8>
 4002284:	defffc04 	addi	sp,sp,-16
 4002288:	dc400115 	stw	r17,4(sp)
 400228c:	dc000015 	stw	r16,0(sp)
 4002290:	dfc00315 	stw	ra,12(sp)
 4002294:	dc800215 	stw	r18,8(sp)
 4002298:	2023883a 	mov	r17,r4
 400229c:	2821883a 	mov	r16,r5
 40022a0:	20000226 	beq	r4,zero,40022ac <_fclose_r+0x2c>
 40022a4:	20800e17 	ldw	r2,56(r4)
 40022a8:	10002726 	beq	r2,zero,4002348 <_fclose_r+0xc8>
 40022ac:	8080030f 	ldh	r2,12(r16)
 40022b0:	1000071e 	bne	r2,zero,40022d0 <_fclose_r+0x50>
 40022b4:	0005883a 	mov	r2,zero
 40022b8:	dfc00317 	ldw	ra,12(sp)
 40022bc:	dc800217 	ldw	r18,8(sp)
 40022c0:	dc400117 	ldw	r17,4(sp)
 40022c4:	dc000017 	ldw	r16,0(sp)
 40022c8:	dec00404 	addi	sp,sp,16
 40022cc:	f800283a 	ret
 40022d0:	800b883a 	mov	r5,r16
 40022d4:	8809883a 	mov	r4,r17
 40022d8:	40009380 	call	4000938 <__sflush_r>
 40022dc:	1025883a 	mov	r18,r2
 40022e0:	80800b17 	ldw	r2,44(r16)
 40022e4:	10000426 	beq	r2,zero,40022f8 <_fclose_r+0x78>
 40022e8:	81400717 	ldw	r5,28(r16)
 40022ec:	8809883a 	mov	r4,r17
 40022f0:	103ee83a 	callr	r2
 40022f4:	10001616 	blt	r2,zero,4002350 <_fclose_r+0xd0>
 40022f8:	8080030b 	ldhu	r2,12(r16)
 40022fc:	1080200c 	andi	r2,r2,128
 4002300:	1000151e 	bne	r2,zero,4002358 <_fclose_r+0xd8>
 4002304:	81400c17 	ldw	r5,48(r16)
 4002308:	28000526 	beq	r5,zero,4002320 <_fclose_r+0xa0>
 400230c:	80801004 	addi	r2,r16,64
 4002310:	28800226 	beq	r5,r2,400231c <_fclose_r+0x9c>
 4002314:	8809883a 	mov	r4,r17
 4002318:	40010b40 	call	40010b4 <_free_r>
 400231c:	80000c15 	stw	zero,48(r16)
 4002320:	81401117 	ldw	r5,68(r16)
 4002324:	28000326 	beq	r5,zero,4002334 <_fclose_r+0xb4>
 4002328:	8809883a 	mov	r4,r17
 400232c:	40010b40 	call	40010b4 <_free_r>
 4002330:	80001115 	stw	zero,68(r16)
 4002334:	4000f500 	call	4000f50 <__sfp_lock_acquire>
 4002338:	8000030d 	sth	zero,12(r16)
 400233c:	4000f540 	call	4000f54 <__sfp_lock_release>
 4002340:	9005883a 	mov	r2,r18
 4002344:	003fdc06 	br	40022b8 <__alt_data_end+0xfc0022b8>
 4002348:	4000f400 	call	4000f40 <__sinit>
 400234c:	003fd706 	br	40022ac <__alt_data_end+0xfc0022ac>
 4002350:	04bfffc4 	movi	r18,-1
 4002354:	003fe806 	br	40022f8 <__alt_data_end+0xfc0022f8>
 4002358:	81400417 	ldw	r5,16(r16)
 400235c:	8809883a 	mov	r4,r17
 4002360:	40010b40 	call	40010b4 <_free_r>
 4002364:	003fe706 	br	4002304 <__alt_data_end+0xfc002304>
 4002368:	0005883a 	mov	r2,zero
 400236c:	f800283a 	ret

04002370 <fclose>:
 4002370:	00810074 	movhi	r2,1025
 4002374:	10a4ab04 	addi	r2,r2,-27988
 4002378:	200b883a 	mov	r5,r4
 400237c:	11000017 	ldw	r4,0(r2)
 4002380:	40022801 	jmpi	4002280 <_fclose_r>

04002384 <_fstat_r>:
 4002384:	defffd04 	addi	sp,sp,-12
 4002388:	2805883a 	mov	r2,r5
 400238c:	dc000015 	stw	r16,0(sp)
 4002390:	04010074 	movhi	r16,1025
 4002394:	dc400115 	stw	r17,4(sp)
 4002398:	842b9904 	addi	r16,r16,-20892
 400239c:	2023883a 	mov	r17,r4
 40023a0:	300b883a 	mov	r5,r6
 40023a4:	1009883a 	mov	r4,r2
 40023a8:	dfc00215 	stw	ra,8(sp)
 40023ac:	80000015 	stw	zero,0(r16)
 40023b0:	40026980 	call	4002698 <fstat>
 40023b4:	00ffffc4 	movi	r3,-1
 40023b8:	10c00526 	beq	r2,r3,40023d0 <_fstat_r+0x4c>
 40023bc:	dfc00217 	ldw	ra,8(sp)
 40023c0:	dc400117 	ldw	r17,4(sp)
 40023c4:	dc000017 	ldw	r16,0(sp)
 40023c8:	dec00304 	addi	sp,sp,12
 40023cc:	f800283a 	ret
 40023d0:	80c00017 	ldw	r3,0(r16)
 40023d4:	183ff926 	beq	r3,zero,40023bc <__alt_data_end+0xfc0023bc>
 40023d8:	88c00015 	stw	r3,0(r17)
 40023dc:	003ff706 	br	40023bc <__alt_data_end+0xfc0023bc>

040023e0 <_isatty_r>:
 40023e0:	defffd04 	addi	sp,sp,-12
 40023e4:	dc000015 	stw	r16,0(sp)
 40023e8:	04010074 	movhi	r16,1025
 40023ec:	dc400115 	stw	r17,4(sp)
 40023f0:	842b9904 	addi	r16,r16,-20892
 40023f4:	2023883a 	mov	r17,r4
 40023f8:	2809883a 	mov	r4,r5
 40023fc:	dfc00215 	stw	ra,8(sp)
 4002400:	80000015 	stw	zero,0(r16)
 4002404:	400278c0 	call	400278c <isatty>
 4002408:	00ffffc4 	movi	r3,-1
 400240c:	10c00526 	beq	r2,r3,4002424 <_isatty_r+0x44>
 4002410:	dfc00217 	ldw	ra,8(sp)
 4002414:	dc400117 	ldw	r17,4(sp)
 4002418:	dc000017 	ldw	r16,0(sp)
 400241c:	dec00304 	addi	sp,sp,12
 4002420:	f800283a 	ret
 4002424:	80c00017 	ldw	r3,0(r16)
 4002428:	183ff926 	beq	r3,zero,4002410 <__alt_data_end+0xfc002410>
 400242c:	88c00015 	stw	r3,0(r17)
 4002430:	003ff706 	br	4002410 <__alt_data_end+0xfc002410>

04002434 <_lseek_r>:
 4002434:	defffd04 	addi	sp,sp,-12
 4002438:	2805883a 	mov	r2,r5
 400243c:	dc000015 	stw	r16,0(sp)
 4002440:	04010074 	movhi	r16,1025
 4002444:	dc400115 	stw	r17,4(sp)
 4002448:	300b883a 	mov	r5,r6
 400244c:	842b9904 	addi	r16,r16,-20892
 4002450:	2023883a 	mov	r17,r4
 4002454:	380d883a 	mov	r6,r7
 4002458:	1009883a 	mov	r4,r2
 400245c:	dfc00215 	stw	ra,8(sp)
 4002460:	80000015 	stw	zero,0(r16)
 4002464:	40029600 	call	4002960 <lseek>
 4002468:	00ffffc4 	movi	r3,-1
 400246c:	10c00526 	beq	r2,r3,4002484 <_lseek_r+0x50>
 4002470:	dfc00217 	ldw	ra,8(sp)
 4002474:	dc400117 	ldw	r17,4(sp)
 4002478:	dc000017 	ldw	r16,0(sp)
 400247c:	dec00304 	addi	sp,sp,12
 4002480:	f800283a 	ret
 4002484:	80c00017 	ldw	r3,0(r16)
 4002488:	183ff926 	beq	r3,zero,4002470 <__alt_data_end+0xfc002470>
 400248c:	88c00015 	stw	r3,0(r17)
 4002490:	003ff706 	br	4002470 <__alt_data_end+0xfc002470>

04002494 <_read_r>:
 4002494:	defffd04 	addi	sp,sp,-12
 4002498:	2805883a 	mov	r2,r5
 400249c:	dc000015 	stw	r16,0(sp)
 40024a0:	04010074 	movhi	r16,1025
 40024a4:	dc400115 	stw	r17,4(sp)
 40024a8:	300b883a 	mov	r5,r6
 40024ac:	842b9904 	addi	r16,r16,-20892
 40024b0:	2023883a 	mov	r17,r4
 40024b4:	380d883a 	mov	r6,r7
 40024b8:	1009883a 	mov	r4,r2
 40024bc:	dfc00215 	stw	ra,8(sp)
 40024c0:	80000015 	stw	zero,0(r16)
 40024c4:	4002b3c0 	call	4002b3c <read>
 40024c8:	00ffffc4 	movi	r3,-1
 40024cc:	10c00526 	beq	r2,r3,40024e4 <_read_r+0x50>
 40024d0:	dfc00217 	ldw	ra,8(sp)
 40024d4:	dc400117 	ldw	r17,4(sp)
 40024d8:	dc000017 	ldw	r16,0(sp)
 40024dc:	dec00304 	addi	sp,sp,12
 40024e0:	f800283a 	ret
 40024e4:	80c00017 	ldw	r3,0(r16)
 40024e8:	183ff926 	beq	r3,zero,40024d0 <__alt_data_end+0xfc0024d0>
 40024ec:	88c00015 	stw	r3,0(r17)
 40024f0:	003ff706 	br	40024d0 <__alt_data_end+0xfc0024d0>

040024f4 <__mulsi3>:
 40024f4:	0005883a 	mov	r2,zero
 40024f8:	20000726 	beq	r4,zero,4002518 <__mulsi3+0x24>
 40024fc:	20c0004c 	andi	r3,r4,1
 4002500:	2008d07a 	srli	r4,r4,1
 4002504:	18000126 	beq	r3,zero,400250c <__mulsi3+0x18>
 4002508:	1145883a 	add	r2,r2,r5
 400250c:	294b883a 	add	r5,r5,r5
 4002510:	203ffa1e 	bne	r4,zero,40024fc <__alt_data_end+0xfc0024fc>
 4002514:	f800283a 	ret
 4002518:	f800283a 	ret

0400251c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400251c:	defffe04 	addi	sp,sp,-8
 4002520:	dfc00115 	stw	ra,4(sp)
 4002524:	df000015 	stw	fp,0(sp)
 4002528:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400252c:	d0a00917 	ldw	r2,-32732(gp)
 4002530:	10000326 	beq	r2,zero,4002540 <alt_get_errno+0x24>
 4002534:	d0a00917 	ldw	r2,-32732(gp)
 4002538:	103ee83a 	callr	r2
 400253c:	00000106 	br	4002544 <alt_get_errno+0x28>
 4002540:	d0a6ef04 	addi	r2,gp,-25668
}
 4002544:	e037883a 	mov	sp,fp
 4002548:	dfc00117 	ldw	ra,4(sp)
 400254c:	df000017 	ldw	fp,0(sp)
 4002550:	dec00204 	addi	sp,sp,8
 4002554:	f800283a 	ret

04002558 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4002558:	defffb04 	addi	sp,sp,-20
 400255c:	dfc00415 	stw	ra,16(sp)
 4002560:	df000315 	stw	fp,12(sp)
 4002564:	df000304 	addi	fp,sp,12
 4002568:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400256c:	e0bfff17 	ldw	r2,-4(fp)
 4002570:	10000816 	blt	r2,zero,4002594 <close+0x3c>
 4002574:	01400304 	movi	r5,12
 4002578:	e13fff17 	ldw	r4,-4(fp)
 400257c:	40024f40 	call	40024f4 <__mulsi3>
 4002580:	1007883a 	mov	r3,r2
 4002584:	00810034 	movhi	r2,1024
 4002588:	109ff304 	addi	r2,r2,32716
 400258c:	1885883a 	add	r2,r3,r2
 4002590:	00000106 	br	4002598 <close+0x40>
 4002594:	0005883a 	mov	r2,zero
 4002598:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400259c:	e0bffd17 	ldw	r2,-12(fp)
 40025a0:	10001926 	beq	r2,zero,4002608 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40025a4:	e0bffd17 	ldw	r2,-12(fp)
 40025a8:	10800017 	ldw	r2,0(r2)
 40025ac:	10800417 	ldw	r2,16(r2)
 40025b0:	10000626 	beq	r2,zero,40025cc <close+0x74>
 40025b4:	e0bffd17 	ldw	r2,-12(fp)
 40025b8:	10800017 	ldw	r2,0(r2)
 40025bc:	10800417 	ldw	r2,16(r2)
 40025c0:	e13ffd17 	ldw	r4,-12(fp)
 40025c4:	103ee83a 	callr	r2
 40025c8:	00000106 	br	40025d0 <close+0x78>
 40025cc:	0005883a 	mov	r2,zero
 40025d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40025d4:	e13fff17 	ldw	r4,-4(fp)
 40025d8:	4002c400 	call	4002c40 <alt_release_fd>
    if (rval < 0)
 40025dc:	e0bffe17 	ldw	r2,-8(fp)
 40025e0:	1000070e 	bge	r2,zero,4002600 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 40025e4:	400251c0 	call	400251c <alt_get_errno>
 40025e8:	1007883a 	mov	r3,r2
 40025ec:	e0bffe17 	ldw	r2,-8(fp)
 40025f0:	0085c83a 	sub	r2,zero,r2
 40025f4:	18800015 	stw	r2,0(r3)
      return -1;
 40025f8:	00bfffc4 	movi	r2,-1
 40025fc:	00000706 	br	400261c <close+0xc4>
    }
    return 0;
 4002600:	0005883a 	mov	r2,zero
 4002604:	00000506 	br	400261c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4002608:	400251c0 	call	400251c <alt_get_errno>
 400260c:	1007883a 	mov	r3,r2
 4002610:	00801444 	movi	r2,81
 4002614:	18800015 	stw	r2,0(r3)
    return -1;
 4002618:	00bfffc4 	movi	r2,-1
  }
}
 400261c:	e037883a 	mov	sp,fp
 4002620:	dfc00117 	ldw	ra,4(sp)
 4002624:	df000017 	ldw	fp,0(sp)
 4002628:	dec00204 	addi	sp,sp,8
 400262c:	f800283a 	ret

04002630 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4002630:	defffc04 	addi	sp,sp,-16
 4002634:	df000315 	stw	fp,12(sp)
 4002638:	df000304 	addi	fp,sp,12
 400263c:	e13ffd15 	stw	r4,-12(fp)
 4002640:	e17ffe15 	stw	r5,-8(fp)
 4002644:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4002648:	e0bfff17 	ldw	r2,-4(fp)
}
 400264c:	e037883a 	mov	sp,fp
 4002650:	df000017 	ldw	fp,0(sp)
 4002654:	dec00104 	addi	sp,sp,4
 4002658:	f800283a 	ret

0400265c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400265c:	defffe04 	addi	sp,sp,-8
 4002660:	dfc00115 	stw	ra,4(sp)
 4002664:	df000015 	stw	fp,0(sp)
 4002668:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400266c:	d0a00917 	ldw	r2,-32732(gp)
 4002670:	10000326 	beq	r2,zero,4002680 <alt_get_errno+0x24>
 4002674:	d0a00917 	ldw	r2,-32732(gp)
 4002678:	103ee83a 	callr	r2
 400267c:	00000106 	br	4002684 <alt_get_errno+0x28>
 4002680:	d0a6ef04 	addi	r2,gp,-25668
}
 4002684:	e037883a 	mov	sp,fp
 4002688:	dfc00117 	ldw	ra,4(sp)
 400268c:	df000017 	ldw	fp,0(sp)
 4002690:	dec00204 	addi	sp,sp,8
 4002694:	f800283a 	ret

04002698 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4002698:	defffb04 	addi	sp,sp,-20
 400269c:	dfc00415 	stw	ra,16(sp)
 40026a0:	df000315 	stw	fp,12(sp)
 40026a4:	df000304 	addi	fp,sp,12
 40026a8:	e13ffe15 	stw	r4,-8(fp)
 40026ac:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40026b0:	e0bffe17 	ldw	r2,-8(fp)
 40026b4:	10000816 	blt	r2,zero,40026d8 <fstat+0x40>
 40026b8:	01400304 	movi	r5,12
 40026bc:	e13ffe17 	ldw	r4,-8(fp)
 40026c0:	40024f40 	call	40024f4 <__mulsi3>
 40026c4:	1007883a 	mov	r3,r2
 40026c8:	00810034 	movhi	r2,1024
 40026cc:	109ff304 	addi	r2,r2,32716
 40026d0:	1885883a 	add	r2,r3,r2
 40026d4:	00000106 	br	40026dc <fstat+0x44>
 40026d8:	0005883a 	mov	r2,zero
 40026dc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 40026e0:	e0bffd17 	ldw	r2,-12(fp)
 40026e4:	10001026 	beq	r2,zero,4002728 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40026e8:	e0bffd17 	ldw	r2,-12(fp)
 40026ec:	10800017 	ldw	r2,0(r2)
 40026f0:	10800817 	ldw	r2,32(r2)
 40026f4:	10000726 	beq	r2,zero,4002714 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 40026f8:	e0bffd17 	ldw	r2,-12(fp)
 40026fc:	10800017 	ldw	r2,0(r2)
 4002700:	10800817 	ldw	r2,32(r2)
 4002704:	e17fff17 	ldw	r5,-4(fp)
 4002708:	e13ffd17 	ldw	r4,-12(fp)
 400270c:	103ee83a 	callr	r2
 4002710:	00000a06 	br	400273c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4002714:	e0bfff17 	ldw	r2,-4(fp)
 4002718:	00c80004 	movi	r3,8192
 400271c:	10c00115 	stw	r3,4(r2)
      return 0;
 4002720:	0005883a 	mov	r2,zero
 4002724:	00000506 	br	400273c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4002728:	400265c0 	call	400265c <alt_get_errno>
 400272c:	1007883a 	mov	r3,r2
 4002730:	00801444 	movi	r2,81
 4002734:	18800015 	stw	r2,0(r3)
    return -1;
 4002738:	00bfffc4 	movi	r2,-1
  }
}
 400273c:	e037883a 	mov	sp,fp
 4002740:	dfc00117 	ldw	ra,4(sp)
 4002744:	df000017 	ldw	fp,0(sp)
 4002748:	dec00204 	addi	sp,sp,8
 400274c:	f800283a 	ret

04002750 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002750:	defffe04 	addi	sp,sp,-8
 4002754:	dfc00115 	stw	ra,4(sp)
 4002758:	df000015 	stw	fp,0(sp)
 400275c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002760:	d0a00917 	ldw	r2,-32732(gp)
 4002764:	10000326 	beq	r2,zero,4002774 <alt_get_errno+0x24>
 4002768:	d0a00917 	ldw	r2,-32732(gp)
 400276c:	103ee83a 	callr	r2
 4002770:	00000106 	br	4002778 <alt_get_errno+0x28>
 4002774:	d0a6ef04 	addi	r2,gp,-25668
}
 4002778:	e037883a 	mov	sp,fp
 400277c:	dfc00117 	ldw	ra,4(sp)
 4002780:	df000017 	ldw	fp,0(sp)
 4002784:	dec00204 	addi	sp,sp,8
 4002788:	f800283a 	ret

0400278c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400278c:	deffed04 	addi	sp,sp,-76
 4002790:	dfc01215 	stw	ra,72(sp)
 4002794:	df001115 	stw	fp,68(sp)
 4002798:	df001104 	addi	fp,sp,68
 400279c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40027a0:	e0bfff17 	ldw	r2,-4(fp)
 40027a4:	10000816 	blt	r2,zero,40027c8 <isatty+0x3c>
 40027a8:	01400304 	movi	r5,12
 40027ac:	e13fff17 	ldw	r4,-4(fp)
 40027b0:	40024f40 	call	40024f4 <__mulsi3>
 40027b4:	1007883a 	mov	r3,r2
 40027b8:	00810034 	movhi	r2,1024
 40027bc:	109ff304 	addi	r2,r2,32716
 40027c0:	1885883a 	add	r2,r3,r2
 40027c4:	00000106 	br	40027cc <isatty+0x40>
 40027c8:	0005883a 	mov	r2,zero
 40027cc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 40027d0:	e0bfef17 	ldw	r2,-68(fp)
 40027d4:	10000e26 	beq	r2,zero,4002810 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40027d8:	e0bfef17 	ldw	r2,-68(fp)
 40027dc:	10800017 	ldw	r2,0(r2)
 40027e0:	10800817 	ldw	r2,32(r2)
 40027e4:	1000021e 	bne	r2,zero,40027f0 <isatty+0x64>
    {
      return 1;
 40027e8:	00800044 	movi	r2,1
 40027ec:	00000d06 	br	4002824 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40027f0:	e0bff004 	addi	r2,fp,-64
 40027f4:	100b883a 	mov	r5,r2
 40027f8:	e13fff17 	ldw	r4,-4(fp)
 40027fc:	40026980 	call	4002698 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4002800:	e0bff117 	ldw	r2,-60(fp)
 4002804:	10880020 	cmpeqi	r2,r2,8192
 4002808:	10803fcc 	andi	r2,r2,255
 400280c:	00000506 	br	4002824 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4002810:	40027500 	call	4002750 <alt_get_errno>
 4002814:	1007883a 	mov	r3,r2
 4002818:	00801444 	movi	r2,81
 400281c:	18800015 	stw	r2,0(r3)
    return 0;
 4002820:	0005883a 	mov	r2,zero
  }
}
 4002824:	e037883a 	mov	sp,fp
 4002828:	dfc00117 	ldw	ra,4(sp)
 400282c:	df000017 	ldw	fp,0(sp)
 4002830:	dec00204 	addi	sp,sp,8
 4002834:	f800283a 	ret

04002838 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4002838:	defffc04 	addi	sp,sp,-16
 400283c:	df000315 	stw	fp,12(sp)
 4002840:	df000304 	addi	fp,sp,12
 4002844:	e13ffd15 	stw	r4,-12(fp)
 4002848:	e17ffe15 	stw	r5,-8(fp)
 400284c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4002850:	e0fffe17 	ldw	r3,-8(fp)
 4002854:	e0bffd17 	ldw	r2,-12(fp)
 4002858:	18800c26 	beq	r3,r2,400288c <alt_load_section+0x54>
  {
    while( to != end )
 400285c:	00000806 	br	4002880 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4002860:	e0bffe17 	ldw	r2,-8(fp)
 4002864:	10c00104 	addi	r3,r2,4
 4002868:	e0fffe15 	stw	r3,-8(fp)
 400286c:	e0fffd17 	ldw	r3,-12(fp)
 4002870:	19000104 	addi	r4,r3,4
 4002874:	e13ffd15 	stw	r4,-12(fp)
 4002878:	18c00017 	ldw	r3,0(r3)
 400287c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4002880:	e0fffe17 	ldw	r3,-8(fp)
 4002884:	e0bfff17 	ldw	r2,-4(fp)
 4002888:	18bff51e 	bne	r3,r2,4002860 <__alt_data_end+0xfc002860>
    {
      *to++ = *from++;
    }
  }
}
 400288c:	0001883a 	nop
 4002890:	e037883a 	mov	sp,fp
 4002894:	df000017 	ldw	fp,0(sp)
 4002898:	dec00104 	addi	sp,sp,4
 400289c:	f800283a 	ret

040028a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40028a0:	defffe04 	addi	sp,sp,-8
 40028a4:	dfc00115 	stw	ra,4(sp)
 40028a8:	df000015 	stw	fp,0(sp)
 40028ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40028b0:	01810074 	movhi	r6,1025
 40028b4:	31a4ba04 	addi	r6,r6,-27928
 40028b8:	01410034 	movhi	r5,1024
 40028bc:	295dde04 	addi	r5,r5,30584
 40028c0:	01010074 	movhi	r4,1025
 40028c4:	2124ba04 	addi	r4,r4,-27928
 40028c8:	40028380 	call	4002838 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40028cc:	01810034 	movhi	r6,1024
 40028d0:	31807004 	addi	r6,r6,448
 40028d4:	01410034 	movhi	r5,1024
 40028d8:	29400804 	addi	r5,r5,32
 40028dc:	01010034 	movhi	r4,1024
 40028e0:	21000804 	addi	r4,r4,32
 40028e4:	40028380 	call	4002838 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40028e8:	01810034 	movhi	r6,1024
 40028ec:	319dde04 	addi	r6,r6,30584
 40028f0:	01410034 	movhi	r5,1024
 40028f4:	295dc204 	addi	r5,r5,30472
 40028f8:	01010034 	movhi	r4,1024
 40028fc:	211dc204 	addi	r4,r4,30472
 4002900:	40028380 	call	4002838 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4002904:	40062a40 	call	40062a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4002908:	40064f40 	call	40064f4 <alt_icache_flush_all>
}
 400290c:	0001883a 	nop
 4002910:	e037883a 	mov	sp,fp
 4002914:	dfc00117 	ldw	ra,4(sp)
 4002918:	df000017 	ldw	fp,0(sp)
 400291c:	dec00204 	addi	sp,sp,8
 4002920:	f800283a 	ret

04002924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002924:	defffe04 	addi	sp,sp,-8
 4002928:	dfc00115 	stw	ra,4(sp)
 400292c:	df000015 	stw	fp,0(sp)
 4002930:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002934:	d0a00917 	ldw	r2,-32732(gp)
 4002938:	10000326 	beq	r2,zero,4002948 <alt_get_errno+0x24>
 400293c:	d0a00917 	ldw	r2,-32732(gp)
 4002940:	103ee83a 	callr	r2
 4002944:	00000106 	br	400294c <alt_get_errno+0x28>
 4002948:	d0a6ef04 	addi	r2,gp,-25668
}
 400294c:	e037883a 	mov	sp,fp
 4002950:	dfc00117 	ldw	ra,4(sp)
 4002954:	df000017 	ldw	fp,0(sp)
 4002958:	dec00204 	addi	sp,sp,8
 400295c:	f800283a 	ret

04002960 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4002960:	defff904 	addi	sp,sp,-28
 4002964:	dfc00615 	stw	ra,24(sp)
 4002968:	df000515 	stw	fp,20(sp)
 400296c:	df000504 	addi	fp,sp,20
 4002970:	e13ffd15 	stw	r4,-12(fp)
 4002974:	e17ffe15 	stw	r5,-8(fp)
 4002978:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400297c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4002980:	e0bffd17 	ldw	r2,-12(fp)
 4002984:	10000816 	blt	r2,zero,40029a8 <lseek+0x48>
 4002988:	01400304 	movi	r5,12
 400298c:	e13ffd17 	ldw	r4,-12(fp)
 4002990:	40024f40 	call	40024f4 <__mulsi3>
 4002994:	1007883a 	mov	r3,r2
 4002998:	00810034 	movhi	r2,1024
 400299c:	109ff304 	addi	r2,r2,32716
 40029a0:	1885883a 	add	r2,r3,r2
 40029a4:	00000106 	br	40029ac <lseek+0x4c>
 40029a8:	0005883a 	mov	r2,zero
 40029ac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40029b0:	e0bffc17 	ldw	r2,-16(fp)
 40029b4:	10001026 	beq	r2,zero,40029f8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40029b8:	e0bffc17 	ldw	r2,-16(fp)
 40029bc:	10800017 	ldw	r2,0(r2)
 40029c0:	10800717 	ldw	r2,28(r2)
 40029c4:	10000926 	beq	r2,zero,40029ec <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40029c8:	e0bffc17 	ldw	r2,-16(fp)
 40029cc:	10800017 	ldw	r2,0(r2)
 40029d0:	10800717 	ldw	r2,28(r2)
 40029d4:	e1bfff17 	ldw	r6,-4(fp)
 40029d8:	e17ffe17 	ldw	r5,-8(fp)
 40029dc:	e13ffc17 	ldw	r4,-16(fp)
 40029e0:	103ee83a 	callr	r2
 40029e4:	e0bffb15 	stw	r2,-20(fp)
 40029e8:	00000506 	br	4002a00 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40029ec:	00bfde84 	movi	r2,-134
 40029f0:	e0bffb15 	stw	r2,-20(fp)
 40029f4:	00000206 	br	4002a00 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 40029f8:	00bfebc4 	movi	r2,-81
 40029fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4002a00:	e0bffb17 	ldw	r2,-20(fp)
 4002a04:	1000070e 	bge	r2,zero,4002a24 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 4002a08:	40029240 	call	4002924 <alt_get_errno>
 4002a0c:	1007883a 	mov	r3,r2
 4002a10:	e0bffb17 	ldw	r2,-20(fp)
 4002a14:	0085c83a 	sub	r2,zero,r2
 4002a18:	18800015 	stw	r2,0(r3)
    rc = -1;
 4002a1c:	00bfffc4 	movi	r2,-1
 4002a20:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4002a24:	e0bffb17 	ldw	r2,-20(fp)
}
 4002a28:	e037883a 	mov	sp,fp
 4002a2c:	dfc00117 	ldw	ra,4(sp)
 4002a30:	df000017 	ldw	fp,0(sp)
 4002a34:	dec00204 	addi	sp,sp,8
 4002a38:	f800283a 	ret

04002a3c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4002a3c:	defffd04 	addi	sp,sp,-12
 4002a40:	dfc00215 	stw	ra,8(sp)
 4002a44:	df000115 	stw	fp,4(sp)
 4002a48:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4002a4c:	0009883a 	mov	r4,zero
 4002a50:	4002ee40 	call	4002ee4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4002a54:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4002a58:	4002f1c0 	call	4002f1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4002a5c:	01810034 	movhi	r6,1024
 4002a60:	319dc604 	addi	r6,r6,30488
 4002a64:	01410034 	movhi	r5,1024
 4002a68:	295dc604 	addi	r5,r5,30488
 4002a6c:	01010034 	movhi	r4,1024
 4002a70:	211dc604 	addi	r4,r4,30488
 4002a74:	40068980 	call	4006898 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4002a78:	40063a40 	call	40063a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4002a7c:	01010034 	movhi	r4,1024
 4002a80:	21190104 	addi	r4,r4,25604
 4002a84:	40071940 	call	4007194 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4002a88:	d0a6f017 	ldw	r2,-25664(gp)
 4002a8c:	d0e6f117 	ldw	r3,-25660(gp)
 4002a90:	d126f217 	ldw	r4,-25656(gp)
 4002a94:	200d883a 	mov	r6,r4
 4002a98:	180b883a 	mov	r5,r3
 4002a9c:	1009883a 	mov	r4,r2
 4002aa0:	40001fc0 	call	40001fc <main>
 4002aa4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4002aa8:	01000044 	movi	r4,1
 4002aac:	40025580 	call	4002558 <close>
  exit (result);
 4002ab0:	e13fff17 	ldw	r4,-4(fp)
 4002ab4:	40071a80 	call	40071a8 <exit>

04002ab8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4002ab8:	defffe04 	addi	sp,sp,-8
 4002abc:	df000115 	stw	fp,4(sp)
 4002ac0:	df000104 	addi	fp,sp,4
 4002ac4:	e13fff15 	stw	r4,-4(fp)
}
 4002ac8:	0001883a 	nop
 4002acc:	e037883a 	mov	sp,fp
 4002ad0:	df000017 	ldw	fp,0(sp)
 4002ad4:	dec00104 	addi	sp,sp,4
 4002ad8:	f800283a 	ret

04002adc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4002adc:	defffe04 	addi	sp,sp,-8
 4002ae0:	df000115 	stw	fp,4(sp)
 4002ae4:	df000104 	addi	fp,sp,4
 4002ae8:	e13fff15 	stw	r4,-4(fp)
}
 4002aec:	0001883a 	nop
 4002af0:	e037883a 	mov	sp,fp
 4002af4:	df000017 	ldw	fp,0(sp)
 4002af8:	dec00104 	addi	sp,sp,4
 4002afc:	f800283a 	ret

04002b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002b00:	defffe04 	addi	sp,sp,-8
 4002b04:	dfc00115 	stw	ra,4(sp)
 4002b08:	df000015 	stw	fp,0(sp)
 4002b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002b10:	d0a00917 	ldw	r2,-32732(gp)
 4002b14:	10000326 	beq	r2,zero,4002b24 <alt_get_errno+0x24>
 4002b18:	d0a00917 	ldw	r2,-32732(gp)
 4002b1c:	103ee83a 	callr	r2
 4002b20:	00000106 	br	4002b28 <alt_get_errno+0x28>
 4002b24:	d0a6ef04 	addi	r2,gp,-25668
}
 4002b28:	e037883a 	mov	sp,fp
 4002b2c:	dfc00117 	ldw	ra,4(sp)
 4002b30:	df000017 	ldw	fp,0(sp)
 4002b34:	dec00204 	addi	sp,sp,8
 4002b38:	f800283a 	ret

04002b3c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4002b3c:	defff904 	addi	sp,sp,-28
 4002b40:	dfc00615 	stw	ra,24(sp)
 4002b44:	df000515 	stw	fp,20(sp)
 4002b48:	df000504 	addi	fp,sp,20
 4002b4c:	e13ffd15 	stw	r4,-12(fp)
 4002b50:	e17ffe15 	stw	r5,-8(fp)
 4002b54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4002b58:	e0bffd17 	ldw	r2,-12(fp)
 4002b5c:	10000816 	blt	r2,zero,4002b80 <read+0x44>
 4002b60:	01400304 	movi	r5,12
 4002b64:	e13ffd17 	ldw	r4,-12(fp)
 4002b68:	40024f40 	call	40024f4 <__mulsi3>
 4002b6c:	1007883a 	mov	r3,r2
 4002b70:	00810034 	movhi	r2,1024
 4002b74:	109ff304 	addi	r2,r2,32716
 4002b78:	1885883a 	add	r2,r3,r2
 4002b7c:	00000106 	br	4002b84 <read+0x48>
 4002b80:	0005883a 	mov	r2,zero
 4002b84:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4002b88:	e0bffb17 	ldw	r2,-20(fp)
 4002b8c:	10002226 	beq	r2,zero,4002c18 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4002b90:	e0bffb17 	ldw	r2,-20(fp)
 4002b94:	10800217 	ldw	r2,8(r2)
 4002b98:	108000cc 	andi	r2,r2,3
 4002b9c:	10800060 	cmpeqi	r2,r2,1
 4002ba0:	1000181e 	bne	r2,zero,4002c04 <read+0xc8>
        (fd->dev->read))
 4002ba4:	e0bffb17 	ldw	r2,-20(fp)
 4002ba8:	10800017 	ldw	r2,0(r2)
 4002bac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4002bb0:	10001426 	beq	r2,zero,4002c04 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4002bb4:	e0bffb17 	ldw	r2,-20(fp)
 4002bb8:	10800017 	ldw	r2,0(r2)
 4002bbc:	10800517 	ldw	r2,20(r2)
 4002bc0:	e0ffff17 	ldw	r3,-4(fp)
 4002bc4:	180d883a 	mov	r6,r3
 4002bc8:	e17ffe17 	ldw	r5,-8(fp)
 4002bcc:	e13ffb17 	ldw	r4,-20(fp)
 4002bd0:	103ee83a 	callr	r2
 4002bd4:	e0bffc15 	stw	r2,-16(fp)
 4002bd8:	e0bffc17 	ldw	r2,-16(fp)
 4002bdc:	1000070e 	bge	r2,zero,4002bfc <read+0xc0>
        {
          ALT_ERRNO = -rval;
 4002be0:	4002b000 	call	4002b00 <alt_get_errno>
 4002be4:	1007883a 	mov	r3,r2
 4002be8:	e0bffc17 	ldw	r2,-16(fp)
 4002bec:	0085c83a 	sub	r2,zero,r2
 4002bf0:	18800015 	stw	r2,0(r3)
          return -1;
 4002bf4:	00bfffc4 	movi	r2,-1
 4002bf8:	00000c06 	br	4002c2c <read+0xf0>
        }
        return rval;
 4002bfc:	e0bffc17 	ldw	r2,-16(fp)
 4002c00:	00000a06 	br	4002c2c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4002c04:	4002b000 	call	4002b00 <alt_get_errno>
 4002c08:	1007883a 	mov	r3,r2
 4002c0c:	00800344 	movi	r2,13
 4002c10:	18800015 	stw	r2,0(r3)
 4002c14:	00000406 	br	4002c28 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4002c18:	4002b000 	call	4002b00 <alt_get_errno>
 4002c1c:	1007883a 	mov	r3,r2
 4002c20:	00801444 	movi	r2,81
 4002c24:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4002c28:	00bfffc4 	movi	r2,-1
}
 4002c2c:	e037883a 	mov	sp,fp
 4002c30:	dfc00117 	ldw	ra,4(sp)
 4002c34:	df000017 	ldw	fp,0(sp)
 4002c38:	dec00204 	addi	sp,sp,8
 4002c3c:	f800283a 	ret

04002c40 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4002c40:	defffc04 	addi	sp,sp,-16
 4002c44:	dfc00315 	stw	ra,12(sp)
 4002c48:	df000215 	stw	fp,8(sp)
 4002c4c:	dc000115 	stw	r16,4(sp)
 4002c50:	df000204 	addi	fp,sp,8
 4002c54:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4002c58:	e0bffe17 	ldw	r2,-8(fp)
 4002c5c:	108000d0 	cmplti	r2,r2,3
 4002c60:	1000111e 	bne	r2,zero,4002ca8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4002c64:	04010034 	movhi	r16,1024
 4002c68:	841ff304 	addi	r16,r16,32716
 4002c6c:	e0bffe17 	ldw	r2,-8(fp)
 4002c70:	01400304 	movi	r5,12
 4002c74:	1009883a 	mov	r4,r2
 4002c78:	40024f40 	call	40024f4 <__mulsi3>
 4002c7c:	8085883a 	add	r2,r16,r2
 4002c80:	10800204 	addi	r2,r2,8
 4002c84:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4002c88:	04010034 	movhi	r16,1024
 4002c8c:	841ff304 	addi	r16,r16,32716
 4002c90:	e0bffe17 	ldw	r2,-8(fp)
 4002c94:	01400304 	movi	r5,12
 4002c98:	1009883a 	mov	r4,r2
 4002c9c:	40024f40 	call	40024f4 <__mulsi3>
 4002ca0:	8085883a 	add	r2,r16,r2
 4002ca4:	10000015 	stw	zero,0(r2)
  }
}
 4002ca8:	0001883a 	nop
 4002cac:	e6ffff04 	addi	sp,fp,-4
 4002cb0:	dfc00217 	ldw	ra,8(sp)
 4002cb4:	df000117 	ldw	fp,4(sp)
 4002cb8:	dc000017 	ldw	r16,0(sp)
 4002cbc:	dec00304 	addi	sp,sp,12
 4002cc0:	f800283a 	ret

04002cc4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4002cc4:	defff904 	addi	sp,sp,-28
 4002cc8:	df000615 	stw	fp,24(sp)
 4002ccc:	df000604 	addi	fp,sp,24
 4002cd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002cd4:	0005303a 	rdctl	r2,status
 4002cd8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002cdc:	e0fffe17 	ldw	r3,-8(fp)
 4002ce0:	00bfff84 	movi	r2,-2
 4002ce4:	1884703a 	and	r2,r3,r2
 4002ce8:	1001703a 	wrctl	status,r2
  
  return context;
 4002cec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4002cf0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4002cf4:	d0a00a17 	ldw	r2,-32728(gp)
 4002cf8:	10c000c4 	addi	r3,r2,3
 4002cfc:	00bfff04 	movi	r2,-4
 4002d00:	1884703a 	and	r2,r3,r2
 4002d04:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4002d08:	d0e00a17 	ldw	r3,-32728(gp)
 4002d0c:	e0bfff17 	ldw	r2,-4(fp)
 4002d10:	1887883a 	add	r3,r3,r2
 4002d14:	00820034 	movhi	r2,2048
 4002d18:	10800004 	addi	r2,r2,0
 4002d1c:	10c0062e 	bgeu	r2,r3,4002d38 <sbrk+0x74>
 4002d20:	e0bffb17 	ldw	r2,-20(fp)
 4002d24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002d28:	e0bffa17 	ldw	r2,-24(fp)
 4002d2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4002d30:	00bfffc4 	movi	r2,-1
 4002d34:	00000b06 	br	4002d64 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4002d38:	d0a00a17 	ldw	r2,-32728(gp)
 4002d3c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4002d40:	d0e00a17 	ldw	r3,-32728(gp)
 4002d44:	e0bfff17 	ldw	r2,-4(fp)
 4002d48:	1885883a 	add	r2,r3,r2
 4002d4c:	d0a00a15 	stw	r2,-32728(gp)
 4002d50:	e0bffb17 	ldw	r2,-20(fp)
 4002d54:	e0bffc15 	stw	r2,-16(fp)
 4002d58:	e0bffc17 	ldw	r2,-16(fp)
 4002d5c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4002d60:	e0bffd17 	ldw	r2,-12(fp)
} 
 4002d64:	e037883a 	mov	sp,fp
 4002d68:	df000017 	ldw	fp,0(sp)
 4002d6c:	dec00104 	addi	sp,sp,4
 4002d70:	f800283a 	ret

04002d74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002d74:	defffe04 	addi	sp,sp,-8
 4002d78:	dfc00115 	stw	ra,4(sp)
 4002d7c:	df000015 	stw	fp,0(sp)
 4002d80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002d84:	d0a00917 	ldw	r2,-32732(gp)
 4002d88:	10000326 	beq	r2,zero,4002d98 <alt_get_errno+0x24>
 4002d8c:	d0a00917 	ldw	r2,-32732(gp)
 4002d90:	103ee83a 	callr	r2
 4002d94:	00000106 	br	4002d9c <alt_get_errno+0x28>
 4002d98:	d0a6ef04 	addi	r2,gp,-25668
}
 4002d9c:	e037883a 	mov	sp,fp
 4002da0:	dfc00117 	ldw	ra,4(sp)
 4002da4:	df000017 	ldw	fp,0(sp)
 4002da8:	dec00204 	addi	sp,sp,8
 4002dac:	f800283a 	ret

04002db0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4002db0:	defff904 	addi	sp,sp,-28
 4002db4:	dfc00615 	stw	ra,24(sp)
 4002db8:	df000515 	stw	fp,20(sp)
 4002dbc:	df000504 	addi	fp,sp,20
 4002dc0:	e13ffd15 	stw	r4,-12(fp)
 4002dc4:	e17ffe15 	stw	r5,-8(fp)
 4002dc8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4002dcc:	e0bffd17 	ldw	r2,-12(fp)
 4002dd0:	10000816 	blt	r2,zero,4002df4 <write+0x44>
 4002dd4:	01400304 	movi	r5,12
 4002dd8:	e13ffd17 	ldw	r4,-12(fp)
 4002ddc:	40024f40 	call	40024f4 <__mulsi3>
 4002de0:	1007883a 	mov	r3,r2
 4002de4:	00810034 	movhi	r2,1024
 4002de8:	109ff304 	addi	r2,r2,32716
 4002dec:	1885883a 	add	r2,r3,r2
 4002df0:	00000106 	br	4002df8 <write+0x48>
 4002df4:	0005883a 	mov	r2,zero
 4002df8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4002dfc:	e0bffb17 	ldw	r2,-20(fp)
 4002e00:	10002126 	beq	r2,zero,4002e88 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4002e04:	e0bffb17 	ldw	r2,-20(fp)
 4002e08:	10800217 	ldw	r2,8(r2)
 4002e0c:	108000cc 	andi	r2,r2,3
 4002e10:	10001826 	beq	r2,zero,4002e74 <write+0xc4>
 4002e14:	e0bffb17 	ldw	r2,-20(fp)
 4002e18:	10800017 	ldw	r2,0(r2)
 4002e1c:	10800617 	ldw	r2,24(r2)
 4002e20:	10001426 	beq	r2,zero,4002e74 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4002e24:	e0bffb17 	ldw	r2,-20(fp)
 4002e28:	10800017 	ldw	r2,0(r2)
 4002e2c:	10800617 	ldw	r2,24(r2)
 4002e30:	e0ffff17 	ldw	r3,-4(fp)
 4002e34:	180d883a 	mov	r6,r3
 4002e38:	e17ffe17 	ldw	r5,-8(fp)
 4002e3c:	e13ffb17 	ldw	r4,-20(fp)
 4002e40:	103ee83a 	callr	r2
 4002e44:	e0bffc15 	stw	r2,-16(fp)
 4002e48:	e0bffc17 	ldw	r2,-16(fp)
 4002e4c:	1000070e 	bge	r2,zero,4002e6c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4002e50:	4002d740 	call	4002d74 <alt_get_errno>
 4002e54:	1007883a 	mov	r3,r2
 4002e58:	e0bffc17 	ldw	r2,-16(fp)
 4002e5c:	0085c83a 	sub	r2,zero,r2
 4002e60:	18800015 	stw	r2,0(r3)
        return -1;
 4002e64:	00bfffc4 	movi	r2,-1
 4002e68:	00000c06 	br	4002e9c <write+0xec>
      }
      return rval;
 4002e6c:	e0bffc17 	ldw	r2,-16(fp)
 4002e70:	00000a06 	br	4002e9c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4002e74:	4002d740 	call	4002d74 <alt_get_errno>
 4002e78:	1007883a 	mov	r3,r2
 4002e7c:	00800344 	movi	r2,13
 4002e80:	18800015 	stw	r2,0(r3)
 4002e84:	00000406 	br	4002e98 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4002e88:	4002d740 	call	4002d74 <alt_get_errno>
 4002e8c:	1007883a 	mov	r3,r2
 4002e90:	00801444 	movi	r2,81
 4002e94:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4002e98:	00bfffc4 	movi	r2,-1
}
 4002e9c:	e037883a 	mov	sp,fp
 4002ea0:	dfc00117 	ldw	ra,4(sp)
 4002ea4:	df000017 	ldw	fp,0(sp)
 4002ea8:	dec00204 	addi	sp,sp,8
 4002eac:	f800283a 	ret

04002eb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4002eb0:	defffd04 	addi	sp,sp,-12
 4002eb4:	dfc00215 	stw	ra,8(sp)
 4002eb8:	df000115 	stw	fp,4(sp)
 4002ebc:	df000104 	addi	fp,sp,4
 4002ec0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4002ec4:	d1600604 	addi	r5,gp,-32744
 4002ec8:	e13fff17 	ldw	r4,-4(fp)
 4002ecc:	40063000 	call	4006300 <alt_dev_llist_insert>
}
 4002ed0:	e037883a 	mov	sp,fp
 4002ed4:	dfc00117 	ldw	ra,4(sp)
 4002ed8:	df000017 	ldw	fp,0(sp)
 4002edc:	dec00204 	addi	sp,sp,8
 4002ee0:	f800283a 	ret

04002ee4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4002ee4:	defffd04 	addi	sp,sp,-12
 4002ee8:	dfc00215 	stw	ra,8(sp)
 4002eec:	df000115 	stw	fp,4(sp)
 4002ef0:	df000104 	addi	fp,sp,4
 4002ef4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 4002ef8:	4006fa40 	call	4006fa4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4002efc:	00800044 	movi	r2,1
 4002f00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4002f04:	0001883a 	nop
 4002f08:	e037883a 	mov	sp,fp
 4002f0c:	dfc00117 	ldw	ra,4(sp)
 4002f10:	df000017 	ldw	fp,0(sp)
 4002f14:	dec00204 	addi	sp,sp,8
 4002f18:	f800283a 	ret

04002f1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4002f1c:	defffe04 	addi	sp,sp,-8
 4002f20:	dfc00115 	stw	ra,4(sp)
 4002f24:	df000015 	stw	fp,0(sp)
 4002f28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4002f2c:	00820034 	movhi	r2,2048
 4002f30:	10842004 	addi	r2,r2,4224
 4002f34:	d0a6f315 	stw	r2,-25652(gp)
 4002f38:	0080bef4 	movhi	r2,763
 4002f3c:	10bc2004 	addi	r2,r2,-3968
 4002f40:	d0a6f415 	stw	r2,-25648(gp)
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 4002f44:	01010074 	movhi	r4,1025
 4002f48:	21205304 	addi	r4,r4,-32436
 4002f4c:	40032000 	call	4003200 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4002f50:	000d883a 	mov	r6,zero
 4002f54:	000b883a 	mov	r5,zero
 4002f58:	01010074 	movhi	r4,1025
 4002f5c:	21206b04 	addi	r4,r4,-32340
 4002f60:	4004d2c0 	call	4004d2c <altera_avalon_jtag_uart_init>
 4002f64:	01010074 	movhi	r4,1025
 4002f68:	21206104 	addi	r4,r4,-32380
 4002f6c:	4002eb00 	call	4002eb0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 4002f70:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4002f74:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 4002f78:	01800084 	movi	r6,2
 4002f7c:	000b883a 	mov	r5,zero
 4002f80:	01010074 	movhi	r4,1025
 4002f84:	21248304 	addi	r4,r4,-28148
 4002f88:	40058580 	call	4005858 <altera_avalon_uart_init>
 4002f8c:	01010074 	movhi	r4,1025
 4002f90:	21247904 	addi	r4,r4,-28188
 4002f94:	4002eb00 	call	4002eb0 <alt_dev_reg>
}
 4002f98:	0001883a 	nop
 4002f9c:	e037883a 	mov	sp,fp
 4002fa0:	dfc00117 	ldw	ra,4(sp)
 4002fa4:	df000017 	ldw	fp,0(sp)
 4002fa8:	dec00204 	addi	sp,sp,8
 4002fac:	f800283a 	ret

04002fb0 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 4002fb0:	defff904 	addi	sp,sp,-28
 4002fb4:	dfc00615 	stw	ra,24(sp)
 4002fb8:	df000515 	stw	fp,20(sp)
 4002fbc:	df000504 	addi	fp,sp,20
 4002fc0:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 4002fc4:	008000b4 	movhi	r2,2
 4002fc8:	10a1a804 	addi	r2,r2,-31072
 4002fcc:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 4002fd0:	e0bfff17 	ldw	r2,-4(fp)
 4002fd4:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 4002fd8:	e0bffc17 	ldw	r2,-16(fp)
 4002fdc:	10800717 	ldw	r2,28(r2)
 4002fe0:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 4002fe4:	e0bffd17 	ldw	r2,-12(fp)
 4002fe8:	10800217 	ldw	r2,8(r2)
 4002fec:	10800098 	cmpnei	r2,r2,2
 4002ff0:	1000251e 	bne	r2,zero,4003088 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 4002ff4:	e0bffd17 	ldw	r2,-12(fp)
 4002ff8:	10c00017 	ldw	r3,0(r2)
 4002ffc:	e0bffd17 	ldw	r2,-12(fp)
 4003000:	10800117 	ldw	r2,4(r2)
 4003004:	e13ffe04 	addi	r4,fp,-8
 4003008:	200f883a 	mov	r7,r4
 400300c:	100d883a 	mov	r6,r2
 4003010:	180b883a 	mov	r5,r3
 4003014:	e13ffc17 	ldw	r4,-16(fp)
 4003018:	40037600 	call	4003760 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 400301c:	e0bffd17 	ldw	r2,-12(fp)
 4003020:	10c00117 	ldw	r3,4(r2)
 4003024:	e0bffe17 	ldw	r2,-8(fp)
 4003028:	1887c83a 	sub	r3,r3,r2
 400302c:	e0bffd17 	ldw	r2,-12(fp)
 4003030:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 4003034:	e0bffd17 	ldw	r2,-12(fp)
 4003038:	10c00017 	ldw	r3,0(r2)
 400303c:	e0bffe17 	ldw	r2,-8(fp)
 4003040:	1887883a 	add	r3,r3,r2
 4003044:	e0bffd17 	ldw	r2,-12(fp)
 4003048:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 400304c:	e0bffd17 	ldw	r2,-12(fp)
 4003050:	10800117 	ldw	r2,4(r2)
 4003054:	10000c26 	beq	r2,zero,4003088 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4003058:	01400704 	movi	r5,28
 400305c:	e13ffc17 	ldw	r4,-16(fp)
 4003060:	40049180 	call	4004918 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 4003064:	01400084 	movi	r5,2
 4003068:	e13ffc17 	ldw	r4,-16(fp)
 400306c:	40049bc0 	call	40049bc <alt_avalon_i2c_int_enable>
 4003070:	00000e06 	br	40030ac <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 4003074:	e0bffb17 	ldw	r2,-20(fp)
 4003078:	10bfffc4 	addi	r2,r2,-1
 400307c:	e0bffb15 	stw	r2,-20(fp)
 4003080:	e0bffb17 	ldw	r2,-20(fp)
 4003084:	10000426 	beq	r2,zero,4003098 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 4003088:	e13ffc17 	ldw	r4,-16(fp)
 400308c:	400371c0 	call	400371c <alt_avalon_i2c_is_busy>
 4003090:	103ff81e 	bne	r2,zero,4003074 <__alt_data_end+0xfc003074>
 4003094:	00000106 	br	400309c <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 4003098:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 400309c:	e13ffc17 	ldw	r4,-16(fp)
 40030a0:	40033c40 	call	40033c4 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 40030a4:	e0bffd17 	ldw	r2,-12(fp)
 40030a8:	10000215 	stw	zero,8(r2)
}
 40030ac:	e037883a 	mov	sp,fp
 40030b0:	dfc00117 	ldw	ra,4(sp)
 40030b4:	df000017 	ldw	fp,0(sp)
 40030b8:	dec00204 	addi	sp,sp,8
 40030bc:	f800283a 	ret

040030c0 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 40030c0:	defffc04 	addi	sp,sp,-16
 40030c4:	dfc00315 	stw	ra,12(sp)
 40030c8:	df000215 	stw	fp,8(sp)
 40030cc:	df000204 	addi	fp,sp,8
 40030d0:	e13ffe15 	stw	r4,-8(fp)
 40030d4:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 40030d8:	e0bfff17 	ldw	r2,-4(fp)
 40030dc:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 40030e0:	e1ffff17 	ldw	r7,-4(fp)
 40030e4:	000d883a 	mov	r6,zero
 40030e8:	01410034 	movhi	r5,1024
 40030ec:	294bec04 	addi	r5,r5,12208
 40030f0:	e13ffe17 	ldw	r4,-8(fp)
 40030f4:	40031ac0 	call	40031ac <alt_avalon_i2c_register_callback>
}
 40030f8:	0001883a 	nop
 40030fc:	e037883a 	mov	sp,fp
 4003100:	dfc00117 	ldw	ra,4(sp)
 4003104:	df000017 	ldw	fp,0(sp)
 4003108:	dec00204 	addi	sp,sp,8
 400310c:	f800283a 	ret

04003110 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 4003110:	defff904 	addi	sp,sp,-28
 4003114:	dfc00615 	stw	ra,24(sp)
 4003118:	df000515 	stw	fp,20(sp)
 400311c:	df000504 	addi	fp,sp,20
 4003120:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 4003124:	e0bfff17 	ldw	r2,-4(fp)
 4003128:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 400312c:	014007c4 	movi	r5,31
 4003130:	e13ffb17 	ldw	r4,-20(fp)
 4003134:	40049540 	call	4004954 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4003138:	01400704 	movi	r5,28
 400313c:	e13ffb17 	ldw	r4,-20(fp)
 4003140:	40049180 	call	4004918 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 4003144:	e0bffb17 	ldw	r2,-20(fp)
 4003148:	10800617 	ldw	r2,24(r2)
 400314c:	10001126 	beq	r2,zero,4003194 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003150:	0005303a 	rdctl	r2,status
 4003154:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003158:	e0fffd17 	ldw	r3,-12(fp)
 400315c:	00bfff84 	movi	r2,-2
 4003160:	1884703a 	and	r2,r3,r2
 4003164:	1001703a 	wrctl	status,r2
  
  return context;
 4003168:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 400316c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 4003170:	e0bffb17 	ldw	r2,-20(fp)
 4003174:	10800617 	ldw	r2,24(r2)
 4003178:	e13ffb17 	ldw	r4,-20(fp)
 400317c:	103ee83a 	callr	r2
 4003180:	e0bffc17 	ldw	r2,-16(fp)
 4003184:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003188:	e0bffe17 	ldw	r2,-8(fp)
 400318c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 4003190:	0001883a 	nop
 4003194:	0001883a 	nop
}
 4003198:	e037883a 	mov	sp,fp
 400319c:	dfc00117 	ldw	ra,4(sp)
 40031a0:	df000017 	ldw	fp,0(sp)
 40031a4:	dec00204 	addi	sp,sp,8
 40031a8:	f800283a 	ret

040031ac <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 40031ac:	defffb04 	addi	sp,sp,-20
 40031b0:	df000415 	stw	fp,16(sp)
 40031b4:	df000404 	addi	fp,sp,16
 40031b8:	e13ffc15 	stw	r4,-16(fp)
 40031bc:	e17ffd15 	stw	r5,-12(fp)
 40031c0:	e1bffe15 	stw	r6,-8(fp)
 40031c4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 40031c8:	e0bffc17 	ldw	r2,-16(fp)
 40031cc:	e0fffd17 	ldw	r3,-12(fp)
 40031d0:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 40031d4:	e0bffc17 	ldw	r2,-16(fp)
 40031d8:	e0ffff17 	ldw	r3,-4(fp)
 40031dc:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 40031e0:	e0bffc17 	ldw	r2,-16(fp)
 40031e4:	e0fffe17 	ldw	r3,-8(fp)
 40031e8:	10c00815 	stw	r3,32(r2)

    return ;
 40031ec:	0001883a 	nop
}
 40031f0:	e037883a 	mov	sp,fp
 40031f4:	df000017 	ldw	fp,0(sp)
 40031f8:	dec00104 	addi	sp,sp,4
 40031fc:	f800283a 	ret

04003200 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 4003200:	defff704 	addi	sp,sp,-36
 4003204:	dfc00815 	stw	ra,32(sp)
 4003208:	df000715 	stw	fp,28(sp)
 400320c:	df000704 	addi	fp,sp,28
 4003210:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 4003214:	e13fff17 	ldw	r4,-4(fp)
 4003218:	40033c40 	call	40033c4 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 400321c:	014007c4 	movi	r5,31
 4003220:	e13fff17 	ldw	r4,-4(fp)
 4003224:	40049540 	call	4004954 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4003228:	01400704 	movi	r5,28
 400322c:	e13fff17 	ldw	r4,-4(fp)
 4003230:	40049180 	call	4004918 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 4003234:	014000c4 	movi	r5,3
 4003238:	e13fff17 	ldw	r4,-4(fp)
 400323c:	4004b600 	call	4004b60 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 4003240:	014000c4 	movi	r5,3
 4003244:	e13fff17 	ldw	r4,-4(fp)
 4003248:	4004ab00 	call	4004ab0 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 400324c:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 4003250:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 4003254:	e0bffb04 	addi	r2,fp,-20
 4003258:	018000b4 	movhi	r6,2
 400325c:	31a1a804 	addi	r6,r6,-31072
 4003260:	100b883a 	mov	r5,r2
 4003264:	e13fff17 	ldw	r4,-4(fp)
 4003268:	40036200 	call	4003620 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 400326c:	e0bffb04 	addi	r2,fp,-20
 4003270:	100b883a 	mov	r5,r2
 4003274:	e13fff17 	ldw	r4,-4(fp)
 4003278:	40034c00 	call	40034c0 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 400327c:	d1600b04 	addi	r5,gp,-32724
 4003280:	e13fff17 	ldw	r4,-4(fp)
 4003284:	40063000 	call	4006300 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4003288:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 400328c:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 4003290:	e0bffa17 	ldw	r2,-24(fp)
 4003294:	10000c1e 	bne	r2,zero,40032c8 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 4003298:	e0bfff17 	ldw	r2,-4(fp)
 400329c:	10c00417 	ldw	r3,16(r2)
 40032a0:	e0bfff17 	ldw	r2,-4(fp)
 40032a4:	10800517 	ldw	r2,20(r2)
 40032a8:	d8000015 	stw	zero,0(sp)
 40032ac:	e1ffff17 	ldw	r7,-4(fp)
 40032b0:	01810034 	movhi	r6,1024
 40032b4:	318c4404 	addi	r6,r6,12560
 40032b8:	100b883a 	mov	r5,r2
 40032bc:	1809883a 	mov	r4,r3
 40032c0:	40065140 	call	4006514 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 40032c4:	00000406 	br	40032d8 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 40032c8:	01010034 	movhi	r4,1024
 40032cc:	211dd604 	addi	r4,r4,30552
 40032d0:	4006b980 	call	4006b98 <alt_printf>
    }

    return;
 40032d4:	0001883a 	nop

}
 40032d8:	e037883a 	mov	sp,fp
 40032dc:	dfc00117 	ldw	ra,4(sp)
 40032e0:	df000017 	ldw	fp,0(sp)
 40032e4:	dec00204 	addi	sp,sp,8
 40032e8:	f800283a 	ret

040032ec <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 40032ec:	defffc04 	addi	sp,sp,-16
 40032f0:	dfc00315 	stw	ra,12(sp)
 40032f4:	df000215 	stw	fp,8(sp)
 40032f8:	df000204 	addi	fp,sp,8
 40032fc:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 4003300:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 4003304:	d1600b04 	addi	r5,gp,-32724
 4003308:	e13fff17 	ldw	r4,-4(fp)
 400330c:	40064640 	call	4006464 <alt_find_dev>
 4003310:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 4003314:	e0bffe17 	ldw	r2,-8(fp)
}
 4003318:	e037883a 	mov	sp,fp
 400331c:	dfc00117 	ldw	ra,4(sp)
 4003320:	df000017 	ldw	fp,0(sp)
 4003324:	dec00204 	addi	sp,sp,8
 4003328:	f800283a 	ret

0400332c <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 400332c:	defffc04 	addi	sp,sp,-16
 4003330:	df000315 	stw	fp,12(sp)
 4003334:	df000304 	addi	fp,sp,12
 4003338:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 400333c:	e0bfff17 	ldw	r2,-4(fp)
 4003340:	10800717 	ldw	r2,28(r2)
 4003344:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 4003348:	e0bfff17 	ldw	r2,-4(fp)
 400334c:	10800317 	ldw	r2,12(r2)
 4003350:	10800204 	addi	r2,r2,8
 4003354:	10800037 	ldwio	r2,0(r2)
 4003358:	1080004c 	andi	r2,r2,1
 400335c:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 4003360:	e0bffe17 	ldw	r2,-8(fp)
 4003364:	10000226 	beq	r2,zero,4003370 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 4003368:	00bffe44 	movi	r2,-7
 400336c:	00001106 	br	40033b4 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 4003370:	e0bfff17 	ldw	r2,-4(fp)
 4003374:	10c00617 	ldw	r3,24(r2)
 4003378:	00810034 	movhi	r2,1024
 400337c:	108bec04 	addi	r2,r2,12208
 4003380:	1880021e 	bne	r3,r2,400338c <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 4003384:	e0bffd17 	ldw	r2,-12(fp)
 4003388:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 400338c:	e0bfff17 	ldw	r2,-4(fp)
 4003390:	10800317 	ldw	r2,12(r2)
 4003394:	10800204 	addi	r2,r2,8
 4003398:	e0ffff17 	ldw	r3,-4(fp)
 400339c:	18c00317 	ldw	r3,12(r3)
 40033a0:	18c00204 	addi	r3,r3,8
 40033a4:	18c00037 	ldwio	r3,0(r3)
 40033a8:	18c00054 	ori	r3,r3,1
 40033ac:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 40033b0:	0005883a 	mov	r2,zero
}
 40033b4:	e037883a 	mov	sp,fp
 40033b8:	df000017 	ldw	fp,0(sp)
 40033bc:	dec00104 	addi	sp,sp,4
 40033c0:	f800283a 	ret

040033c4 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 40033c4:	defffe04 	addi	sp,sp,-8
 40033c8:	df000115 	stw	fp,4(sp)
 40033cc:	df000104 	addi	fp,sp,4
 40033d0:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 40033d4:	e0bfff17 	ldw	r2,-4(fp)
 40033d8:	10800317 	ldw	r2,12(r2)
 40033dc:	10800204 	addi	r2,r2,8
 40033e0:	e0ffff17 	ldw	r3,-4(fp)
 40033e4:	18c00317 	ldw	r3,12(r3)
 40033e8:	18c00204 	addi	r3,r3,8
 40033ec:	19000037 	ldwio	r4,0(r3)
 40033f0:	00ffff84 	movi	r3,-2
 40033f4:	20c6703a 	and	r3,r4,r3
 40033f8:	10c00035 	stwio	r3,0(r2)

}
 40033fc:	0001883a 	nop
 4003400:	e037883a 	mov	sp,fp
 4003404:	df000017 	ldw	fp,0(sp)
 4003408:	dec00104 	addi	sp,sp,4
 400340c:	f800283a 	ret

04003410 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 4003410:	defffd04 	addi	sp,sp,-12
 4003414:	df000215 	stw	fp,8(sp)
 4003418:	df000204 	addi	fp,sp,8
 400341c:	e13ffe15 	stw	r4,-8(fp)
 4003420:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 4003424:	e0bffe17 	ldw	r2,-8(fp)
 4003428:	10c00d17 	ldw	r3,52(r2)
 400342c:	e0bfff17 	ldw	r2,-4(fp)
 4003430:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 4003434:	e0bffe17 	ldw	r2,-8(fp)
 4003438:	10800317 	ldw	r2,12(r2)
 400343c:	10800204 	addi	r2,r2,8
 4003440:	10800037 	ldwio	r2,0(r2)
 4003444:	1080008c 	andi	r2,r2,2
 4003448:	1005d07a 	srai	r2,r2,1
 400344c:	1007883a 	mov	r3,r2
 4003450:	e0bfff17 	ldw	r2,-4(fp)
 4003454:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 4003458:	e0bffe17 	ldw	r2,-8(fp)
 400345c:	10800317 	ldw	r2,12(r2)
 4003460:	10800904 	addi	r2,r2,36
 4003464:	10800037 	ldwio	r2,0(r2)
 4003468:	1007883a 	mov	r3,r2
 400346c:	e0bfff17 	ldw	r2,-4(fp)
 4003470:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 4003474:	e0bffe17 	ldw	r2,-8(fp)
 4003478:	10800317 	ldw	r2,12(r2)
 400347c:	10800804 	addi	r2,r2,32
 4003480:	10800037 	ldwio	r2,0(r2)
 4003484:	1007883a 	mov	r3,r2
 4003488:	e0bfff17 	ldw	r2,-4(fp)
 400348c:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 4003490:	e0bffe17 	ldw	r2,-8(fp)
 4003494:	10800317 	ldw	r2,12(r2)
 4003498:	10800a04 	addi	r2,r2,40
 400349c:	10800037 	ldwio	r2,0(r2)
 40034a0:	1007883a 	mov	r3,r2
 40034a4:	e0bfff17 	ldw	r2,-4(fp)
 40034a8:	10c0030d 	sth	r3,12(r2)
}
 40034ac:	0001883a 	nop
 40034b0:	e037883a 	mov	sp,fp
 40034b4:	df000017 	ldw	fp,0(sp)
 40034b8:	dec00104 	addi	sp,sp,4
 40034bc:	f800283a 	ret

040034c0 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 40034c0:	defffd04 	addi	sp,sp,-12
 40034c4:	df000215 	stw	fp,8(sp)
 40034c8:	df000204 	addi	fp,sp,8
 40034cc:	e13ffe15 	stw	r4,-8(fp)
 40034d0:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 40034d4:	e0bfff17 	ldw	r2,-4(fp)
 40034d8:	10c00017 	ldw	r3,0(r2)
 40034dc:	e0bffe17 	ldw	r2,-8(fp)
 40034e0:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 40034e4:	e0bffe17 	ldw	r2,-8(fp)
 40034e8:	10800317 	ldw	r2,12(r2)
 40034ec:	10c00204 	addi	r3,r2,8
 40034f0:	e0bffe17 	ldw	r2,-8(fp)
 40034f4:	10800317 	ldw	r2,12(r2)
 40034f8:	10800204 	addi	r2,r2,8
 40034fc:	10800037 	ldwio	r2,0(r2)
 4003500:	1009883a 	mov	r4,r2
 4003504:	00bfff44 	movi	r2,-3
 4003508:	2088703a 	and	r4,r4,r2
 400350c:	e0bfff17 	ldw	r2,-4(fp)
 4003510:	10800117 	ldw	r2,4(r2)
 4003514:	1085883a 	add	r2,r2,r2
 4003518:	1080008c 	andi	r2,r2,2
 400351c:	2084b03a 	or	r2,r4,r2
 4003520:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 4003524:	e0bffe17 	ldw	r2,-8(fp)
 4003528:	10800317 	ldw	r2,12(r2)
 400352c:	10800904 	addi	r2,r2,36
 4003530:	e0ffff17 	ldw	r3,-4(fp)
 4003534:	18c0020b 	ldhu	r3,8(r3)
 4003538:	18ffffcc 	andi	r3,r3,65535
 400353c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 4003540:	e0bffe17 	ldw	r2,-8(fp)
 4003544:	10800317 	ldw	r2,12(r2)
 4003548:	10800804 	addi	r2,r2,32
 400354c:	e0ffff17 	ldw	r3,-4(fp)
 4003550:	18c0028b 	ldhu	r3,10(r3)
 4003554:	18ffffcc 	andi	r3,r3,65535
 4003558:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 400355c:	e0bffe17 	ldw	r2,-8(fp)
 4003560:	10800317 	ldw	r2,12(r2)
 4003564:	10800a04 	addi	r2,r2,40
 4003568:	e0ffff17 	ldw	r3,-4(fp)
 400356c:	18c0030b 	ldhu	r3,12(r3)
 4003570:	18ffffcc 	andi	r3,r3,65535
 4003574:	10c00035 	stwio	r3,0(r2)
}
 4003578:	0001883a 	nop
 400357c:	e037883a 	mov	sp,fp
 4003580:	df000017 	ldw	fp,0(sp)
 4003584:	dec00104 	addi	sp,sp,4
 4003588:	f800283a 	ret

0400358c <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 400358c:	defffb04 	addi	sp,sp,-20
 4003590:	dfc00415 	stw	ra,16(sp)
 4003594:	df000315 	stw	fp,12(sp)
 4003598:	df000304 	addi	fp,sp,12
 400359c:	e13ffd15 	stw	r4,-12(fp)
 40035a0:	e17ffe15 	stw	r5,-8(fp)
 40035a4:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 40035a8:	e0bffe17 	ldw	r2,-8(fp)
 40035ac:	1080028b 	ldhu	r2,10(r2)
 40035b0:	10bfffcc 	andi	r2,r2,65535
 40035b4:	10000426 	beq	r2,zero,40035c8 <alt_avalon_i2c_master_config_speed_get+0x3c>
 40035b8:	e0bffe17 	ldw	r2,-8(fp)
 40035bc:	1080020b 	ldhu	r2,8(r2)
 40035c0:	10bfffcc 	andi	r2,r2,65535
 40035c4:	1000021e 	bne	r2,zero,40035d0 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 40035c8:	00bfff44 	movi	r2,-3
 40035cc:	00000f06 	br	400360c <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 40035d0:	e0bffd17 	ldw	r2,-12(fp)
 40035d4:	11000c17 	ldw	r4,48(r2)
 40035d8:	e0bffe17 	ldw	r2,-8(fp)
 40035dc:	1080028b 	ldhu	r2,10(r2)
 40035e0:	10ffffcc 	andi	r3,r2,65535
 40035e4:	e0bffe17 	ldw	r2,-8(fp)
 40035e8:	1080020b 	ldhu	r2,8(r2)
 40035ec:	10bfffcc 	andi	r2,r2,65535
 40035f0:	1885883a 	add	r2,r3,r2
 40035f4:	100b883a 	mov	r5,r2
 40035f8:	40004480 	call	4000448 <__udivsi3>
 40035fc:	1007883a 	mov	r3,r2
 4003600:	e0bfff17 	ldw	r2,-4(fp)
 4003604:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 4003608:	0005883a 	mov	r2,zero
}
 400360c:	e037883a 	mov	sp,fp
 4003610:	dfc00117 	ldw	ra,4(sp)
 4003614:	df000017 	ldw	fp,0(sp)
 4003618:	dec00204 	addi	sp,sp,8
 400361c:	f800283a 	ret

04003620 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 4003620:	defff904 	addi	sp,sp,-28
 4003624:	dfc00615 	stw	ra,24(sp)
 4003628:	df000515 	stw	fp,20(sp)
 400362c:	df000504 	addi	fp,sp,20
 4003630:	e13ffd15 	stw	r4,-12(fp)
 4003634:	e17ffe15 	stw	r5,-8(fp)
 4003638:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 400363c:	e0ffff17 	ldw	r3,-4(fp)
 4003640:	008001b4 	movhi	r2,6
 4003644:	1086a004 	addi	r2,r2,6784
 4003648:	10c00436 	bltu	r2,r3,400365c <alt_avalon_i2c_master_config_speed_set+0x3c>
 400364c:	e0bfff17 	ldw	r2,-4(fp)
 4003650:	10000226 	beq	r2,zero,400365c <alt_avalon_i2c_master_config_speed_set+0x3c>
 4003654:	e0bfff17 	ldw	r2,-4(fp)
 4003658:	1000021e 	bne	r2,zero,4003664 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 400365c:	00bfff04 	movi	r2,-4
 4003660:	00002906 	br	4003708 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 4003664:	e0bffd17 	ldw	r2,-12(fp)
 4003668:	10c00c17 	ldw	r3,48(r2)
 400366c:	e0bfff17 	ldw	r2,-4(fp)
 4003670:	1085883a 	add	r2,r2,r2
 4003674:	100b883a 	mov	r5,r2
 4003678:	1809883a 	mov	r4,r3
 400367c:	40004480 	call	4000448 <__udivsi3>
 4003680:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 4003684:	e0bffb17 	ldw	r2,-20(fp)
 4003688:	10800f04 	addi	r2,r2,60
 400368c:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 4003690:	e0bffb17 	ldw	r2,-20(fp)
 4003694:	10bff104 	addi	r2,r2,-60
 4003698:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 400369c:	e0ffff17 	ldw	r3,-4(fp)
 40036a0:	008000b4 	movhi	r2,2
 40036a4:	10a1a804 	addi	r2,r2,-31072
 40036a8:	10c0042e 	bgeu	r2,r3,40036bc <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 40036ac:	e0bffe17 	ldw	r2,-8(fp)
 40036b0:	00c00044 	movi	r3,1
 40036b4:	10c00115 	stw	r3,4(r2)
 40036b8:	00000206 	br	40036c4 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 40036bc:	e0bffe17 	ldw	r2,-8(fp)
 40036c0:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 40036c4:	e0bffb17 	ldw	r2,-20(fp)
 40036c8:	1007883a 	mov	r3,r2
 40036cc:	e0bffe17 	ldw	r2,-8(fp)
 40036d0:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 40036d4:	e0bffc17 	ldw	r2,-16(fp)
 40036d8:	1007883a 	mov	r3,r2
 40036dc:	e0bffe17 	ldw	r2,-8(fp)
 40036e0:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 40036e4:	e0bffb17 	ldw	r2,-20(fp)
 40036e8:	1007883a 	mov	r3,r2
 40036ec:	e0bffb17 	ldw	r2,-20(fp)
 40036f0:	1004d07a 	srli	r2,r2,1
 40036f4:	1885c83a 	sub	r2,r3,r2
 40036f8:	1007883a 	mov	r3,r2
 40036fc:	e0bffe17 	ldw	r2,-8(fp)
 4003700:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 4003704:	0005883a 	mov	r2,zero

}
 4003708:	e037883a 	mov	sp,fp
 400370c:	dfc00117 	ldw	ra,4(sp)
 4003710:	df000017 	ldw	fp,0(sp)
 4003714:	dec00204 	addi	sp,sp,8
 4003718:	f800283a 	ret

0400371c <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 400371c:	defffe04 	addi	sp,sp,-8
 4003720:	df000115 	stw	fp,4(sp)
 4003724:	df000104 	addi	fp,sp,4
 4003728:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 400372c:	e0bfff17 	ldw	r2,-4(fp)
 4003730:	10800317 	ldw	r2,12(r2)
 4003734:	10800504 	addi	r2,r2,20
 4003738:	10800037 	ldwio	r2,0(r2)
 400373c:	1080004c 	andi	r2,r2,1
 4003740:	10000226 	beq	r2,zero,400374c <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 4003744:	00800044 	movi	r2,1
 4003748:	00000106 	br	4003750 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 400374c:	0005883a 	mov	r2,zero
}
 4003750:	e037883a 	mov	sp,fp
 4003754:	df000017 	ldw	fp,0(sp)
 4003758:	dec00104 	addi	sp,sp,4
 400375c:	f800283a 	ret

04003760 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 4003760:	defffb04 	addi	sp,sp,-20
 4003764:	df000415 	stw	fp,16(sp)
 4003768:	df000404 	addi	fp,sp,16
 400376c:	e13ffc15 	stw	r4,-16(fp)
 4003770:	e17ffd15 	stw	r5,-12(fp)
 4003774:	e1bffe15 	stw	r6,-8(fp)
 4003778:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 400377c:	e0bfff17 	ldw	r2,-4(fp)
 4003780:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 4003784:	00001406 	br	40037d8 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 4003788:	e0bfff17 	ldw	r2,-4(fp)
 400378c:	10800017 	ldw	r2,0(r2)
 4003790:	e0fffd17 	ldw	r3,-12(fp)
 4003794:	1885883a 	add	r2,r3,r2
 4003798:	e0fffc17 	ldw	r3,-16(fp)
 400379c:	18c00317 	ldw	r3,12(r3)
 40037a0:	18c00104 	addi	r3,r3,4
 40037a4:	18c00037 	ldwio	r3,0(r3)
 40037a8:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 40037ac:	e0bfff17 	ldw	r2,-4(fp)
 40037b0:	10800017 	ldw	r2,0(r2)
 40037b4:	10c00044 	addi	r3,r2,1
 40037b8:	e0bfff17 	ldw	r2,-4(fp)
 40037bc:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 40037c0:	e0bfff17 	ldw	r2,-4(fp)
 40037c4:	10c00017 	ldw	r3,0(r2)
 40037c8:	e0bffe17 	ldw	r2,-8(fp)
 40037cc:	1880021e 	bne	r3,r2,40037d8 <alt_avalon_i2c_rx_read_available+0x78>
 40037d0:	e0bffe17 	ldw	r2,-8(fp)
 40037d4:	1000061e 	bne	r2,zero,40037f0 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 40037d8:	e0bffc17 	ldw	r2,-16(fp)
 40037dc:	10800317 	ldw	r2,12(r2)
 40037e0:	10800704 	addi	r2,r2,28
 40037e4:	10800037 	ldwio	r2,0(r2)
 40037e8:	103fe71e 	bne	r2,zero,4003788 <__alt_data_end+0xfc003788>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 40037ec:	00000106 	br	40037f4 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 40037f0:	0001883a 	nop
    }
}
 40037f4:	0001883a 	nop
 40037f8:	e037883a 	mov	sp,fp
 40037fc:	df000017 	ldw	fp,0(sp)
 4003800:	dec00104 	addi	sp,sp,4
 4003804:	f800283a 	ret

04003808 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 4003808:	defffa04 	addi	sp,sp,-24
 400380c:	dfc00515 	stw	ra,20(sp)
 4003810:	df000415 	stw	fp,16(sp)
 4003814:	df000404 	addi	fp,sp,16
 4003818:	e13ffe15 	stw	r4,-8(fp)
 400381c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 4003820:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 4003824:	008000b4 	movhi	r2,2
 4003828:	10a1a804 	addi	r2,r2,-31072
 400382c:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 4003830:	00000d06 	br	4003868 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 4003834:	e0bffd17 	ldw	r2,-12(fp)
 4003838:	108002a8 	cmpgeui	r2,r2,10
 400383c:	1000021e 	bne	r2,zero,4003848 <alt_avalon_i2c_rx_read+0x40>
 4003840:	0109c404 	movi	r4,10000
 4003844:	400614c0 	call	400614c <alt_busy_sleep>
      if (--timeout == 0)
 4003848:	e0bffd17 	ldw	r2,-12(fp)
 400384c:	10bfffc4 	addi	r2,r2,-1
 4003850:	e0bffd15 	stw	r2,-12(fp)
 4003854:	e0bffd17 	ldw	r2,-12(fp)
 4003858:	1000031e 	bne	r2,zero,4003868 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 400385c:	00bfff84 	movi	r2,-2
 4003860:	e0bffc15 	stw	r2,-16(fp)
        break;
 4003864:	00000506 	br	400387c <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 4003868:	e0bffe17 	ldw	r2,-8(fp)
 400386c:	10800317 	ldw	r2,12(r2)
 4003870:	10800704 	addi	r2,r2,28
 4003874:	10800037 	ldwio	r2,0(r2)
 4003878:	103fee26 	beq	r2,zero,4003834 <__alt_data_end+0xfc003834>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 400387c:	e0bffe17 	ldw	r2,-8(fp)
 4003880:	10800317 	ldw	r2,12(r2)
 4003884:	10800104 	addi	r2,r2,4
 4003888:	10800037 	ldwio	r2,0(r2)
 400388c:	1007883a 	mov	r3,r2
 4003890:	e0bfff17 	ldw	r2,-4(fp)
 4003894:	10c00005 	stb	r3,0(r2)
        
    return status;
 4003898:	e0bffc17 	ldw	r2,-16(fp)
}
 400389c:	e037883a 	mov	sp,fp
 40038a0:	dfc00117 	ldw	ra,4(sp)
 40038a4:	df000017 	ldw	fp,0(sp)
 40038a8:	dec00204 	addi	sp,sp,8
 40038ac:	f800283a 	ret

040038b0 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 40038b0:	defff804 	addi	sp,sp,-32
 40038b4:	dfc00715 	stw	ra,28(sp)
 40038b8:	df000615 	stw	fp,24(sp)
 40038bc:	df000604 	addi	fp,sp,24
 40038c0:	e13ffc15 	stw	r4,-16(fp)
 40038c4:	2809883a 	mov	r4,r5
 40038c8:	3007883a 	mov	r3,r6
 40038cc:	3805883a 	mov	r2,r7
 40038d0:	e13ffd05 	stb	r4,-12(fp)
 40038d4:	e0fffe05 	stb	r3,-8(fp)
 40038d8:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 40038dc:	0089c404 	movi	r2,10000
 40038e0:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 40038e4:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 40038e8:	00000c06 	br	400391c <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 40038ec:	e0bffa17 	ldw	r2,-24(fp)
 40038f0:	108002a8 	cmpgeui	r2,r2,10
 40038f4:	1000021e 	bne	r2,zero,4003900 <alt_avalon_i2c_cmd_write+0x50>
 40038f8:	0109c404 	movi	r4,10000
 40038fc:	400614c0 	call	400614c <alt_busy_sleep>
      if (--timeout == 0)
 4003900:	e0bffa17 	ldw	r2,-24(fp)
 4003904:	10bfffc4 	addi	r2,r2,-1
 4003908:	e0bffa15 	stw	r2,-24(fp)
 400390c:	e0bffa17 	ldw	r2,-24(fp)
 4003910:	1000021e 	bne	r2,zero,400391c <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 4003914:	00bfff84 	movi	r2,-2
 4003918:	00001906 	br	4003980 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 400391c:	e0bffc17 	ldw	r2,-16(fp)
 4003920:	10800317 	ldw	r2,12(r2)
 4003924:	10800404 	addi	r2,r2,16
 4003928:	10800037 	ldwio	r2,0(r2)
 400392c:	1080004c 	andi	r2,r2,1
 4003930:	103fee26 	beq	r2,zero,40038ec <__alt_data_end+0xfc0038ec>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 4003934:	e0bffc17 	ldw	r2,-16(fp)
 4003938:	10800317 	ldw	r2,12(r2)
 400393c:	e13ffd03 	ldbu	r4,-12(fp)
 4003940:	e0fffe03 	ldbu	r3,-8(fp)
 4003944:	1806927a 	slli	r3,r3,9
 4003948:	20c8b03a 	or	r4,r4,r3
 400394c:	e0ffff03 	ldbu	r3,-4(fp)
 4003950:	1806923a 	slli	r3,r3,8
 4003954:	20c6b03a 	or	r3,r4,r3
 4003958:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 400395c:	e0bffb04 	addi	r2,fp,-20
 4003960:	100b883a 	mov	r5,r2
 4003964:	e13ffc17 	ldw	r4,-16(fp)
 4003968:	4003af00 	call	4003af0 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 400396c:	e0bffb04 	addi	r2,fp,-20
 4003970:	100b883a 	mov	r5,r2
 4003974:	e13ffc17 	ldw	r4,-16(fp)
 4003978:	4003b3c0 	call	4003b3c <alt_avalon_i2c_check_arblost>
    
    return status;
 400397c:	e0bffb17 	ldw	r2,-20(fp)
}
 4003980:	e037883a 	mov	sp,fp
 4003984:	dfc00117 	ldw	ra,4(sp)
 4003988:	df000017 	ldw	fp,0(sp)
 400398c:	dec00204 	addi	sp,sp,8
 4003990:	f800283a 	ret

04003994 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 4003994:	defffa04 	addi	sp,sp,-24
 4003998:	dfc00515 	stw	ra,20(sp)
 400399c:	df000415 	stw	fp,16(sp)
 40039a0:	df000404 	addi	fp,sp,16
 40039a4:	e13ffd15 	stw	r4,-12(fp)
 40039a8:	e17ffe15 	stw	r5,-8(fp)
 40039ac:	3005883a 	mov	r2,r6
 40039b0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 40039b4:	e0bffd17 	ldw	r2,-12(fp)
 40039b8:	10800d17 	ldw	r2,52(r2)
 40039bc:	10800058 	cmpnei	r2,r2,1
 40039c0:	10001c1e 	bne	r2,zero,4003a34 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 40039c4:	e0bffd17 	ldw	r2,-12(fp)
 40039c8:	10800917 	ldw	r2,36(r2)
 40039cc:	109e0014 	ori	r2,r2,30720
 40039d0:	1004d1fa 	srli	r2,r2,7
 40039d4:	1007883a 	mov	r3,r2
 40039d8:	00bfff84 	movi	r2,-2
 40039dc:	1884703a 	and	r2,r3,r2
 40039e0:	1007883a 	mov	r3,r2
 40039e4:	e0bffe17 	ldw	r2,-8(fp)
 40039e8:	1884b03a 	or	r2,r3,r2
 40039ec:	10803fcc 	andi	r2,r2,255
 40039f0:	e0ffff03 	ldbu	r3,-4(fp)
 40039f4:	000f883a 	mov	r7,zero
 40039f8:	180d883a 	mov	r6,r3
 40039fc:	100b883a 	mov	r5,r2
 4003a00:	e13ffd17 	ldw	r4,-12(fp)
 4003a04:	40038b00 	call	40038b0 <alt_avalon_i2c_cmd_write>
 4003a08:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 4003a0c:	e0bffd17 	ldw	r2,-12(fp)
 4003a10:	10800917 	ldw	r2,36(r2)
 4003a14:	10803fcc 	andi	r2,r2,255
 4003a18:	000f883a 	mov	r7,zero
 4003a1c:	000d883a 	mov	r6,zero
 4003a20:	100b883a 	mov	r5,r2
 4003a24:	e13ffd17 	ldw	r4,-12(fp)
 4003a28:	40038b00 	call	40038b0 <alt_avalon_i2c_cmd_write>
 4003a2c:	e0bffc15 	stw	r2,-16(fp)
 4003a30:	00000e06 	br	4003a6c <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 4003a34:	e0bffd17 	ldw	r2,-12(fp)
 4003a38:	10800917 	ldw	r2,36(r2)
 4003a3c:	1085883a 	add	r2,r2,r2
 4003a40:	1007883a 	mov	r3,r2
 4003a44:	e0bffe17 	ldw	r2,-8(fp)
 4003a48:	1884b03a 	or	r2,r3,r2
 4003a4c:	10803fcc 	andi	r2,r2,255
 4003a50:	e0ffff03 	ldbu	r3,-4(fp)
 4003a54:	000f883a 	mov	r7,zero
 4003a58:	180d883a 	mov	r6,r3
 4003a5c:	100b883a 	mov	r5,r2
 4003a60:	e13ffd17 	ldw	r4,-12(fp)
 4003a64:	40038b00 	call	40038b0 <alt_avalon_i2c_cmd_write>
 4003a68:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 4003a6c:	e0bffc17 	ldw	r2,-16(fp)
}
 4003a70:	e037883a 	mov	sp,fp
 4003a74:	dfc00117 	ldw	ra,4(sp)
 4003a78:	df000017 	ldw	fp,0(sp)
 4003a7c:	dec00204 	addi	sp,sp,8
 4003a80:	f800283a 	ret

04003a84 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 4003a84:	defffd04 	addi	sp,sp,-12
 4003a88:	df000215 	stw	fp,8(sp)
 4003a8c:	df000204 	addi	fp,sp,8
 4003a90:	e13ffe15 	stw	r4,-8(fp)
 4003a94:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 4003a98:	e0bffe17 	ldw	r2,-8(fp)
 4003a9c:	10c00917 	ldw	r3,36(r2)
 4003aa0:	e0bfff17 	ldw	r2,-4(fp)
 4003aa4:	10c00015 	stw	r3,0(r2)
}
 4003aa8:	0001883a 	nop
 4003aac:	e037883a 	mov	sp,fp
 4003ab0:	df000017 	ldw	fp,0(sp)
 4003ab4:	dec00104 	addi	sp,sp,4
 4003ab8:	f800283a 	ret

04003abc <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 4003abc:	defffd04 	addi	sp,sp,-12
 4003ac0:	df000215 	stw	fp,8(sp)
 4003ac4:	df000204 	addi	fp,sp,8
 4003ac8:	e13ffe15 	stw	r4,-8(fp)
 4003acc:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 4003ad0:	e0bffe17 	ldw	r2,-8(fp)
 4003ad4:	e0ffff17 	ldw	r3,-4(fp)
 4003ad8:	10c00915 	stw	r3,36(r2)
}
 4003adc:	0001883a 	nop
 4003ae0:	e037883a 	mov	sp,fp
 4003ae4:	df000017 	ldw	fp,0(sp)
 4003ae8:	dec00104 	addi	sp,sp,4
 4003aec:	f800283a 	ret

04003af0 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 4003af0:	defffd04 	addi	sp,sp,-12
 4003af4:	df000215 	stw	fp,8(sp)
 4003af8:	df000204 	addi	fp,sp,8
 4003afc:	e13ffe15 	stw	r4,-8(fp)
 4003b00:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 4003b04:	e0bffe17 	ldw	r2,-8(fp)
 4003b08:	10800317 	ldw	r2,12(r2)
 4003b0c:	10800404 	addi	r2,r2,16
 4003b10:	10800037 	ldwio	r2,0(r2)
 4003b14:	1080010c 	andi	r2,r2,4
 4003b18:	10000326 	beq	r2,zero,4003b28 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 4003b1c:	e0bfff17 	ldw	r2,-4(fp)
 4003b20:	00fffec4 	movi	r3,-5
 4003b24:	10c00015 	stw	r3,0(r2)
    }
}
 4003b28:	0001883a 	nop
 4003b2c:	e037883a 	mov	sp,fp
 4003b30:	df000017 	ldw	fp,0(sp)
 4003b34:	dec00104 	addi	sp,sp,4
 4003b38:	f800283a 	ret

04003b3c <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 4003b3c:	defffd04 	addi	sp,sp,-12
 4003b40:	df000215 	stw	fp,8(sp)
 4003b44:	df000204 	addi	fp,sp,8
 4003b48:	e13ffe15 	stw	r4,-8(fp)
 4003b4c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 4003b50:	e0bffe17 	ldw	r2,-8(fp)
 4003b54:	10800317 	ldw	r2,12(r2)
 4003b58:	10800404 	addi	r2,r2,16
 4003b5c:	10800037 	ldwio	r2,0(r2)
 4003b60:	1080020c 	andi	r2,r2,8
 4003b64:	10000326 	beq	r2,zero,4003b74 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 4003b68:	e0bfff17 	ldw	r2,-4(fp)
 4003b6c:	00fffe84 	movi	r3,-6
 4003b70:	10c00015 	stw	r3,0(r2)
    }
}
 4003b74:	0001883a 	nop
 4003b78:	e037883a 	mov	sp,fp
 4003b7c:	df000017 	ldw	fp,0(sp)
 4003b80:	dec00104 	addi	sp,sp,4
 4003b84:	f800283a 	ret

04003b88 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 4003b88:	defff804 	addi	sp,sp,-32
 4003b8c:	dfc00715 	stw	ra,28(sp)
 4003b90:	df000615 	stw	fp,24(sp)
 4003b94:	df000604 	addi	fp,sp,24
 4003b98:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4003b9c:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 4003ba0:	e0bfff17 	ldw	r2,-4(fp)
 4003ba4:	10800717 	ldw	r2,28(r2)
 4003ba8:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 4003bac:	e0bffb17 	ldw	r2,-20(fp)
 4003bb0:	10800117 	ldw	r2,4(r2)
 4003bb4:	10800044 	addi	r2,r2,1
 4003bb8:	0149c404 	movi	r5,10000
 4003bbc:	1009883a 	mov	r4,r2
 4003bc0:	40024f40 	call	40024f4 <__mulsi3>
 4003bc4:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 4003bc8:	e0bffd04 	addi	r2,fp,-12
 4003bcc:	100b883a 	mov	r5,r2
 4003bd0:	e13fff17 	ldw	r4,-4(fp)
 4003bd4:	4004a200 	call	4004a20 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 4003bd8:	e0bffd17 	ldw	r2,-12(fp)
 4003bdc:	100b883a 	mov	r5,r2
 4003be0:	e13fff17 	ldw	r4,-4(fp)
 4003be4:	40049540 	call	4004954 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 4003be8:	e0bffc04 	addi	r2,fp,-16
 4003bec:	100b883a 	mov	r5,r2
 4003bf0:	e13fff17 	ldw	r4,-4(fp)
 4003bf4:	4003af00 	call	4003af0 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 4003bf8:	e0bffc17 	ldw	r2,-16(fp)
 4003bfc:	10002226 	beq	r2,zero,4003c88 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 4003c00:	e0bffb17 	ldw	r2,-20(fp)
 4003c04:	10800217 	ldw	r2,8(r2)
 4003c08:	10001d26 	beq	r2,zero,4003c80 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4003c0c:	00000d06 	br	4003c44 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 4003c10:	e0bffa17 	ldw	r2,-24(fp)
 4003c14:	108002a8 	cmpgeui	r2,r2,10
 4003c18:	1000021e 	bne	r2,zero,4003c24 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 4003c1c:	0109c404 	movi	r4,10000
 4003c20:	400614c0 	call	400614c <alt_busy_sleep>
              if (--timeout == 0)
 4003c24:	e0bffa17 	ldw	r2,-24(fp)
 4003c28:	10bfffc4 	addi	r2,r2,-1
 4003c2c:	e0bffa15 	stw	r2,-24(fp)
 4003c30:	e0bffa17 	ldw	r2,-24(fp)
 4003c34:	1000031e 	bne	r2,zero,4003c44 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 4003c38:	00bfff84 	movi	r2,-2
 4003c3c:	e0bffc15 	stw	r2,-16(fp)
                 break;
 4003c40:	00000306 	br	4003c50 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4003c44:	e13fff17 	ldw	r4,-4(fp)
 4003c48:	400371c0 	call	400371c <alt_avalon_i2c_is_busy>
 4003c4c:	103ff01e 	bne	r2,zero,4003c10 <__alt_data_end+0xfc003c10>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 4003c50:	e0bffb17 	ldw	r2,-20(fp)
 4003c54:	10800017 	ldw	r2,0(r2)
 4003c58:	e0fffe04 	addi	r3,fp,-8
 4003c5c:	180f883a 	mov	r7,r3
 4003c60:	000d883a 	mov	r6,zero
 4003c64:	100b883a 	mov	r5,r2
 4003c68:	e13fff17 	ldw	r4,-4(fp)
 4003c6c:	40037600 	call	4003760 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 4003c70:	e13fff17 	ldw	r4,-4(fp)
 4003c74:	40033c40 	call	40033c4 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 4003c78:	e0bffb17 	ldw	r2,-20(fp)
 4003c7c:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 4003c80:	e0bffc17 	ldw	r2,-16(fp)
 4003c84:	00000a06 	br	4003cb0 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 4003c88:	e0bffb17 	ldw	r2,-20(fp)
 4003c8c:	10800217 	ldw	r2,8(r2)
 4003c90:	10000626 	beq	r2,zero,4003cac <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 4003c94:	e0bffd17 	ldw	r2,-12(fp)
 4003c98:	100b883a 	mov	r5,r2
 4003c9c:	e13fff17 	ldw	r4,-4(fp)
 4003ca0:	40049bc0 	call	40049bc <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 4003ca4:	00bffe44 	movi	r2,-7
 4003ca8:	00000106 	br	4003cb0 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 4003cac:	0005883a 	mov	r2,zero
}
 4003cb0:	e037883a 	mov	sp,fp
 4003cb4:	dfc00117 	ldw	ra,4(sp)
 4003cb8:	df000017 	ldw	fp,0(sp)
 4003cbc:	dec00204 	addi	sp,sp,8
 4003cc0:	f800283a 	ret

04003cc4 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 4003cc4:	defff704 	addi	sp,sp,-36
 4003cc8:	dfc00815 	stw	ra,32(sp)
 4003ccc:	df000715 	stw	fp,28(sp)
 4003cd0:	df000704 	addi	fp,sp,28
 4003cd4:	e13ffc15 	stw	r4,-16(fp)
 4003cd8:	e17ffd15 	stw	r5,-12(fp)
 4003cdc:	e1bffe15 	stw	r6,-8(fp)
 4003ce0:	3805883a 	mov	r2,r7
 4003ce4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 4003ce8:	0089c404 	movi	r2,10000
 4003cec:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 4003cf0:	00002206 	br	4003d7c <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 4003cf4:	e0bffb17 	ldw	r2,-20(fp)
 4003cf8:	108002a8 	cmpgeui	r2,r2,10
 4003cfc:	1000021e 	bne	r2,zero,4003d08 <alt_avalon_i2c_master_tx+0x44>
 4003d00:	0109c404 	movi	r4,10000
 4003d04:	400614c0 	call	400614c <alt_busy_sleep>
      if (use_interrupts)
 4003d08:	e0bfff03 	ldbu	r2,-4(fp)
 4003d0c:	10000926 	beq	r2,zero,4003d34 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 4003d10:	00800044 	movi	r2,1
 4003d14:	d8800015 	stw	r2,0(sp)
 4003d18:	000f883a 	mov	r7,zero
 4003d1c:	e1bffe17 	ldw	r6,-8(fp)
 4003d20:	e17ffd17 	ldw	r5,-12(fp)
 4003d24:	e13ffc17 	ldw	r4,-16(fp)
 4003d28:	40042700 	call	4004270 <alt_avalon_i2c_master_transmit_using_interrupts>
 4003d2c:	e0bffa15 	stw	r2,-24(fp)
 4003d30:	00000806 	br	4003d54 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 4003d34:	00800044 	movi	r2,1
 4003d38:	d8800015 	stw	r2,0(sp)
 4003d3c:	000f883a 	mov	r7,zero
 4003d40:	e1bffe17 	ldw	r6,-8(fp)
 4003d44:	e17ffd17 	ldw	r5,-12(fp)
 4003d48:	e13ffc17 	ldw	r4,-16(fp)
 4003d4c:	40040b00 	call	40040b0 <alt_avalon_i2c_master_transmit>
 4003d50:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4003d54:	e0bffa17 	ldw	r2,-24(fp)
 4003d58:	10bffea0 	cmpeqi	r2,r2,-6
 4003d5c:	1000061e 	bne	r2,zero,4003d78 <alt_avalon_i2c_master_tx+0xb4>
 4003d60:	e0bffa17 	ldw	r2,-24(fp)
 4003d64:	10bffee0 	cmpeqi	r2,r2,-5
 4003d68:	1000031e 	bne	r2,zero,4003d78 <alt_avalon_i2c_master_tx+0xb4>
 4003d6c:	e0bffa17 	ldw	r2,-24(fp)
 4003d70:	10bffe58 	cmpnei	r2,r2,-7
 4003d74:	1000061e 	bne	r2,zero,4003d90 <alt_avalon_i2c_master_tx+0xcc>
 4003d78:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 4003d7c:	e0bffb17 	ldw	r2,-20(fp)
 4003d80:	10ffffc4 	addi	r3,r2,-1
 4003d84:	e0fffb15 	stw	r3,-20(fp)
 4003d88:	103fda1e 	bne	r2,zero,4003cf4 <__alt_data_end+0xfc003cf4>
 4003d8c:	00000106 	br	4003d94 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 4003d90:	0001883a 	nop
    }

    return status;
 4003d94:	e0bffa17 	ldw	r2,-24(fp)
}        
 4003d98:	e037883a 	mov	sp,fp
 4003d9c:	dfc00117 	ldw	ra,4(sp)
 4003da0:	df000017 	ldw	fp,0(sp)
 4003da4:	dec00204 	addi	sp,sp,8
 4003da8:	f800283a 	ret

04003dac <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 4003dac:	defff704 	addi	sp,sp,-36
 4003db0:	dfc00815 	stw	ra,32(sp)
 4003db4:	df000715 	stw	fp,28(sp)
 4003db8:	df000704 	addi	fp,sp,28
 4003dbc:	e13ffc15 	stw	r4,-16(fp)
 4003dc0:	e17ffd15 	stw	r5,-12(fp)
 4003dc4:	e1bffe15 	stw	r6,-8(fp)
 4003dc8:	3805883a 	mov	r2,r7
 4003dcc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 4003dd0:	0089c404 	movi	r2,10000
 4003dd4:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 4003dd8:	e0bfff03 	ldbu	r2,-4(fp)
 4003ddc:	10003426 	beq	r2,zero,4003eb0 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 4003de0:	00001706 	br	4003e40 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 4003de4:	e0bffb17 	ldw	r2,-20(fp)
 4003de8:	108002a8 	cmpgeui	r2,r2,10
 4003dec:	1000021e 	bne	r2,zero,4003df8 <alt_avalon_i2c_master_rx+0x4c>
 4003df0:	0109c404 	movi	r4,10000
 4003df4:	400614c0 	call	400614c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 4003df8:	00800044 	movi	r2,1
 4003dfc:	d8800015 	stw	r2,0(sp)
 4003e00:	000f883a 	mov	r7,zero
 4003e04:	e1bffe17 	ldw	r6,-8(fp)
 4003e08:	e17ffd17 	ldw	r5,-12(fp)
 4003e0c:	e13ffc17 	ldw	r4,-16(fp)
 4003e10:	400468c0 	call	400468c <alt_avalon_i2c_master_receive_using_interrupts>
 4003e14:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4003e18:	e0bffa17 	ldw	r2,-24(fp)
 4003e1c:	10bffea0 	cmpeqi	r2,r2,-6
 4003e20:	1000061e 	bne	r2,zero,4003e3c <alt_avalon_i2c_master_rx+0x90>
 4003e24:	e0bffa17 	ldw	r2,-24(fp)
 4003e28:	10bffee0 	cmpeqi	r2,r2,-5
 4003e2c:	1000031e 	bne	r2,zero,4003e3c <alt_avalon_i2c_master_rx+0x90>
 4003e30:	e0bffa17 	ldw	r2,-24(fp)
 4003e34:	10bffe58 	cmpnei	r2,r2,-7
 4003e38:	1000221e 	bne	r2,zero,4003ec4 <alt_avalon_i2c_master_rx+0x118>
 4003e3c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 4003e40:	e0bffb17 	ldw	r2,-20(fp)
 4003e44:	10ffffc4 	addi	r3,r2,-1
 4003e48:	e0fffb15 	stw	r3,-20(fp)
 4003e4c:	103fe51e 	bne	r2,zero,4003de4 <__alt_data_end+0xfc003de4>
 4003e50:	00001f06 	br	4003ed0 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 4003e54:	e0bffb17 	ldw	r2,-20(fp)
 4003e58:	108002a8 	cmpgeui	r2,r2,10
 4003e5c:	1000021e 	bne	r2,zero,4003e68 <alt_avalon_i2c_master_rx+0xbc>
 4003e60:	0109c404 	movi	r4,10000
 4003e64:	400614c0 	call	400614c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 4003e68:	00800044 	movi	r2,1
 4003e6c:	d8800015 	stw	r2,0(sp)
 4003e70:	000f883a 	mov	r7,zero
 4003e74:	e1bffe17 	ldw	r6,-8(fp)
 4003e78:	e17ffd17 	ldw	r5,-12(fp)
 4003e7c:	e13ffc17 	ldw	r4,-16(fp)
 4003e80:	400447c0 	call	400447c <alt_avalon_i2c_master_receive>
 4003e84:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4003e88:	e0bffa17 	ldw	r2,-24(fp)
 4003e8c:	10bffea0 	cmpeqi	r2,r2,-6
 4003e90:	1000061e 	bne	r2,zero,4003eac <alt_avalon_i2c_master_rx+0x100>
 4003e94:	e0bffa17 	ldw	r2,-24(fp)
 4003e98:	10bffee0 	cmpeqi	r2,r2,-5
 4003e9c:	1000031e 	bne	r2,zero,4003eac <alt_avalon_i2c_master_rx+0x100>
 4003ea0:	e0bffa17 	ldw	r2,-24(fp)
 4003ea4:	10bffe58 	cmpnei	r2,r2,-7
 4003ea8:	1000081e 	bne	r2,zero,4003ecc <alt_avalon_i2c_master_rx+0x120>
 4003eac:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 4003eb0:	e0bffb17 	ldw	r2,-20(fp)
 4003eb4:	10ffffc4 	addi	r3,r2,-1
 4003eb8:	e0fffb15 	stw	r3,-20(fp)
 4003ebc:	103fe51e 	bne	r2,zero,4003e54 <__alt_data_end+0xfc003e54>
 4003ec0:	00000306 	br	4003ed0 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 4003ec4:	0001883a 	nop
 4003ec8:	00000106 	br	4003ed0 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 4003ecc:	0001883a 	nop
      }
    }
    
    return status;
 4003ed0:	e0bffa17 	ldw	r2,-24(fp)
}        
 4003ed4:	e037883a 	mov	sp,fp
 4003ed8:	dfc00117 	ldw	ra,4(sp)
 4003edc:	df000017 	ldw	fp,0(sp)
 4003ee0:	dec00204 	addi	sp,sp,8
 4003ee4:	f800283a 	ret

04003ee8 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 4003ee8:	defff604 	addi	sp,sp,-40
 4003eec:	dfc00915 	stw	ra,36(sp)
 4003ef0:	df000815 	stw	fp,32(sp)
 4003ef4:	df000804 	addi	fp,sp,32
 4003ef8:	e13ffb15 	stw	r4,-20(fp)
 4003efc:	e17ffc15 	stw	r5,-16(fp)
 4003f00:	e1bffd15 	stw	r6,-12(fp)
 4003f04:	e1fffe15 	stw	r7,-8(fp)
 4003f08:	e0800317 	ldw	r2,12(fp)
 4003f0c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 4003f10:	0089c404 	movi	r2,10000
 4003f14:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 4003f18:	e0bfff03 	ldbu	r2,-4(fp)
 4003f1c:	10005626 	beq	r2,zero,4004078 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 4003f20:	00002806 	br	4003fc4 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 4003f24:	e0bffa17 	ldw	r2,-24(fp)
 4003f28:	108002a8 	cmpgeui	r2,r2,10
 4003f2c:	1000021e 	bne	r2,zero,4003f38 <alt_avalon_i2c_master_tx_rx+0x50>
 4003f30:	0109c404 	movi	r4,10000
 4003f34:	400614c0 	call	400614c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 4003f38:	d8000015 	stw	zero,0(sp)
 4003f3c:	000f883a 	mov	r7,zero
 4003f40:	e1bffd17 	ldw	r6,-12(fp)
 4003f44:	e17ffc17 	ldw	r5,-16(fp)
 4003f48:	e13ffb17 	ldw	r4,-20(fp)
 4003f4c:	40042700 	call	4004270 <alt_avalon_i2c_master_transmit_using_interrupts>
 4003f50:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4003f54:	e0bff917 	ldw	r2,-28(fp)
 4003f58:	10bffea0 	cmpeqi	r2,r2,-6
 4003f5c:	1000191e 	bne	r2,zero,4003fc4 <alt_avalon_i2c_master_tx_rx+0xdc>
 4003f60:	e0bff917 	ldw	r2,-28(fp)
 4003f64:	10bffee0 	cmpeqi	r2,r2,-5
 4003f68:	1000161e 	bne	r2,zero,4003fc4 <alt_avalon_i2c_master_tx_rx+0xdc>
 4003f6c:	e0bff917 	ldw	r2,-28(fp)
 4003f70:	10bffe58 	cmpnei	r2,r2,-7
 4003f74:	1000011e 	bne	r2,zero,4003f7c <alt_avalon_i2c_master_tx_rx+0x94>
 4003f78:	00001206 	br	4003fc4 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 4003f7c:	00800044 	movi	r2,1
 4003f80:	d8800015 	stw	r2,0(sp)
 4003f84:	01c00044 	movi	r7,1
 4003f88:	e1800217 	ldw	r6,8(fp)
 4003f8c:	e17ffe17 	ldw	r5,-8(fp)
 4003f90:	e13ffb17 	ldw	r4,-20(fp)
 4003f94:	400468c0 	call	400468c <alt_avalon_i2c_master_receive_using_interrupts>
 4003f98:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4003f9c:	e0bff917 	ldw	r2,-28(fp)
 4003fa0:	10bffea0 	cmpeqi	r2,r2,-6
 4003fa4:	1000061e 	bne	r2,zero,4003fc0 <alt_avalon_i2c_master_tx_rx+0xd8>
 4003fa8:	e0bff917 	ldw	r2,-28(fp)
 4003fac:	10bffee0 	cmpeqi	r2,r2,-5
 4003fb0:	1000031e 	bne	r2,zero,4003fc0 <alt_avalon_i2c_master_tx_rx+0xd8>
 4003fb4:	e0bff917 	ldw	r2,-28(fp)
 4003fb8:	10bffe58 	cmpnei	r2,r2,-7
 4003fbc:	1000331e 	bne	r2,zero,400408c <alt_avalon_i2c_master_tx_rx+0x1a4>
 4003fc0:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 4003fc4:	e0bffa17 	ldw	r2,-24(fp)
 4003fc8:	10ffffc4 	addi	r3,r2,-1
 4003fcc:	e0fffa15 	stw	r3,-24(fp)
 4003fd0:	103fd41e 	bne	r2,zero,4003f24 <__alt_data_end+0xfc003f24>
 4003fd4:	00003006 	br	4004098 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 4003fd8:	e0bffa17 	ldw	r2,-24(fp)
 4003fdc:	108002a8 	cmpgeui	r2,r2,10
 4003fe0:	1000021e 	bne	r2,zero,4003fec <alt_avalon_i2c_master_tx_rx+0x104>
 4003fe4:	0109c404 	movi	r4,10000
 4003fe8:	400614c0 	call	400614c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 4003fec:	d8000015 	stw	zero,0(sp)
 4003ff0:	000f883a 	mov	r7,zero
 4003ff4:	e1bffd17 	ldw	r6,-12(fp)
 4003ff8:	e17ffc17 	ldw	r5,-16(fp)
 4003ffc:	e13ffb17 	ldw	r4,-20(fp)
 4004000:	40040b00 	call	40040b0 <alt_avalon_i2c_master_transmit>
 4004004:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4004008:	e0bff917 	ldw	r2,-28(fp)
 400400c:	10bffea0 	cmpeqi	r2,r2,-6
 4004010:	1000191e 	bne	r2,zero,4004078 <alt_avalon_i2c_master_tx_rx+0x190>
 4004014:	e0bff917 	ldw	r2,-28(fp)
 4004018:	10bffee0 	cmpeqi	r2,r2,-5
 400401c:	1000161e 	bne	r2,zero,4004078 <alt_avalon_i2c_master_tx_rx+0x190>
 4004020:	e0bff917 	ldw	r2,-28(fp)
 4004024:	10bffe58 	cmpnei	r2,r2,-7
 4004028:	1000011e 	bne	r2,zero,4004030 <alt_avalon_i2c_master_tx_rx+0x148>
 400402c:	00001206 	br	4004078 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 4004030:	00800044 	movi	r2,1
 4004034:	d8800015 	stw	r2,0(sp)
 4004038:	01c00044 	movi	r7,1
 400403c:	e1800217 	ldw	r6,8(fp)
 4004040:	e17ffe17 	ldw	r5,-8(fp)
 4004044:	e13ffb17 	ldw	r4,-20(fp)
 4004048:	400447c0 	call	400447c <alt_avalon_i2c_master_receive>
 400404c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4004050:	e0bff917 	ldw	r2,-28(fp)
 4004054:	10bffea0 	cmpeqi	r2,r2,-6
 4004058:	1000061e 	bne	r2,zero,4004074 <alt_avalon_i2c_master_tx_rx+0x18c>
 400405c:	e0bff917 	ldw	r2,-28(fp)
 4004060:	10bffee0 	cmpeqi	r2,r2,-5
 4004064:	1000031e 	bne	r2,zero,4004074 <alt_avalon_i2c_master_tx_rx+0x18c>
 4004068:	e0bff917 	ldw	r2,-28(fp)
 400406c:	10bffe58 	cmpnei	r2,r2,-7
 4004070:	1000081e 	bne	r2,zero,4004094 <alt_avalon_i2c_master_tx_rx+0x1ac>
 4004074:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 4004078:	e0bffa17 	ldw	r2,-24(fp)
 400407c:	10ffffc4 	addi	r3,r2,-1
 4004080:	e0fffa15 	stw	r3,-24(fp)
 4004084:	103fd41e 	bne	r2,zero,4003fd8 <__alt_data_end+0xfc003fd8>
 4004088:	00000306 	br	4004098 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 400408c:	0001883a 	nop
 4004090:	00000106 	br	4004098 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 4004094:	0001883a 	nop
      }
    }
    
    return status;
 4004098:	e0bff917 	ldw	r2,-28(fp)
}                                       
 400409c:	e037883a 	mov	sp,fp
 40040a0:	dfc00117 	ldw	ra,4(sp)
 40040a4:	df000017 	ldw	fp,0(sp)
 40040a8:	dec00204 	addi	sp,sp,8
 40040ac:	f800283a 	ret

040040b0 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 40040b0:	defff704 	addi	sp,sp,-36
 40040b4:	dfc00815 	stw	ra,32(sp)
 40040b8:	df000715 	stw	fp,28(sp)
 40040bc:	df000704 	addi	fp,sp,28
 40040c0:	e13ffb15 	stw	r4,-20(fp)
 40040c4:	e17ffc15 	stw	r5,-16(fp)
 40040c8:	e1bffd15 	stw	r6,-12(fp)
 40040cc:	3807883a 	mov	r3,r7
 40040d0:	e0800217 	ldw	r2,8(fp)
 40040d4:	e0fffe05 	stb	r3,-8(fp)
 40040d8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 40040dc:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 40040e0:	0149c404 	movi	r5,10000
 40040e4:	e13ffd17 	ldw	r4,-12(fp)
 40040e8:	40024f40 	call	40024f4 <__mulsi3>
 40040ec:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 40040f0:	e0bffd17 	ldw	r2,-12(fp)
 40040f4:	1000021e 	bne	r2,zero,4004100 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 40040f8:	0005883a 	mov	r2,zero
 40040fc:	00005706 	br	400425c <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4004100:	e0bffe03 	ldbu	r2,-8(fp)
 4004104:	10000a1e 	bne	r2,zero,4004130 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4004108:	e13ffb17 	ldw	r4,-20(fp)
 400410c:	400332c0 	call	400332c <alt_avalon_i2c_enable>
 4004110:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 4004114:	e0bffa17 	ldw	r2,-24(fp)
 4004118:	10000226 	beq	r2,zero,4004124 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 400411c:	e0bffa17 	ldw	r2,-24(fp)
 4004120:	00004e06 	br	400425c <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4004124:	01400704 	movi	r5,28
 4004128:	e13ffb17 	ldw	r4,-20(fp)
 400412c:	40049180 	call	4004918 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 4004130:	e0bffe03 	ldbu	r2,-8(fp)
 4004134:	100d883a 	mov	r6,r2
 4004138:	000b883a 	mov	r5,zero
 400413c:	e13ffb17 	ldw	r4,-20(fp)
 4004140:	40039940 	call	4003994 <alt_avalon_i2c_send_address>
 4004144:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 4004148:	e0bffa17 	ldw	r2,-24(fp)
 400414c:	1000271e 	bne	r2,zero,40041ec <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4004150:	00000f06 	br	4004190 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4004154:	e0bffc17 	ldw	r2,-16(fp)
 4004158:	10800003 	ldbu	r2,0(r2)
 400415c:	10803fcc 	andi	r2,r2,255
 4004160:	000f883a 	mov	r7,zero
 4004164:	000d883a 	mov	r6,zero
 4004168:	100b883a 	mov	r5,r2
 400416c:	e13ffb17 	ldw	r4,-20(fp)
 4004170:	40038b00 	call	40038b0 <alt_avalon_i2c_cmd_write>
 4004174:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 4004178:	e0bffc17 	ldw	r2,-16(fp)
 400417c:	10800044 	addi	r2,r2,1
 4004180:	e0bffc15 	stw	r2,-16(fp)
            --size;
 4004184:	e0bffd17 	ldw	r2,-12(fp)
 4004188:	10bfffc4 	addi	r2,r2,-1
 400418c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4004190:	e0bffd17 	ldw	r2,-12(fp)
 4004194:	108000b0 	cmpltui	r2,r2,2
 4004198:	1000021e 	bne	r2,zero,40041a4 <alt_avalon_i2c_master_transmit+0xf4>
 400419c:	e0bffa17 	ldw	r2,-24(fp)
 40041a0:	103fec26 	beq	r2,zero,4004154 <__alt_data_end+0xfc004154>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 40041a4:	e0bffa17 	ldw	r2,-24(fp)
 40041a8:	1000101e 	bne	r2,zero,40041ec <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 40041ac:	e0bffc17 	ldw	r2,-16(fp)
 40041b0:	10800003 	ldbu	r2,0(r2)
 40041b4:	10803fcc 	andi	r2,r2,255
 40041b8:	e0ffff03 	ldbu	r3,-4(fp)
 40041bc:	180f883a 	mov	r7,r3
 40041c0:	000d883a 	mov	r6,zero
 40041c4:	100b883a 	mov	r5,r2
 40041c8:	e13ffb17 	ldw	r4,-20(fp)
 40041cc:	40038b00 	call	40038b0 <alt_avalon_i2c_cmd_write>
 40041d0:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 40041d4:	e0bffc17 	ldw	r2,-16(fp)
 40041d8:	10800044 	addi	r2,r2,1
 40041dc:	e0bffc15 	stw	r2,-16(fp)
            --size;
 40041e0:	e0bffd17 	ldw	r2,-12(fp)
 40041e4:	10bfffc4 	addi	r2,r2,-1
 40041e8:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 40041ec:	e0bfff03 	ldbu	r2,-4(fp)
 40041f0:	1000101e 	bne	r2,zero,4004234 <alt_avalon_i2c_master_transmit+0x184>
 40041f4:	e0bffa17 	ldw	r2,-24(fp)
 40041f8:	10001726 	beq	r2,zero,4004258 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 40041fc:	00000d06 	br	4004234 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 4004200:	e0bff917 	ldw	r2,-28(fp)
 4004204:	108002a8 	cmpgeui	r2,r2,10
 4004208:	1000021e 	bne	r2,zero,4004214 <alt_avalon_i2c_master_transmit+0x164>
 400420c:	0109c404 	movi	r4,10000
 4004210:	400614c0 	call	400614c <alt_busy_sleep>
            if (--timeout == 0)
 4004214:	e0bff917 	ldw	r2,-28(fp)
 4004218:	10bfffc4 	addi	r2,r2,-1
 400421c:	e0bff915 	stw	r2,-28(fp)
 4004220:	e0bff917 	ldw	r2,-28(fp)
 4004224:	1000031e 	bne	r2,zero,4004234 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4004228:	00bfff84 	movi	r2,-2
 400422c:	e0bffa15 	stw	r2,-24(fp)
               break;
 4004230:	00000306 	br	4004240 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4004234:	e13ffb17 	ldw	r4,-20(fp)
 4004238:	400371c0 	call	400371c <alt_avalon_i2c_is_busy>
 400423c:	103ff01e 	bne	r2,zero,4004200 <__alt_data_end+0xfc004200>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 4004240:	e0bffa04 	addi	r2,fp,-24
 4004244:	100b883a 	mov	r5,r2
 4004248:	e13ffb17 	ldw	r4,-20(fp)
 400424c:	4003af00 	call	4003af0 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 4004250:	e13ffb17 	ldw	r4,-20(fp)
 4004254:	40033c40 	call	40033c4 <alt_avalon_i2c_disable>
    }


    return status;
 4004258:	e0bffa17 	ldw	r2,-24(fp)
}
 400425c:	e037883a 	mov	sp,fp
 4004260:	dfc00117 	ldw	ra,4(sp)
 4004264:	df000017 	ldw	fp,0(sp)
 4004268:	dec00204 	addi	sp,sp,8
 400426c:	f800283a 	ret

04004270 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 4004270:	defff604 	addi	sp,sp,-40
 4004274:	dfc00915 	stw	ra,36(sp)
 4004278:	df000815 	stw	fp,32(sp)
 400427c:	df000804 	addi	fp,sp,32
 4004280:	e13ffb15 	stw	r4,-20(fp)
 4004284:	e17ffc15 	stw	r5,-16(fp)
 4004288:	e1bffd15 	stw	r6,-12(fp)
 400428c:	3807883a 	mov	r3,r7
 4004290:	e0800217 	ldw	r2,8(fp)
 4004294:	e0fffe05 	stb	r3,-8(fp)
 4004298:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 400429c:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 40042a0:	0149c404 	movi	r5,10000
 40042a4:	e13ffd17 	ldw	r4,-12(fp)
 40042a8:	40024f40 	call	40024f4 <__mulsi3>
 40042ac:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 40042b0:	e0bffb17 	ldw	r2,-20(fp)
 40042b4:	10800717 	ldw	r2,28(r2)
 40042b8:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 40042bc:	e0bffd17 	ldw	r2,-12(fp)
 40042c0:	1000021e 	bne	r2,zero,40042cc <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 40042c4:	0005883a 	mov	r2,zero
 40042c8:	00006706 	br	4004468 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 40042cc:	e0bffb17 	ldw	r2,-20(fp)
 40042d0:	10c00617 	ldw	r3,24(r2)
 40042d4:	00810034 	movhi	r2,1024
 40042d8:	108bec04 	addi	r2,r2,12208
 40042dc:	18800226 	beq	r3,r2,40042e8 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 40042e0:	00bfff44 	movi	r2,-3
 40042e4:	00006006 	br	4004468 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 40042e8:	e0bffe03 	ldbu	r2,-8(fp)
 40042ec:	10000a1e 	bne	r2,zero,4004318 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 40042f0:	e13ffb17 	ldw	r4,-20(fp)
 40042f4:	400332c0 	call	400332c <alt_avalon_i2c_enable>
 40042f8:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 40042fc:	e0bff817 	ldw	r2,-32(fp)
 4004300:	10000226 	beq	r2,zero,400430c <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 4004304:	e0bff817 	ldw	r2,-32(fp)
 4004308:	00005706 	br	4004468 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 400430c:	01400704 	movi	r5,28
 4004310:	e13ffb17 	ldw	r4,-20(fp)
 4004314:	40049180 	call	4004918 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 4004318:	e0bffe03 	ldbu	r2,-8(fp)
 400431c:	100d883a 	mov	r6,r2
 4004320:	000b883a 	mov	r5,zero
 4004324:	e13ffb17 	ldw	r4,-20(fp)
 4004328:	40039940 	call	4003994 <alt_avalon_i2c_send_address>
 400432c:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 4004330:	e0bff817 	ldw	r2,-32(fp)
 4004334:	1000271e 	bne	r2,zero,40043d4 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4004338:	00000f06 	br	4004378 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 400433c:	e0bffc17 	ldw	r2,-16(fp)
 4004340:	10800003 	ldbu	r2,0(r2)
 4004344:	10803fcc 	andi	r2,r2,255
 4004348:	000f883a 	mov	r7,zero
 400434c:	000d883a 	mov	r6,zero
 4004350:	100b883a 	mov	r5,r2
 4004354:	e13ffb17 	ldw	r4,-20(fp)
 4004358:	40038b00 	call	40038b0 <alt_avalon_i2c_cmd_write>
 400435c:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 4004360:	e0bffc17 	ldw	r2,-16(fp)
 4004364:	10800044 	addi	r2,r2,1
 4004368:	e0bffc15 	stw	r2,-16(fp)
            --size;
 400436c:	e0bffd17 	ldw	r2,-12(fp)
 4004370:	10bfffc4 	addi	r2,r2,-1
 4004374:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4004378:	e0bffd17 	ldw	r2,-12(fp)
 400437c:	108000b0 	cmpltui	r2,r2,2
 4004380:	1000021e 	bne	r2,zero,400438c <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 4004384:	e0bff817 	ldw	r2,-32(fp)
 4004388:	103fec26 	beq	r2,zero,400433c <__alt_data_end+0xfc00433c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 400438c:	e0bff817 	ldw	r2,-32(fp)
 4004390:	1000101e 	bne	r2,zero,40043d4 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4004394:	e0bffc17 	ldw	r2,-16(fp)
 4004398:	10800003 	ldbu	r2,0(r2)
 400439c:	10803fcc 	andi	r2,r2,255
 40043a0:	e0ffff03 	ldbu	r3,-4(fp)
 40043a4:	180f883a 	mov	r7,r3
 40043a8:	000d883a 	mov	r6,zero
 40043ac:	100b883a 	mov	r5,r2
 40043b0:	e13ffb17 	ldw	r4,-20(fp)
 40043b4:	40038b00 	call	40038b0 <alt_avalon_i2c_cmd_write>
 40043b8:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 40043bc:	e0bffc17 	ldw	r2,-16(fp)
 40043c0:	10800044 	addi	r2,r2,1
 40043c4:	e0bffc15 	stw	r2,-16(fp)
            --size;
 40043c8:	e0bffd17 	ldw	r2,-12(fp)
 40043cc:	10bfffc4 	addi	r2,r2,-1
 40043d0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 40043d4:	e0bff817 	ldw	r2,-32(fp)
 40043d8:	10001426 	beq	r2,zero,400442c <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 40043dc:	00000d06 	br	4004414 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 40043e0:	e0bff917 	ldw	r2,-28(fp)
 40043e4:	108002a8 	cmpgeui	r2,r2,10
 40043e8:	1000021e 	bne	r2,zero,40043f4 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 40043ec:	0109c404 	movi	r4,10000
 40043f0:	400614c0 	call	400614c <alt_busy_sleep>
            if (--timeout == 0)
 40043f4:	e0bff917 	ldw	r2,-28(fp)
 40043f8:	10bfffc4 	addi	r2,r2,-1
 40043fc:	e0bff915 	stw	r2,-28(fp)
 4004400:	e0bff917 	ldw	r2,-28(fp)
 4004404:	1000031e 	bne	r2,zero,4004414 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4004408:	00bfff84 	movi	r2,-2
 400440c:	e0bff815 	stw	r2,-32(fp)
               break;
 4004410:	00000306 	br	4004420 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4004414:	e13ffb17 	ldw	r4,-20(fp)
 4004418:	400371c0 	call	400371c <alt_avalon_i2c_is_busy>
 400441c:	103ff01e 	bne	r2,zero,40043e0 <__alt_data_end+0xfc0043e0>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 4004420:	e13ffb17 	ldw	r4,-20(fp)
 4004424:	40033c40 	call	40033c4 <alt_avalon_i2c_disable>
 4004428:	00000e06 	br	4004464 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 400442c:	e0bfff03 	ldbu	r2,-4(fp)
 4004430:	10000c26 	beq	r2,zero,4004464 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4004434:	01400704 	movi	r5,28
 4004438:	e13ffb17 	ldw	r4,-20(fp)
 400443c:	40049180 	call	4004918 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 4004440:	000b883a 	mov	r5,zero
 4004444:	e13ffb17 	ldw	r4,-20(fp)
 4004448:	4004b600 	call	4004b60 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 400444c:	e0bffa17 	ldw	r2,-24(fp)
 4004450:	00c00044 	movi	r3,1
 4004454:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 4004458:	01400044 	movi	r5,1
 400445c:	e13ffb17 	ldw	r4,-20(fp)
 4004460:	40049bc0 	call	40049bc <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 4004464:	e0bff817 	ldw	r2,-32(fp)
}
 4004468:	e037883a 	mov	sp,fp
 400446c:	dfc00117 	ldw	ra,4(sp)
 4004470:	df000017 	ldw	fp,0(sp)
 4004474:	dec00204 	addi	sp,sp,8
 4004478:	f800283a 	ret

0400447c <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 400447c:	defff404 	addi	sp,sp,-48
 4004480:	dfc00b15 	stw	ra,44(sp)
 4004484:	df000a15 	stw	fp,40(sp)
 4004488:	df000a04 	addi	fp,sp,40
 400448c:	e13ffb15 	stw	r4,-20(fp)
 4004490:	e17ffc15 	stw	r5,-16(fp)
 4004494:	e1bffd15 	stw	r6,-12(fp)
 4004498:	3807883a 	mov	r3,r7
 400449c:	e0800217 	ldw	r2,8(fp)
 40044a0:	e0fffe05 	stb	r3,-8(fp)
 40044a4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 40044a8:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 40044ac:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 40044b0:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 40044b4:	e0bffd17 	ldw	r2,-12(fp)
 40044b8:	1000021e 	bne	r2,zero,40044c4 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 40044bc:	0005883a 	mov	r2,zero
 40044c0:	00006d06 	br	4004678 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 40044c4:	e0bffe03 	ldbu	r2,-8(fp)
 40044c8:	10000a1e 	bne	r2,zero,40044f4 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 40044cc:	e13ffb17 	ldw	r4,-20(fp)
 40044d0:	400332c0 	call	400332c <alt_avalon_i2c_enable>
 40044d4:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 40044d8:	e0bff917 	ldw	r2,-28(fp)
 40044dc:	10000226 	beq	r2,zero,40044e8 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 40044e0:	e0bff917 	ldw	r2,-28(fp)
 40044e4:	00006406 	br	4004678 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40044e8:	01400704 	movi	r5,28
 40044ec:	e13ffb17 	ldw	r4,-20(fp)
 40044f0:	40049180 	call	4004918 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 40044f4:	e0bffe03 	ldbu	r2,-8(fp)
 40044f8:	100d883a 	mov	r6,r2
 40044fc:	01400044 	movi	r5,1
 4004500:	e13ffb17 	ldw	r4,-20(fp)
 4004504:	40039940 	call	4003994 <alt_avalon_i2c_send_address>
 4004508:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 400450c:	e0bff917 	ldw	r2,-28(fp)
 4004510:	1000341e 	bne	r2,zero,40045e4 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4004514:	00001906 	br	400457c <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4004518:	000f883a 	mov	r7,zero
 400451c:	000d883a 	mov	r6,zero
 4004520:	000b883a 	mov	r5,zero
 4004524:	e13ffb17 	ldw	r4,-20(fp)
 4004528:	40038b00 	call	40038b0 <alt_avalon_i2c_cmd_write>
 400452c:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 4004530:	e0bff817 	ldw	r2,-32(fp)
 4004534:	10800044 	addi	r2,r2,1
 4004538:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 400453c:	e0bff917 	ldw	r2,-28(fp)
 4004540:	10000e1e 	bne	r2,zero,400457c <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 4004544:	e0bffa04 	addi	r2,fp,-24
 4004548:	100f883a 	mov	r7,r2
 400454c:	000d883a 	mov	r6,zero
 4004550:	e17ffc17 	ldw	r5,-16(fp)
 4004554:	e13ffb17 	ldw	r4,-20(fp)
 4004558:	40037600 	call	4003760 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 400455c:	e0bffa17 	ldw	r2,-24(fp)
 4004560:	e0fffc17 	ldw	r3,-16(fp)
 4004564:	1885883a 	add	r2,r3,r2
 4004568:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 400456c:	e0bffa17 	ldw	r2,-24(fp)
 4004570:	e0fff717 	ldw	r3,-36(fp)
 4004574:	1885883a 	add	r2,r3,r2
 4004578:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 400457c:	e0bffd17 	ldw	r2,-12(fp)
 4004580:	10bfffc4 	addi	r2,r2,-1
 4004584:	e0fff817 	ldw	r3,-32(fp)
 4004588:	1880022e 	bgeu	r3,r2,4004594 <alt_avalon_i2c_master_receive+0x118>
 400458c:	e0bff917 	ldw	r2,-28(fp)
 4004590:	103fe126 	beq	r2,zero,4004518 <__alt_data_end+0xfc004518>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4004594:	e0bff917 	ldw	r2,-28(fp)
 4004598:	1000121e 	bne	r2,zero,40045e4 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 400459c:	e0bfff03 	ldbu	r2,-4(fp)
 40045a0:	100f883a 	mov	r7,r2
 40045a4:	000d883a 	mov	r6,zero
 40045a8:	000b883a 	mov	r5,zero
 40045ac:	e13ffb17 	ldw	r4,-20(fp)
 40045b0:	40038b00 	call	40038b0 <alt_avalon_i2c_cmd_write>
 40045b4:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 40045b8:	00000a06 	br	40045e4 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 40045bc:	e17ffc17 	ldw	r5,-16(fp)
 40045c0:	e13ffb17 	ldw	r4,-20(fp)
 40045c4:	40038080 	call	4003808 <alt_avalon_i2c_rx_read>
 40045c8:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 40045cc:	e0bffc17 	ldw	r2,-16(fp)
 40045d0:	10800044 	addi	r2,r2,1
 40045d4:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 40045d8:	e0bff717 	ldw	r2,-36(fp)
 40045dc:	10800044 	addi	r2,r2,1
 40045e0:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 40045e4:	e0fff717 	ldw	r3,-36(fp)
 40045e8:	e0bffd17 	ldw	r2,-12(fp)
 40045ec:	1880022e 	bgeu	r3,r2,40045f8 <alt_avalon_i2c_master_receive+0x17c>
 40045f0:	e0bff917 	ldw	r2,-28(fp)
 40045f4:	103ff126 	beq	r2,zero,40045bc <__alt_data_end+0xfc0045bc>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 40045f8:	e0bfff03 	ldbu	r2,-4(fp)
 40045fc:	1000021e 	bne	r2,zero,4004608 <alt_avalon_i2c_master_receive+0x18c>
 4004600:	e0bff917 	ldw	r2,-28(fp)
 4004604:	10001b26 	beq	r2,zero,4004674 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 4004608:	0149c404 	movi	r5,10000
 400460c:	e13ffd17 	ldw	r4,-12(fp)
 4004610:	40024f40 	call	40024f4 <__mulsi3>
 4004614:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4004618:	00000d06 	br	4004650 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 400461c:	e0bff617 	ldw	r2,-40(fp)
 4004620:	108002a8 	cmpgeui	r2,r2,10
 4004624:	1000021e 	bne	r2,zero,4004630 <alt_avalon_i2c_master_receive+0x1b4>
 4004628:	0109c404 	movi	r4,10000
 400462c:	400614c0 	call	400614c <alt_busy_sleep>
            if (--timeout == 0)
 4004630:	e0bff617 	ldw	r2,-40(fp)
 4004634:	10bfffc4 	addi	r2,r2,-1
 4004638:	e0bff615 	stw	r2,-40(fp)
 400463c:	e0bff617 	ldw	r2,-40(fp)
 4004640:	1000031e 	bne	r2,zero,4004650 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4004644:	00bfff84 	movi	r2,-2
 4004648:	e0bff915 	stw	r2,-28(fp)
               break;
 400464c:	00000306 	br	400465c <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4004650:	e13ffb17 	ldw	r4,-20(fp)
 4004654:	400371c0 	call	400371c <alt_avalon_i2c_is_busy>
 4004658:	103ff01e 	bne	r2,zero,400461c <__alt_data_end+0xfc00461c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 400465c:	e0bff904 	addi	r2,fp,-28
 4004660:	100b883a 	mov	r5,r2
 4004664:	e13ffb17 	ldw	r4,-20(fp)
 4004668:	4003af00 	call	4003af0 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 400466c:	e13ffb17 	ldw	r4,-20(fp)
 4004670:	40033c40 	call	40033c4 <alt_avalon_i2c_disable>
    }

    return status;
 4004674:	e0bff917 	ldw	r2,-28(fp)
}
 4004678:	e037883a 	mov	sp,fp
 400467c:	dfc00117 	ldw	ra,4(sp)
 4004680:	df000017 	ldw	fp,0(sp)
 4004684:	dec00204 	addi	sp,sp,8
 4004688:	f800283a 	ret

0400468c <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 400468c:	defff504 	addi	sp,sp,-44
 4004690:	dfc00a15 	stw	ra,40(sp)
 4004694:	df000915 	stw	fp,36(sp)
 4004698:	df000904 	addi	fp,sp,36
 400469c:	e13ffb15 	stw	r4,-20(fp)
 40046a0:	e17ffc15 	stw	r5,-16(fp)
 40046a4:	e1bffd15 	stw	r6,-12(fp)
 40046a8:	3807883a 	mov	r3,r7
 40046ac:	e0800217 	ldw	r2,8(fp)
 40046b0:	e0fffe05 	stb	r3,-8(fp)
 40046b4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 40046b8:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 40046bc:	e0bffb17 	ldw	r2,-20(fp)
 40046c0:	10800717 	ldw	r2,28(r2)
 40046c4:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 40046c8:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 40046cc:	e0bffd17 	ldw	r2,-12(fp)
 40046d0:	1000021e 	bne	r2,zero,40046dc <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 40046d4:	0005883a 	mov	r2,zero
 40046d8:	00006306 	br	4004868 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 40046dc:	e0bffb17 	ldw	r2,-20(fp)
 40046e0:	10c00617 	ldw	r3,24(r2)
 40046e4:	00810034 	movhi	r2,1024
 40046e8:	108bec04 	addi	r2,r2,12208
 40046ec:	18800226 	beq	r3,r2,40046f8 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 40046f0:	00bfff44 	movi	r2,-3
 40046f4:	00005c06 	br	4004868 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 40046f8:	e0bffe03 	ldbu	r2,-8(fp)
 40046fc:	10000a1e 	bne	r2,zero,4004728 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4004700:	e13ffb17 	ldw	r4,-20(fp)
 4004704:	400332c0 	call	400332c <alt_avalon_i2c_enable>
 4004708:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 400470c:	e0bff717 	ldw	r2,-36(fp)
 4004710:	10000226 	beq	r2,zero,400471c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 4004714:	e0bff717 	ldw	r2,-36(fp)
 4004718:	00005306 	br	4004868 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 400471c:	01400704 	movi	r5,28
 4004720:	e13ffb17 	ldw	r4,-20(fp)
 4004724:	40049180 	call	4004918 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 4004728:	e0bffe03 	ldbu	r2,-8(fp)
 400472c:	100d883a 	mov	r6,r2
 4004730:	01400044 	movi	r5,1
 4004734:	e13ffb17 	ldw	r4,-20(fp)
 4004738:	40039940 	call	4003994 <alt_avalon_i2c_send_address>
 400473c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 4004740:	e0bff717 	ldw	r2,-36(fp)
 4004744:	1000191e 	bne	r2,zero,40047ac <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4004748:	00000906 	br	4004770 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 400474c:	000f883a 	mov	r7,zero
 4004750:	000d883a 	mov	r6,zero
 4004754:	000b883a 	mov	r5,zero
 4004758:	e13ffb17 	ldw	r4,-20(fp)
 400475c:	40038b00 	call	40038b0 <alt_avalon_i2c_cmd_write>
 4004760:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 4004764:	e0bff917 	ldw	r2,-28(fp)
 4004768:	10800044 	addi	r2,r2,1
 400476c:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4004770:	e0bffd17 	ldw	r2,-12(fp)
 4004774:	10bfffc4 	addi	r2,r2,-1
 4004778:	e0fff917 	ldw	r3,-28(fp)
 400477c:	1880022e 	bgeu	r3,r2,4004788 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 4004780:	e0bff717 	ldw	r2,-36(fp)
 4004784:	103ff126 	beq	r2,zero,400474c <__alt_data_end+0xfc00474c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4004788:	e0bff717 	ldw	r2,-36(fp)
 400478c:	1000071e 	bne	r2,zero,40047ac <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4004790:	e0bfff03 	ldbu	r2,-4(fp)
 4004794:	100f883a 	mov	r7,r2
 4004798:	000d883a 	mov	r6,zero
 400479c:	000b883a 	mov	r5,zero
 40047a0:	e13ffb17 	ldw	r4,-20(fp)
 40047a4:	40038b00 	call	40038b0 <alt_avalon_i2c_cmd_write>
 40047a8:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 40047ac:	e0bff717 	ldw	r2,-36(fp)
 40047b0:	10001826 	beq	r2,zero,4004814 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 40047b4:	0149c404 	movi	r5,10000
 40047b8:	e13ffd17 	ldw	r4,-12(fp)
 40047bc:	40024f40 	call	40024f4 <__mulsi3>
 40047c0:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 40047c4:	00000d06 	br	40047fc <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 40047c8:	e0bff817 	ldw	r2,-32(fp)
 40047cc:	108002a8 	cmpgeui	r2,r2,10
 40047d0:	1000021e 	bne	r2,zero,40047dc <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 40047d4:	0109c404 	movi	r4,10000
 40047d8:	400614c0 	call	400614c <alt_busy_sleep>
            if (--timeout == 0)
 40047dc:	e0bff817 	ldw	r2,-32(fp)
 40047e0:	10bfffc4 	addi	r2,r2,-1
 40047e4:	e0bff815 	stw	r2,-32(fp)
 40047e8:	e0bff817 	ldw	r2,-32(fp)
 40047ec:	1000031e 	bne	r2,zero,40047fc <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 40047f0:	00bfff84 	movi	r2,-2
 40047f4:	e0bff715 	stw	r2,-36(fp)
               break;
 40047f8:	00000306 	br	4004808 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 40047fc:	e13ffb17 	ldw	r4,-20(fp)
 4004800:	400371c0 	call	400371c <alt_avalon_i2c_is_busy>
 4004804:	103ff01e 	bne	r2,zero,40047c8 <__alt_data_end+0xfc0047c8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 4004808:	e13ffb17 	ldw	r4,-20(fp)
 400480c:	40033c40 	call	40033c4 <alt_avalon_i2c_disable>
 4004810:	00001406 	br	4004864 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 4004814:	e0bfff03 	ldbu	r2,-4(fp)
 4004818:	10001226 	beq	r2,zero,4004864 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 400481c:	01400704 	movi	r5,28
 4004820:	e13ffb17 	ldw	r4,-20(fp)
 4004824:	40049180 	call	4004918 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 4004828:	000b883a 	mov	r5,zero
 400482c:	e13ffb17 	ldw	r4,-20(fp)
 4004830:	4004ab00 	call	4004ab0 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 4004834:	e0bffa17 	ldw	r2,-24(fp)
 4004838:	00c00084 	movi	r3,2
 400483c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 4004840:	e0bffa17 	ldw	r2,-24(fp)
 4004844:	e0fffc17 	ldw	r3,-16(fp)
 4004848:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 400484c:	e0bffa17 	ldw	r2,-24(fp)
 4004850:	e0fffd17 	ldw	r3,-12(fp)
 4004854:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 4004858:	01400084 	movi	r5,2
 400485c:	e13ffb17 	ldw	r4,-20(fp)
 4004860:	40049bc0 	call	40049bc <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 4004864:	e0bff717 	ldw	r2,-36(fp)
}
 4004868:	e037883a 	mov	sp,fp
 400486c:	dfc00117 	ldw	ra,4(sp)
 4004870:	df000017 	ldw	fp,0(sp)
 4004874:	dec00204 	addi	sp,sp,8
 4004878:	f800283a 	ret

0400487c <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 400487c:	defffd04 	addi	sp,sp,-12
 4004880:	df000215 	stw	fp,8(sp)
 4004884:	df000204 	addi	fp,sp,8
 4004888:	e13ffe15 	stw	r4,-8(fp)
 400488c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 4004890:	e0bffe17 	ldw	r2,-8(fp)
 4004894:	10800317 	ldw	r2,12(r2)
 4004898:	10800404 	addi	r2,r2,16
 400489c:	10c00037 	ldwio	r3,0(r2)
 40048a0:	e0bffe17 	ldw	r2,-8(fp)
 40048a4:	10800317 	ldw	r2,12(r2)
 40048a8:	10800304 	addi	r2,r2,12
 40048ac:	10800037 	ldwio	r2,0(r2)
 40048b0:	1884703a 	and	r2,r3,r2
 40048b4:	1007883a 	mov	r3,r2
 40048b8:	e0bfff17 	ldw	r2,-4(fp)
 40048bc:	10c00015 	stw	r3,0(r2)
}
 40048c0:	0001883a 	nop
 40048c4:	e037883a 	mov	sp,fp
 40048c8:	df000017 	ldw	fp,0(sp)
 40048cc:	dec00104 	addi	sp,sp,4
 40048d0:	f800283a 	ret

040048d4 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 40048d4:	defffd04 	addi	sp,sp,-12
 40048d8:	df000215 	stw	fp,8(sp)
 40048dc:	df000204 	addi	fp,sp,8
 40048e0:	e13ffe15 	stw	r4,-8(fp)
 40048e4:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 40048e8:	e0bffe17 	ldw	r2,-8(fp)
 40048ec:	10800317 	ldw	r2,12(r2)
 40048f0:	10800404 	addi	r2,r2,16
 40048f4:	10800037 	ldwio	r2,0(r2)
 40048f8:	1007883a 	mov	r3,r2
 40048fc:	e0bfff17 	ldw	r2,-4(fp)
 4004900:	10c00015 	stw	r3,0(r2)
}
 4004904:	0001883a 	nop
 4004908:	e037883a 	mov	sp,fp
 400490c:	df000017 	ldw	fp,0(sp)
 4004910:	dec00104 	addi	sp,sp,4
 4004914:	f800283a 	ret

04004918 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 4004918:	defffd04 	addi	sp,sp,-12
 400491c:	df000215 	stw	fp,8(sp)
 4004920:	df000204 	addi	fp,sp,8
 4004924:	e13ffe15 	stw	r4,-8(fp)
 4004928:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 400492c:	e0bffe17 	ldw	r2,-8(fp)
 4004930:	10800317 	ldw	r2,12(r2)
 4004934:	10800404 	addi	r2,r2,16
 4004938:	e0ffff17 	ldw	r3,-4(fp)
 400493c:	10c00035 	stwio	r3,0(r2)
}
 4004940:	0001883a 	nop
 4004944:	e037883a 	mov	sp,fp
 4004948:	df000017 	ldw	fp,0(sp)
 400494c:	dec00104 	addi	sp,sp,4
 4004950:	f800283a 	ret

04004954 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 4004954:	defffb04 	addi	sp,sp,-20
 4004958:	dfc00415 	stw	ra,16(sp)
 400495c:	df000315 	stw	fp,12(sp)
 4004960:	df000304 	addi	fp,sp,12
 4004964:	e13ffe15 	stw	r4,-8(fp)
 4004968:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 400496c:	e17ffd04 	addi	r5,fp,-12
 4004970:	e13ffe17 	ldw	r4,-8(fp)
 4004974:	4004a200 	call	4004a20 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 4004978:	e0bfff17 	ldw	r2,-4(fp)
 400497c:	0086303a 	nor	r3,zero,r2
 4004980:	e0bffd17 	ldw	r2,-12(fp)
 4004984:	1884703a 	and	r2,r3,r2
 4004988:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 400498c:	e0bffe17 	ldw	r2,-8(fp)
 4004990:	10800317 	ldw	r2,12(r2)
 4004994:	10800304 	addi	r2,r2,12
 4004998:	e0fffd17 	ldw	r3,-12(fp)
 400499c:	18c007cc 	andi	r3,r3,31
 40049a0:	10c00035 	stwio	r3,0(r2)
}
 40049a4:	0001883a 	nop
 40049a8:	e037883a 	mov	sp,fp
 40049ac:	dfc00117 	ldw	ra,4(sp)
 40049b0:	df000017 	ldw	fp,0(sp)
 40049b4:	dec00204 	addi	sp,sp,8
 40049b8:	f800283a 	ret

040049bc <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 40049bc:	defffb04 	addi	sp,sp,-20
 40049c0:	dfc00415 	stw	ra,16(sp)
 40049c4:	df000315 	stw	fp,12(sp)
 40049c8:	df000304 	addi	fp,sp,12
 40049cc:	e13ffe15 	stw	r4,-8(fp)
 40049d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 40049d4:	e17ffd04 	addi	r5,fp,-12
 40049d8:	e13ffe17 	ldw	r4,-8(fp)
 40049dc:	4004a200 	call	4004a20 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 40049e0:	e0fffd17 	ldw	r3,-12(fp)
 40049e4:	e0bfff17 	ldw	r2,-4(fp)
 40049e8:	1884b03a 	or	r2,r3,r2
 40049ec:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 40049f0:	e0bffe17 	ldw	r2,-8(fp)
 40049f4:	10800317 	ldw	r2,12(r2)
 40049f8:	10800304 	addi	r2,r2,12
 40049fc:	e0fffd17 	ldw	r3,-12(fp)
 4004a00:	18c007cc 	andi	r3,r3,31
 4004a04:	10c00035 	stwio	r3,0(r2)
}
 4004a08:	0001883a 	nop
 4004a0c:	e037883a 	mov	sp,fp
 4004a10:	dfc00117 	ldw	ra,4(sp)
 4004a14:	df000017 	ldw	fp,0(sp)
 4004a18:	dec00204 	addi	sp,sp,8
 4004a1c:	f800283a 	ret

04004a20 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 4004a20:	defffd04 	addi	sp,sp,-12
 4004a24:	df000215 	stw	fp,8(sp)
 4004a28:	df000204 	addi	fp,sp,8
 4004a2c:	e13ffe15 	stw	r4,-8(fp)
 4004a30:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 4004a34:	e0bffe17 	ldw	r2,-8(fp)
 4004a38:	10800317 	ldw	r2,12(r2)
 4004a3c:	10800304 	addi	r2,r2,12
 4004a40:	10800037 	ldwio	r2,0(r2)
 4004a44:	10c007cc 	andi	r3,r2,31
 4004a48:	e0bfff17 	ldw	r2,-4(fp)
 4004a4c:	10c00015 	stw	r3,0(r2)
}
 4004a50:	0001883a 	nop
 4004a54:	e037883a 	mov	sp,fp
 4004a58:	df000017 	ldw	fp,0(sp)
 4004a5c:	dec00104 	addi	sp,sp,4
 4004a60:	f800283a 	ret

04004a64 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 4004a64:	defffd04 	addi	sp,sp,-12
 4004a68:	df000215 	stw	fp,8(sp)
 4004a6c:	df000204 	addi	fp,sp,8
 4004a70:	e13ffe15 	stw	r4,-8(fp)
 4004a74:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 4004a78:	e0bffe17 	ldw	r2,-8(fp)
 4004a7c:	10800317 	ldw	r2,12(r2)
 4004a80:	10800204 	addi	r2,r2,8
 4004a84:	10800037 	ldwio	r2,0(r2)
 4004a88:	10800c0c 	andi	r2,r2,48
 4004a8c:	1005d13a 	srai	r2,r2,4
 4004a90:	1007883a 	mov	r3,r2
 4004a94:	e0bfff17 	ldw	r2,-4(fp)
 4004a98:	10c00015 	stw	r3,0(r2)
}
 4004a9c:	0001883a 	nop
 4004aa0:	e037883a 	mov	sp,fp
 4004aa4:	df000017 	ldw	fp,0(sp)
 4004aa8:	dec00104 	addi	sp,sp,4
 4004aac:	f800283a 	ret

04004ab0 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 4004ab0:	defffd04 	addi	sp,sp,-12
 4004ab4:	df000215 	stw	fp,8(sp)
 4004ab8:	df000204 	addi	fp,sp,8
 4004abc:	e13ffe15 	stw	r4,-8(fp)
 4004ac0:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 4004ac4:	e0bffe17 	ldw	r2,-8(fp)
 4004ac8:	10800317 	ldw	r2,12(r2)
 4004acc:	10800204 	addi	r2,r2,8
 4004ad0:	e0fffe17 	ldw	r3,-8(fp)
 4004ad4:	18c00317 	ldw	r3,12(r3)
 4004ad8:	18c00204 	addi	r3,r3,8
 4004adc:	18c00037 	ldwio	r3,0(r3)
 4004ae0:	1809883a 	mov	r4,r3
 4004ae4:	00fff3c4 	movi	r3,-49
 4004ae8:	20c8703a 	and	r4,r4,r3
 4004aec:	e0ffff17 	ldw	r3,-4(fp)
 4004af0:	1806913a 	slli	r3,r3,4
 4004af4:	18c00c0c 	andi	r3,r3,48
 4004af8:	20c6b03a 	or	r3,r4,r3
 4004afc:	10c00035 	stwio	r3,0(r2)
}
 4004b00:	0001883a 	nop
 4004b04:	e037883a 	mov	sp,fp
 4004b08:	df000017 	ldw	fp,0(sp)
 4004b0c:	dec00104 	addi	sp,sp,4
 4004b10:	f800283a 	ret

04004b14 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 4004b14:	defffd04 	addi	sp,sp,-12
 4004b18:	df000215 	stw	fp,8(sp)
 4004b1c:	df000204 	addi	fp,sp,8
 4004b20:	e13ffe15 	stw	r4,-8(fp)
 4004b24:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 4004b28:	e0bffe17 	ldw	r2,-8(fp)
 4004b2c:	10800317 	ldw	r2,12(r2)
 4004b30:	10800204 	addi	r2,r2,8
 4004b34:	10800037 	ldwio	r2,0(r2)
 4004b38:	1080030c 	andi	r2,r2,12
 4004b3c:	1005d0ba 	srai	r2,r2,2
 4004b40:	1007883a 	mov	r3,r2
 4004b44:	e0bfff17 	ldw	r2,-4(fp)
 4004b48:	10c00015 	stw	r3,0(r2)
}
 4004b4c:	0001883a 	nop
 4004b50:	e037883a 	mov	sp,fp
 4004b54:	df000017 	ldw	fp,0(sp)
 4004b58:	dec00104 	addi	sp,sp,4
 4004b5c:	f800283a 	ret

04004b60 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 4004b60:	defffd04 	addi	sp,sp,-12
 4004b64:	df000215 	stw	fp,8(sp)
 4004b68:	df000204 	addi	fp,sp,8
 4004b6c:	e13ffe15 	stw	r4,-8(fp)
 4004b70:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 4004b74:	e0bffe17 	ldw	r2,-8(fp)
 4004b78:	10800317 	ldw	r2,12(r2)
 4004b7c:	10c00204 	addi	r3,r2,8
 4004b80:	e0bffe17 	ldw	r2,-8(fp)
 4004b84:	10800317 	ldw	r2,12(r2)
 4004b88:	10800204 	addi	r2,r2,8
 4004b8c:	10800037 	ldwio	r2,0(r2)
 4004b90:	1009883a 	mov	r4,r2
 4004b94:	00bffcc4 	movi	r2,-13
 4004b98:	2088703a 	and	r4,r4,r2
 4004b9c:	e0bfff17 	ldw	r2,-4(fp)
 4004ba0:	1085883a 	add	r2,r2,r2
 4004ba4:	1085883a 	add	r2,r2,r2
 4004ba8:	1080030c 	andi	r2,r2,12
 4004bac:	2084b03a 	or	r2,r4,r2
 4004bb0:	18800035 	stwio	r2,0(r3)
}
 4004bb4:	0001883a 	nop
 4004bb8:	e037883a 	mov	sp,fp
 4004bbc:	df000017 	ldw	fp,0(sp)
 4004bc0:	dec00104 	addi	sp,sp,4
 4004bc4:	f800283a 	ret

04004bc8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4004bc8:	defffa04 	addi	sp,sp,-24
 4004bcc:	dfc00515 	stw	ra,20(sp)
 4004bd0:	df000415 	stw	fp,16(sp)
 4004bd4:	df000404 	addi	fp,sp,16
 4004bd8:	e13ffd15 	stw	r4,-12(fp)
 4004bdc:	e17ffe15 	stw	r5,-8(fp)
 4004be0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4004be4:	e0bffd17 	ldw	r2,-12(fp)
 4004be8:	10800017 	ldw	r2,0(r2)
 4004bec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4004bf0:	e0bffc17 	ldw	r2,-16(fp)
 4004bf4:	10c00a04 	addi	r3,r2,40
 4004bf8:	e0bffd17 	ldw	r2,-12(fp)
 4004bfc:	10800217 	ldw	r2,8(r2)
 4004c00:	100f883a 	mov	r7,r2
 4004c04:	e1bfff17 	ldw	r6,-4(fp)
 4004c08:	e17ffe17 	ldw	r5,-8(fp)
 4004c0c:	1809883a 	mov	r4,r3
 4004c10:	40051f00 	call	40051f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4004c14:	e037883a 	mov	sp,fp
 4004c18:	dfc00117 	ldw	ra,4(sp)
 4004c1c:	df000017 	ldw	fp,0(sp)
 4004c20:	dec00204 	addi	sp,sp,8
 4004c24:	f800283a 	ret

04004c28 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4004c28:	defffa04 	addi	sp,sp,-24
 4004c2c:	dfc00515 	stw	ra,20(sp)
 4004c30:	df000415 	stw	fp,16(sp)
 4004c34:	df000404 	addi	fp,sp,16
 4004c38:	e13ffd15 	stw	r4,-12(fp)
 4004c3c:	e17ffe15 	stw	r5,-8(fp)
 4004c40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4004c44:	e0bffd17 	ldw	r2,-12(fp)
 4004c48:	10800017 	ldw	r2,0(r2)
 4004c4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4004c50:	e0bffc17 	ldw	r2,-16(fp)
 4004c54:	10c00a04 	addi	r3,r2,40
 4004c58:	e0bffd17 	ldw	r2,-12(fp)
 4004c5c:	10800217 	ldw	r2,8(r2)
 4004c60:	100f883a 	mov	r7,r2
 4004c64:	e1bfff17 	ldw	r6,-4(fp)
 4004c68:	e17ffe17 	ldw	r5,-8(fp)
 4004c6c:	1809883a 	mov	r4,r3
 4004c70:	400540c0 	call	400540c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4004c74:	e037883a 	mov	sp,fp
 4004c78:	dfc00117 	ldw	ra,4(sp)
 4004c7c:	df000017 	ldw	fp,0(sp)
 4004c80:	dec00204 	addi	sp,sp,8
 4004c84:	f800283a 	ret

04004c88 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4004c88:	defffc04 	addi	sp,sp,-16
 4004c8c:	dfc00315 	stw	ra,12(sp)
 4004c90:	df000215 	stw	fp,8(sp)
 4004c94:	df000204 	addi	fp,sp,8
 4004c98:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4004c9c:	e0bfff17 	ldw	r2,-4(fp)
 4004ca0:	10800017 	ldw	r2,0(r2)
 4004ca4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4004ca8:	e0bffe17 	ldw	r2,-8(fp)
 4004cac:	10c00a04 	addi	r3,r2,40
 4004cb0:	e0bfff17 	ldw	r2,-4(fp)
 4004cb4:	10800217 	ldw	r2,8(r2)
 4004cb8:	100b883a 	mov	r5,r2
 4004cbc:	1809883a 	mov	r4,r3
 4004cc0:	40050980 	call	4005098 <altera_avalon_jtag_uart_close>
}
 4004cc4:	e037883a 	mov	sp,fp
 4004cc8:	dfc00117 	ldw	ra,4(sp)
 4004ccc:	df000017 	ldw	fp,0(sp)
 4004cd0:	dec00204 	addi	sp,sp,8
 4004cd4:	f800283a 	ret

04004cd8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4004cd8:	defffa04 	addi	sp,sp,-24
 4004cdc:	dfc00515 	stw	ra,20(sp)
 4004ce0:	df000415 	stw	fp,16(sp)
 4004ce4:	df000404 	addi	fp,sp,16
 4004ce8:	e13ffd15 	stw	r4,-12(fp)
 4004cec:	e17ffe15 	stw	r5,-8(fp)
 4004cf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4004cf4:	e0bffd17 	ldw	r2,-12(fp)
 4004cf8:	10800017 	ldw	r2,0(r2)
 4004cfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4004d00:	e0bffc17 	ldw	r2,-16(fp)
 4004d04:	10800a04 	addi	r2,r2,40
 4004d08:	e1bfff17 	ldw	r6,-4(fp)
 4004d0c:	e17ffe17 	ldw	r5,-8(fp)
 4004d10:	1009883a 	mov	r4,r2
 4004d14:	40051000 	call	4005100 <altera_avalon_jtag_uart_ioctl>
}
 4004d18:	e037883a 	mov	sp,fp
 4004d1c:	dfc00117 	ldw	ra,4(sp)
 4004d20:	df000017 	ldw	fp,0(sp)
 4004d24:	dec00204 	addi	sp,sp,8
 4004d28:	f800283a 	ret

04004d2c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4004d2c:	defffa04 	addi	sp,sp,-24
 4004d30:	dfc00515 	stw	ra,20(sp)
 4004d34:	df000415 	stw	fp,16(sp)
 4004d38:	df000404 	addi	fp,sp,16
 4004d3c:	e13ffd15 	stw	r4,-12(fp)
 4004d40:	e17ffe15 	stw	r5,-8(fp)
 4004d44:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4004d48:	e0bffd17 	ldw	r2,-12(fp)
 4004d4c:	00c00044 	movi	r3,1
 4004d50:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4004d54:	e0bffd17 	ldw	r2,-12(fp)
 4004d58:	10800017 	ldw	r2,0(r2)
 4004d5c:	10800104 	addi	r2,r2,4
 4004d60:	1007883a 	mov	r3,r2
 4004d64:	e0bffd17 	ldw	r2,-12(fp)
 4004d68:	10800817 	ldw	r2,32(r2)
 4004d6c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4004d70:	e0bffe17 	ldw	r2,-8(fp)
 4004d74:	e0ffff17 	ldw	r3,-4(fp)
 4004d78:	d8000015 	stw	zero,0(sp)
 4004d7c:	e1fffd17 	ldw	r7,-12(fp)
 4004d80:	01810034 	movhi	r6,1024
 4004d84:	31937b04 	addi	r6,r6,19948
 4004d88:	180b883a 	mov	r5,r3
 4004d8c:	1009883a 	mov	r4,r2
 4004d90:	40065140 	call	4006514 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4004d94:	e0bffd17 	ldw	r2,-12(fp)
 4004d98:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4004d9c:	e0bffd17 	ldw	r2,-12(fp)
 4004da0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4004da4:	d0e6f617 	ldw	r3,-25640(gp)
 4004da8:	e1fffd17 	ldw	r7,-12(fp)
 4004dac:	01810034 	movhi	r6,1024
 4004db0:	3193fe04 	addi	r6,r6,20472
 4004db4:	180b883a 	mov	r5,r3
 4004db8:	1009883a 	mov	r4,r2
 4004dbc:	40060200 	call	4006020 <alt_alarm_start>
 4004dc0:	1000040e 	bge	r2,zero,4004dd4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4004dc4:	e0fffd17 	ldw	r3,-12(fp)
 4004dc8:	00a00034 	movhi	r2,32768
 4004dcc:	10bfffc4 	addi	r2,r2,-1
 4004dd0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4004dd4:	0001883a 	nop
 4004dd8:	e037883a 	mov	sp,fp
 4004ddc:	dfc00117 	ldw	ra,4(sp)
 4004de0:	df000017 	ldw	fp,0(sp)
 4004de4:	dec00204 	addi	sp,sp,8
 4004de8:	f800283a 	ret

04004dec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4004dec:	defff804 	addi	sp,sp,-32
 4004df0:	df000715 	stw	fp,28(sp)
 4004df4:	df000704 	addi	fp,sp,28
 4004df8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4004dfc:	e0bfff17 	ldw	r2,-4(fp)
 4004e00:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4004e04:	e0bffb17 	ldw	r2,-20(fp)
 4004e08:	10800017 	ldw	r2,0(r2)
 4004e0c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4004e10:	e0bffc17 	ldw	r2,-16(fp)
 4004e14:	10800104 	addi	r2,r2,4
 4004e18:	10800037 	ldwio	r2,0(r2)
 4004e1c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4004e20:	e0bffd17 	ldw	r2,-12(fp)
 4004e24:	1080c00c 	andi	r2,r2,768
 4004e28:	10006d26 	beq	r2,zero,4004fe0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4004e2c:	e0bffd17 	ldw	r2,-12(fp)
 4004e30:	1080400c 	andi	r2,r2,256
 4004e34:	10003526 	beq	r2,zero,4004f0c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4004e38:	00800074 	movhi	r2,1
 4004e3c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004e40:	e0bffb17 	ldw	r2,-20(fp)
 4004e44:	10800a17 	ldw	r2,40(r2)
 4004e48:	10800044 	addi	r2,r2,1
 4004e4c:	1081ffcc 	andi	r2,r2,2047
 4004e50:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4004e54:	e0bffb17 	ldw	r2,-20(fp)
 4004e58:	10c00b17 	ldw	r3,44(r2)
 4004e5c:	e0bffe17 	ldw	r2,-8(fp)
 4004e60:	18801526 	beq	r3,r2,4004eb8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4004e64:	e0bffc17 	ldw	r2,-16(fp)
 4004e68:	10800037 	ldwio	r2,0(r2)
 4004e6c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4004e70:	e0bff917 	ldw	r2,-28(fp)
 4004e74:	10a0000c 	andi	r2,r2,32768
 4004e78:	10001126 	beq	r2,zero,4004ec0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4004e7c:	e0bffb17 	ldw	r2,-20(fp)
 4004e80:	10800a17 	ldw	r2,40(r2)
 4004e84:	e0fff917 	ldw	r3,-28(fp)
 4004e88:	1809883a 	mov	r4,r3
 4004e8c:	e0fffb17 	ldw	r3,-20(fp)
 4004e90:	1885883a 	add	r2,r3,r2
 4004e94:	10800e04 	addi	r2,r2,56
 4004e98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004e9c:	e0bffb17 	ldw	r2,-20(fp)
 4004ea0:	10800a17 	ldw	r2,40(r2)
 4004ea4:	10800044 	addi	r2,r2,1
 4004ea8:	10c1ffcc 	andi	r3,r2,2047
 4004eac:	e0bffb17 	ldw	r2,-20(fp)
 4004eb0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4004eb4:	003fe206 	br	4004e40 <__alt_data_end+0xfc004e40>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4004eb8:	0001883a 	nop
 4004ebc:	00000106 	br	4004ec4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4004ec0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4004ec4:	e0bff917 	ldw	r2,-28(fp)
 4004ec8:	10bfffec 	andhi	r2,r2,65535
 4004ecc:	10000f26 	beq	r2,zero,4004f0c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4004ed0:	e0bffb17 	ldw	r2,-20(fp)
 4004ed4:	10c00817 	ldw	r3,32(r2)
 4004ed8:	00bfff84 	movi	r2,-2
 4004edc:	1886703a 	and	r3,r3,r2
 4004ee0:	e0bffb17 	ldw	r2,-20(fp)
 4004ee4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4004ee8:	e0bffc17 	ldw	r2,-16(fp)
 4004eec:	10800104 	addi	r2,r2,4
 4004ef0:	1007883a 	mov	r3,r2
 4004ef4:	e0bffb17 	ldw	r2,-20(fp)
 4004ef8:	10800817 	ldw	r2,32(r2)
 4004efc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4004f00:	e0bffc17 	ldw	r2,-16(fp)
 4004f04:	10800104 	addi	r2,r2,4
 4004f08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4004f0c:	e0bffd17 	ldw	r2,-12(fp)
 4004f10:	1080800c 	andi	r2,r2,512
 4004f14:	103fbe26 	beq	r2,zero,4004e10 <__alt_data_end+0xfc004e10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4004f18:	e0bffd17 	ldw	r2,-12(fp)
 4004f1c:	1004d43a 	srli	r2,r2,16
 4004f20:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4004f24:	00001406 	br	4004f78 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4004f28:	e0bffc17 	ldw	r2,-16(fp)
 4004f2c:	e0fffb17 	ldw	r3,-20(fp)
 4004f30:	18c00d17 	ldw	r3,52(r3)
 4004f34:	e13ffb17 	ldw	r4,-20(fp)
 4004f38:	20c7883a 	add	r3,r4,r3
 4004f3c:	18c20e04 	addi	r3,r3,2104
 4004f40:	18c00003 	ldbu	r3,0(r3)
 4004f44:	18c03fcc 	andi	r3,r3,255
 4004f48:	18c0201c 	xori	r3,r3,128
 4004f4c:	18ffe004 	addi	r3,r3,-128
 4004f50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004f54:	e0bffb17 	ldw	r2,-20(fp)
 4004f58:	10800d17 	ldw	r2,52(r2)
 4004f5c:	10800044 	addi	r2,r2,1
 4004f60:	10c1ffcc 	andi	r3,r2,2047
 4004f64:	e0bffb17 	ldw	r2,-20(fp)
 4004f68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4004f6c:	e0bffa17 	ldw	r2,-24(fp)
 4004f70:	10bfffc4 	addi	r2,r2,-1
 4004f74:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4004f78:	e0bffa17 	ldw	r2,-24(fp)
 4004f7c:	10000526 	beq	r2,zero,4004f94 <altera_avalon_jtag_uart_irq+0x1a8>
 4004f80:	e0bffb17 	ldw	r2,-20(fp)
 4004f84:	10c00d17 	ldw	r3,52(r2)
 4004f88:	e0bffb17 	ldw	r2,-20(fp)
 4004f8c:	10800c17 	ldw	r2,48(r2)
 4004f90:	18bfe51e 	bne	r3,r2,4004f28 <__alt_data_end+0xfc004f28>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4004f94:	e0bffa17 	ldw	r2,-24(fp)
 4004f98:	103f9d26 	beq	r2,zero,4004e10 <__alt_data_end+0xfc004e10>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4004f9c:	e0bffb17 	ldw	r2,-20(fp)
 4004fa0:	10c00817 	ldw	r3,32(r2)
 4004fa4:	00bfff44 	movi	r2,-3
 4004fa8:	1886703a 	and	r3,r3,r2
 4004fac:	e0bffb17 	ldw	r2,-20(fp)
 4004fb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004fb4:	e0bffb17 	ldw	r2,-20(fp)
 4004fb8:	10800017 	ldw	r2,0(r2)
 4004fbc:	10800104 	addi	r2,r2,4
 4004fc0:	1007883a 	mov	r3,r2
 4004fc4:	e0bffb17 	ldw	r2,-20(fp)
 4004fc8:	10800817 	ldw	r2,32(r2)
 4004fcc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4004fd0:	e0bffc17 	ldw	r2,-16(fp)
 4004fd4:	10800104 	addi	r2,r2,4
 4004fd8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4004fdc:	003f8c06 	br	4004e10 <__alt_data_end+0xfc004e10>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4004fe0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4004fe4:	0001883a 	nop
 4004fe8:	e037883a 	mov	sp,fp
 4004fec:	df000017 	ldw	fp,0(sp)
 4004ff0:	dec00104 	addi	sp,sp,4
 4004ff4:	f800283a 	ret

04004ff8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4004ff8:	defff804 	addi	sp,sp,-32
 4004ffc:	df000715 	stw	fp,28(sp)
 4005000:	df000704 	addi	fp,sp,28
 4005004:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4005008:	e0bffb17 	ldw	r2,-20(fp)
 400500c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4005010:	e0bff917 	ldw	r2,-28(fp)
 4005014:	10800017 	ldw	r2,0(r2)
 4005018:	10800104 	addi	r2,r2,4
 400501c:	10800037 	ldwio	r2,0(r2)
 4005020:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4005024:	e0bffa17 	ldw	r2,-24(fp)
 4005028:	1081000c 	andi	r2,r2,1024
 400502c:	10000b26 	beq	r2,zero,400505c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4005030:	e0bff917 	ldw	r2,-28(fp)
 4005034:	10800017 	ldw	r2,0(r2)
 4005038:	10800104 	addi	r2,r2,4
 400503c:	1007883a 	mov	r3,r2
 4005040:	e0bff917 	ldw	r2,-28(fp)
 4005044:	10800817 	ldw	r2,32(r2)
 4005048:	10810014 	ori	r2,r2,1024
 400504c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4005050:	e0bff917 	ldw	r2,-28(fp)
 4005054:	10000915 	stw	zero,36(r2)
 4005058:	00000a06 	br	4005084 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400505c:	e0bff917 	ldw	r2,-28(fp)
 4005060:	10c00917 	ldw	r3,36(r2)
 4005064:	00a00034 	movhi	r2,32768
 4005068:	10bfff04 	addi	r2,r2,-4
 400506c:	10c00536 	bltu	r2,r3,4005084 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4005070:	e0bff917 	ldw	r2,-28(fp)
 4005074:	10800917 	ldw	r2,36(r2)
 4005078:	10c00044 	addi	r3,r2,1
 400507c:	e0bff917 	ldw	r2,-28(fp)
 4005080:	10c00915 	stw	r3,36(r2)
 4005084:	d0a6f617 	ldw	r2,-25640(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4005088:	e037883a 	mov	sp,fp
 400508c:	df000017 	ldw	fp,0(sp)
 4005090:	dec00104 	addi	sp,sp,4
 4005094:	f800283a 	ret

04005098 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4005098:	defffd04 	addi	sp,sp,-12
 400509c:	df000215 	stw	fp,8(sp)
 40050a0:	df000204 	addi	fp,sp,8
 40050a4:	e13ffe15 	stw	r4,-8(fp)
 40050a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40050ac:	00000506 	br	40050c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40050b0:	e0bfff17 	ldw	r2,-4(fp)
 40050b4:	1090000c 	andi	r2,r2,16384
 40050b8:	10000226 	beq	r2,zero,40050c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40050bc:	00bffd44 	movi	r2,-11
 40050c0:	00000b06 	br	40050f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40050c4:	e0bffe17 	ldw	r2,-8(fp)
 40050c8:	10c00d17 	ldw	r3,52(r2)
 40050cc:	e0bffe17 	ldw	r2,-8(fp)
 40050d0:	10800c17 	ldw	r2,48(r2)
 40050d4:	18800526 	beq	r3,r2,40050ec <altera_avalon_jtag_uart_close+0x54>
 40050d8:	e0bffe17 	ldw	r2,-8(fp)
 40050dc:	10c00917 	ldw	r3,36(r2)
 40050e0:	e0bffe17 	ldw	r2,-8(fp)
 40050e4:	10800117 	ldw	r2,4(r2)
 40050e8:	18bff136 	bltu	r3,r2,40050b0 <__alt_data_end+0xfc0050b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40050ec:	0005883a 	mov	r2,zero
}
 40050f0:	e037883a 	mov	sp,fp
 40050f4:	df000017 	ldw	fp,0(sp)
 40050f8:	dec00104 	addi	sp,sp,4
 40050fc:	f800283a 	ret

04005100 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4005100:	defffa04 	addi	sp,sp,-24
 4005104:	df000515 	stw	fp,20(sp)
 4005108:	df000504 	addi	fp,sp,20
 400510c:	e13ffd15 	stw	r4,-12(fp)
 4005110:	e17ffe15 	stw	r5,-8(fp)
 4005114:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4005118:	00bff9c4 	movi	r2,-25
 400511c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4005120:	e0bffe17 	ldw	r2,-8(fp)
 4005124:	10da8060 	cmpeqi	r3,r2,27137
 4005128:	1800031e 	bne	r3,zero,4005138 <altera_avalon_jtag_uart_ioctl+0x38>
 400512c:	109a80a0 	cmpeqi	r2,r2,27138
 4005130:	1000181e 	bne	r2,zero,4005194 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4005134:	00002906 	br	40051dc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4005138:	e0bffd17 	ldw	r2,-12(fp)
 400513c:	10c00117 	ldw	r3,4(r2)
 4005140:	00a00034 	movhi	r2,32768
 4005144:	10bfffc4 	addi	r2,r2,-1
 4005148:	18802126 	beq	r3,r2,40051d0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400514c:	e0bfff17 	ldw	r2,-4(fp)
 4005150:	10800017 	ldw	r2,0(r2)
 4005154:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4005158:	e0bffc17 	ldw	r2,-16(fp)
 400515c:	10800090 	cmplti	r2,r2,2
 4005160:	1000061e 	bne	r2,zero,400517c <altera_avalon_jtag_uart_ioctl+0x7c>
 4005164:	e0fffc17 	ldw	r3,-16(fp)
 4005168:	00a00034 	movhi	r2,32768
 400516c:	10bfffc4 	addi	r2,r2,-1
 4005170:	18800226 	beq	r3,r2,400517c <altera_avalon_jtag_uart_ioctl+0x7c>
 4005174:	e0bffc17 	ldw	r2,-16(fp)
 4005178:	00000206 	br	4005184 <altera_avalon_jtag_uart_ioctl+0x84>
 400517c:	00a00034 	movhi	r2,32768
 4005180:	10bfff84 	addi	r2,r2,-2
 4005184:	e0fffd17 	ldw	r3,-12(fp)
 4005188:	18800115 	stw	r2,4(r3)
      rc = 0;
 400518c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4005190:	00000f06 	br	40051d0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4005194:	e0bffd17 	ldw	r2,-12(fp)
 4005198:	10c00117 	ldw	r3,4(r2)
 400519c:	00a00034 	movhi	r2,32768
 40051a0:	10bfffc4 	addi	r2,r2,-1
 40051a4:	18800c26 	beq	r3,r2,40051d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40051a8:	e0bffd17 	ldw	r2,-12(fp)
 40051ac:	10c00917 	ldw	r3,36(r2)
 40051b0:	e0bffd17 	ldw	r2,-12(fp)
 40051b4:	10800117 	ldw	r2,4(r2)
 40051b8:	1885803a 	cmpltu	r2,r3,r2
 40051bc:	10c03fcc 	andi	r3,r2,255
 40051c0:	e0bfff17 	ldw	r2,-4(fp)
 40051c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40051c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40051cc:	00000206 	br	40051d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 40051d0:	0001883a 	nop
 40051d4:	00000106 	br	40051dc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 40051d8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 40051dc:	e0bffb17 	ldw	r2,-20(fp)
}
 40051e0:	e037883a 	mov	sp,fp
 40051e4:	df000017 	ldw	fp,0(sp)
 40051e8:	dec00104 	addi	sp,sp,4
 40051ec:	f800283a 	ret

040051f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40051f0:	defff304 	addi	sp,sp,-52
 40051f4:	dfc00c15 	stw	ra,48(sp)
 40051f8:	df000b15 	stw	fp,44(sp)
 40051fc:	df000b04 	addi	fp,sp,44
 4005200:	e13ffc15 	stw	r4,-16(fp)
 4005204:	e17ffd15 	stw	r5,-12(fp)
 4005208:	e1bffe15 	stw	r6,-8(fp)
 400520c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4005210:	e0bffd17 	ldw	r2,-12(fp)
 4005214:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4005218:	00004706 	br	4005338 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400521c:	e0bffc17 	ldw	r2,-16(fp)
 4005220:	10800a17 	ldw	r2,40(r2)
 4005224:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4005228:	e0bffc17 	ldw	r2,-16(fp)
 400522c:	10800b17 	ldw	r2,44(r2)
 4005230:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4005234:	e0fff717 	ldw	r3,-36(fp)
 4005238:	e0bff817 	ldw	r2,-32(fp)
 400523c:	18800536 	bltu	r3,r2,4005254 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4005240:	e0fff717 	ldw	r3,-36(fp)
 4005244:	e0bff817 	ldw	r2,-32(fp)
 4005248:	1885c83a 	sub	r2,r3,r2
 400524c:	e0bff615 	stw	r2,-40(fp)
 4005250:	00000406 	br	4005264 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4005254:	00c20004 	movi	r3,2048
 4005258:	e0bff817 	ldw	r2,-32(fp)
 400525c:	1885c83a 	sub	r2,r3,r2
 4005260:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4005264:	e0bff617 	ldw	r2,-40(fp)
 4005268:	10001e26 	beq	r2,zero,40052e4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400526c:	e0fffe17 	ldw	r3,-8(fp)
 4005270:	e0bff617 	ldw	r2,-40(fp)
 4005274:	1880022e 	bgeu	r3,r2,4005280 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4005278:	e0bffe17 	ldw	r2,-8(fp)
 400527c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4005280:	e0bffc17 	ldw	r2,-16(fp)
 4005284:	10c00e04 	addi	r3,r2,56
 4005288:	e0bff817 	ldw	r2,-32(fp)
 400528c:	1885883a 	add	r2,r3,r2
 4005290:	e1bff617 	ldw	r6,-40(fp)
 4005294:	100b883a 	mov	r5,r2
 4005298:	e13ff517 	ldw	r4,-44(fp)
 400529c:	400725c0 	call	400725c <memcpy>
      ptr   += n;
 40052a0:	e0fff517 	ldw	r3,-44(fp)
 40052a4:	e0bff617 	ldw	r2,-40(fp)
 40052a8:	1885883a 	add	r2,r3,r2
 40052ac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40052b0:	e0fffe17 	ldw	r3,-8(fp)
 40052b4:	e0bff617 	ldw	r2,-40(fp)
 40052b8:	1885c83a 	sub	r2,r3,r2
 40052bc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40052c0:	e0fff817 	ldw	r3,-32(fp)
 40052c4:	e0bff617 	ldw	r2,-40(fp)
 40052c8:	1885883a 	add	r2,r3,r2
 40052cc:	10c1ffcc 	andi	r3,r2,2047
 40052d0:	e0bffc17 	ldw	r2,-16(fp)
 40052d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 40052d8:	e0bffe17 	ldw	r2,-8(fp)
 40052dc:	00bfcf16 	blt	zero,r2,400521c <__alt_data_end+0xfc00521c>
 40052e0:	00000106 	br	40052e8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 40052e4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 40052e8:	e0fff517 	ldw	r3,-44(fp)
 40052ec:	e0bffd17 	ldw	r2,-12(fp)
 40052f0:	1880141e 	bne	r3,r2,4005344 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40052f4:	e0bfff17 	ldw	r2,-4(fp)
 40052f8:	1090000c 	andi	r2,r2,16384
 40052fc:	1000131e 	bne	r2,zero,400534c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4005300:	0001883a 	nop
 4005304:	e0bffc17 	ldw	r2,-16(fp)
 4005308:	10c00a17 	ldw	r3,40(r2)
 400530c:	e0bff717 	ldw	r2,-36(fp)
 4005310:	1880051e 	bne	r3,r2,4005328 <altera_avalon_jtag_uart_read+0x138>
 4005314:	e0bffc17 	ldw	r2,-16(fp)
 4005318:	10c00917 	ldw	r3,36(r2)
 400531c:	e0bffc17 	ldw	r2,-16(fp)
 4005320:	10800117 	ldw	r2,4(r2)
 4005324:	18bff736 	bltu	r3,r2,4005304 <__alt_data_end+0xfc005304>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4005328:	e0bffc17 	ldw	r2,-16(fp)
 400532c:	10c00a17 	ldw	r3,40(r2)
 4005330:	e0bff717 	ldw	r2,-36(fp)
 4005334:	18800726 	beq	r3,r2,4005354 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4005338:	e0bffe17 	ldw	r2,-8(fp)
 400533c:	00bfb716 	blt	zero,r2,400521c <__alt_data_end+0xfc00521c>
 4005340:	00000506 	br	4005358 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4005344:	0001883a 	nop
 4005348:	00000306 	br	4005358 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400534c:	0001883a 	nop
 4005350:	00000106 	br	4005358 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4005354:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4005358:	e0fff517 	ldw	r3,-44(fp)
 400535c:	e0bffd17 	ldw	r2,-12(fp)
 4005360:	18801826 	beq	r3,r2,40053c4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005364:	0005303a 	rdctl	r2,status
 4005368:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400536c:	e0fffb17 	ldw	r3,-20(fp)
 4005370:	00bfff84 	movi	r2,-2
 4005374:	1884703a 	and	r2,r3,r2
 4005378:	1001703a 	wrctl	status,r2
  
  return context;
 400537c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4005380:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4005384:	e0bffc17 	ldw	r2,-16(fp)
 4005388:	10800817 	ldw	r2,32(r2)
 400538c:	10c00054 	ori	r3,r2,1
 4005390:	e0bffc17 	ldw	r2,-16(fp)
 4005394:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4005398:	e0bffc17 	ldw	r2,-16(fp)
 400539c:	10800017 	ldw	r2,0(r2)
 40053a0:	10800104 	addi	r2,r2,4
 40053a4:	1007883a 	mov	r3,r2
 40053a8:	e0bffc17 	ldw	r2,-16(fp)
 40053ac:	10800817 	ldw	r2,32(r2)
 40053b0:	18800035 	stwio	r2,0(r3)
 40053b4:	e0bffa17 	ldw	r2,-24(fp)
 40053b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40053bc:	e0bff917 	ldw	r2,-28(fp)
 40053c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40053c4:	e0fff517 	ldw	r3,-44(fp)
 40053c8:	e0bffd17 	ldw	r2,-12(fp)
 40053cc:	18800426 	beq	r3,r2,40053e0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 40053d0:	e0fff517 	ldw	r3,-44(fp)
 40053d4:	e0bffd17 	ldw	r2,-12(fp)
 40053d8:	1885c83a 	sub	r2,r3,r2
 40053dc:	00000606 	br	40053f8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 40053e0:	e0bfff17 	ldw	r2,-4(fp)
 40053e4:	1090000c 	andi	r2,r2,16384
 40053e8:	10000226 	beq	r2,zero,40053f4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 40053ec:	00bffd44 	movi	r2,-11
 40053f0:	00000106 	br	40053f8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 40053f4:	00bffec4 	movi	r2,-5
}
 40053f8:	e037883a 	mov	sp,fp
 40053fc:	dfc00117 	ldw	ra,4(sp)
 4005400:	df000017 	ldw	fp,0(sp)
 4005404:	dec00204 	addi	sp,sp,8
 4005408:	f800283a 	ret

0400540c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400540c:	defff304 	addi	sp,sp,-52
 4005410:	dfc00c15 	stw	ra,48(sp)
 4005414:	df000b15 	stw	fp,44(sp)
 4005418:	df000b04 	addi	fp,sp,44
 400541c:	e13ffc15 	stw	r4,-16(fp)
 4005420:	e17ffd15 	stw	r5,-12(fp)
 4005424:	e1bffe15 	stw	r6,-8(fp)
 4005428:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400542c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4005430:	e0bffd17 	ldw	r2,-12(fp)
 4005434:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4005438:	00003706 	br	4005518 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400543c:	e0bffc17 	ldw	r2,-16(fp)
 4005440:	10800c17 	ldw	r2,48(r2)
 4005444:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4005448:	e0bffc17 	ldw	r2,-16(fp)
 400544c:	10800d17 	ldw	r2,52(r2)
 4005450:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4005454:	e0fff917 	ldw	r3,-28(fp)
 4005458:	e0bff517 	ldw	r2,-44(fp)
 400545c:	1880062e 	bgeu	r3,r2,4005478 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4005460:	e0fff517 	ldw	r3,-44(fp)
 4005464:	e0bff917 	ldw	r2,-28(fp)
 4005468:	1885c83a 	sub	r2,r3,r2
 400546c:	10bfffc4 	addi	r2,r2,-1
 4005470:	e0bff615 	stw	r2,-40(fp)
 4005474:	00000b06 	br	40054a4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4005478:	e0bff517 	ldw	r2,-44(fp)
 400547c:	10000526 	beq	r2,zero,4005494 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4005480:	00c20004 	movi	r3,2048
 4005484:	e0bff917 	ldw	r2,-28(fp)
 4005488:	1885c83a 	sub	r2,r3,r2
 400548c:	e0bff615 	stw	r2,-40(fp)
 4005490:	00000406 	br	40054a4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4005494:	00c1ffc4 	movi	r3,2047
 4005498:	e0bff917 	ldw	r2,-28(fp)
 400549c:	1885c83a 	sub	r2,r3,r2
 40054a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40054a4:	e0bff617 	ldw	r2,-40(fp)
 40054a8:	10001e26 	beq	r2,zero,4005524 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40054ac:	e0fffe17 	ldw	r3,-8(fp)
 40054b0:	e0bff617 	ldw	r2,-40(fp)
 40054b4:	1880022e 	bgeu	r3,r2,40054c0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 40054b8:	e0bffe17 	ldw	r2,-8(fp)
 40054bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40054c0:	e0bffc17 	ldw	r2,-16(fp)
 40054c4:	10c20e04 	addi	r3,r2,2104
 40054c8:	e0bff917 	ldw	r2,-28(fp)
 40054cc:	1885883a 	add	r2,r3,r2
 40054d0:	e1bff617 	ldw	r6,-40(fp)
 40054d4:	e17ffd17 	ldw	r5,-12(fp)
 40054d8:	1009883a 	mov	r4,r2
 40054dc:	400725c0 	call	400725c <memcpy>
      ptr   += n;
 40054e0:	e0fffd17 	ldw	r3,-12(fp)
 40054e4:	e0bff617 	ldw	r2,-40(fp)
 40054e8:	1885883a 	add	r2,r3,r2
 40054ec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 40054f0:	e0fffe17 	ldw	r3,-8(fp)
 40054f4:	e0bff617 	ldw	r2,-40(fp)
 40054f8:	1885c83a 	sub	r2,r3,r2
 40054fc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4005500:	e0fff917 	ldw	r3,-28(fp)
 4005504:	e0bff617 	ldw	r2,-40(fp)
 4005508:	1885883a 	add	r2,r3,r2
 400550c:	10c1ffcc 	andi	r3,r2,2047
 4005510:	e0bffc17 	ldw	r2,-16(fp)
 4005514:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4005518:	e0bffe17 	ldw	r2,-8(fp)
 400551c:	00bfc716 	blt	zero,r2,400543c <__alt_data_end+0xfc00543c>
 4005520:	00000106 	br	4005528 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4005524:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005528:	0005303a 	rdctl	r2,status
 400552c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005530:	e0fffb17 	ldw	r3,-20(fp)
 4005534:	00bfff84 	movi	r2,-2
 4005538:	1884703a 	and	r2,r3,r2
 400553c:	1001703a 	wrctl	status,r2
  
  return context;
 4005540:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4005544:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4005548:	e0bffc17 	ldw	r2,-16(fp)
 400554c:	10800817 	ldw	r2,32(r2)
 4005550:	10c00094 	ori	r3,r2,2
 4005554:	e0bffc17 	ldw	r2,-16(fp)
 4005558:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400555c:	e0bffc17 	ldw	r2,-16(fp)
 4005560:	10800017 	ldw	r2,0(r2)
 4005564:	10800104 	addi	r2,r2,4
 4005568:	1007883a 	mov	r3,r2
 400556c:	e0bffc17 	ldw	r2,-16(fp)
 4005570:	10800817 	ldw	r2,32(r2)
 4005574:	18800035 	stwio	r2,0(r3)
 4005578:	e0bffa17 	ldw	r2,-24(fp)
 400557c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005580:	e0bff817 	ldw	r2,-32(fp)
 4005584:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4005588:	e0bffe17 	ldw	r2,-8(fp)
 400558c:	0080100e 	bge	zero,r2,40055d0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4005590:	e0bfff17 	ldw	r2,-4(fp)
 4005594:	1090000c 	andi	r2,r2,16384
 4005598:	1000101e 	bne	r2,zero,40055dc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400559c:	0001883a 	nop
 40055a0:	e0bffc17 	ldw	r2,-16(fp)
 40055a4:	10c00d17 	ldw	r3,52(r2)
 40055a8:	e0bff517 	ldw	r2,-44(fp)
 40055ac:	1880051e 	bne	r3,r2,40055c4 <altera_avalon_jtag_uart_write+0x1b8>
 40055b0:	e0bffc17 	ldw	r2,-16(fp)
 40055b4:	10c00917 	ldw	r3,36(r2)
 40055b8:	e0bffc17 	ldw	r2,-16(fp)
 40055bc:	10800117 	ldw	r2,4(r2)
 40055c0:	18bff736 	bltu	r3,r2,40055a0 <__alt_data_end+0xfc0055a0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40055c4:	e0bffc17 	ldw	r2,-16(fp)
 40055c8:	10800917 	ldw	r2,36(r2)
 40055cc:	1000051e 	bne	r2,zero,40055e4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 40055d0:	e0bffe17 	ldw	r2,-8(fp)
 40055d4:	00bfd016 	blt	zero,r2,4005518 <__alt_data_end+0xfc005518>
 40055d8:	00000306 	br	40055e8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 40055dc:	0001883a 	nop
 40055e0:	00000106 	br	40055e8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 40055e4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 40055e8:	e0fffd17 	ldw	r3,-12(fp)
 40055ec:	e0bff717 	ldw	r2,-36(fp)
 40055f0:	18800426 	beq	r3,r2,4005604 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 40055f4:	e0fffd17 	ldw	r3,-12(fp)
 40055f8:	e0bff717 	ldw	r2,-36(fp)
 40055fc:	1885c83a 	sub	r2,r3,r2
 4005600:	00000606 	br	400561c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4005604:	e0bfff17 	ldw	r2,-4(fp)
 4005608:	1090000c 	andi	r2,r2,16384
 400560c:	10000226 	beq	r2,zero,4005618 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4005610:	00bffd44 	movi	r2,-11
 4005614:	00000106 	br	400561c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4005618:	00bffec4 	movi	r2,-5
}
 400561c:	e037883a 	mov	sp,fp
 4005620:	dfc00117 	ldw	ra,4(sp)
 4005624:	df000017 	ldw	fp,0(sp)
 4005628:	dec00204 	addi	sp,sp,8
 400562c:	f800283a 	ret

04005630 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 4005630:	defffe04 	addi	sp,sp,-8
 4005634:	df000115 	stw	fp,4(sp)
 4005638:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
 400563c:	d0a6f317 	ldw	r2,-25652(gp)
 4005640:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
 4005644:	d0a6f417 	ldw	r2,-25648(gp)
 4005648:	1000021e 	bne	r2,zero,4005654 <alt_timestamp_start+0x24>
  {
    return -1;
 400564c:	00bfffc4 	movi	r2,-1
 4005650:	00001106 	br	4005698 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 4005654:	e0bfff17 	ldw	r2,-4(fp)
 4005658:	10800104 	addi	r2,r2,4
 400565c:	00c00204 	movi	r3,8
 4005660:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 4005664:	e0bfff17 	ldw	r2,-4(fp)
 4005668:	10800204 	addi	r2,r2,8
 400566c:	00ffffd4 	movui	r3,65535
 4005670:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 4005674:	e0bfff17 	ldw	r2,-4(fp)
 4005678:	10800304 	addi	r2,r2,12
 400567c:	00ffffd4 	movui	r3,65535
 4005680:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 4005684:	e0bfff17 	ldw	r2,-4(fp)
 4005688:	10800104 	addi	r2,r2,4
 400568c:	00c00104 	movi	r3,4
 4005690:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
 4005694:	0005883a 	mov	r2,zero
}
 4005698:	e037883a 	mov	sp,fp
 400569c:	df000017 	ldw	fp,0(sp)
 40056a0:	dec00104 	addi	sp,sp,4
 40056a4:	f800283a 	ret

040056a8 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 40056a8:	defffc04 	addi	sp,sp,-16
 40056ac:	df000315 	stw	fp,12(sp)
 40056b0:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
 40056b4:	d0a6f317 	ldw	r2,-25652(gp)
 40056b8:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
 40056bc:	d0a6f417 	ldw	r2,-25648(gp)
 40056c0:	1000021e 	bne	r2,zero,40056cc <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
 40056c4:	00bfffc4 	movi	r2,-1
 40056c8:	00001306 	br	4005718 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 40056cc:	e0bffd17 	ldw	r2,-12(fp)
 40056d0:	10800404 	addi	r2,r2,16
 40056d4:	0007883a 	mov	r3,zero
 40056d8:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 40056dc:	e0bffd17 	ldw	r2,-12(fp)
 40056e0:	10800404 	addi	r2,r2,16
 40056e4:	10800037 	ldwio	r2,0(r2)
 40056e8:	10bfffcc 	andi	r2,r2,65535
 40056ec:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 40056f0:	e0bffd17 	ldw	r2,-12(fp)
 40056f4:	10800504 	addi	r2,r2,20
 40056f8:	10800037 	ldwio	r2,0(r2)
 40056fc:	10bfffcc 	andi	r2,r2,65535
 4005700:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 4005704:	e0bfff17 	ldw	r2,-4(fp)
 4005708:	1006943a 	slli	r3,r2,16
 400570c:	e0bffe17 	ldw	r2,-8(fp)
 4005710:	1884b03a 	or	r2,r3,r2
 4005714:	0084303a 	nor	r2,zero,r2
#endif
  }
}
 4005718:	e037883a 	mov	sp,fp
 400571c:	df000017 	ldw	fp,0(sp)
 4005720:	dec00104 	addi	sp,sp,4
 4005724:	f800283a 	ret

04005728 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 4005728:	deffff04 	addi	sp,sp,-4
 400572c:	df000015 	stw	fp,0(sp)
 4005730:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 4005734:	d0a6f417 	ldw	r2,-25648(gp)
}
 4005738:	e037883a 	mov	sp,fp
 400573c:	df000017 	ldw	fp,0(sp)
 4005740:	dec00104 	addi	sp,sp,4
 4005744:	f800283a 	ret

04005748 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4005748:	defffa04 	addi	sp,sp,-24
 400574c:	dfc00515 	stw	ra,20(sp)
 4005750:	df000415 	stw	fp,16(sp)
 4005754:	df000404 	addi	fp,sp,16
 4005758:	e13ffd15 	stw	r4,-12(fp)
 400575c:	e17ffe15 	stw	r5,-8(fp)
 4005760:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4005764:	e0bffd17 	ldw	r2,-12(fp)
 4005768:	10800017 	ldw	r2,0(r2)
 400576c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 4005770:	e0bffc17 	ldw	r2,-16(fp)
 4005774:	10c00a04 	addi	r3,r2,40
 4005778:	e0bffd17 	ldw	r2,-12(fp)
 400577c:	10800217 	ldw	r2,8(r2)
 4005780:	100f883a 	mov	r7,r2
 4005784:	e1bfff17 	ldw	r6,-4(fp)
 4005788:	e17ffe17 	ldw	r5,-8(fp)
 400578c:	1809883a 	mov	r4,r3
 4005790:	4005c5c0 	call	4005c5c <altera_avalon_uart_read>
      fd->fd_flags);
}
 4005794:	e037883a 	mov	sp,fp
 4005798:	dfc00117 	ldw	ra,4(sp)
 400579c:	df000017 	ldw	fp,0(sp)
 40057a0:	dec00204 	addi	sp,sp,8
 40057a4:	f800283a 	ret

040057a8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40057a8:	defffa04 	addi	sp,sp,-24
 40057ac:	dfc00515 	stw	ra,20(sp)
 40057b0:	df000415 	stw	fp,16(sp)
 40057b4:	df000404 	addi	fp,sp,16
 40057b8:	e13ffd15 	stw	r4,-12(fp)
 40057bc:	e17ffe15 	stw	r5,-8(fp)
 40057c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 40057c4:	e0bffd17 	ldw	r2,-12(fp)
 40057c8:	10800017 	ldw	r2,0(r2)
 40057cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 40057d0:	e0bffc17 	ldw	r2,-16(fp)
 40057d4:	10c00a04 	addi	r3,r2,40
 40057d8:	e0bffd17 	ldw	r2,-12(fp)
 40057dc:	10800217 	ldw	r2,8(r2)
 40057e0:	100f883a 	mov	r7,r2
 40057e4:	e1bfff17 	ldw	r6,-4(fp)
 40057e8:	e17ffe17 	ldw	r5,-8(fp)
 40057ec:	1809883a 	mov	r4,r3
 40057f0:	4005e740 	call	4005e74 <altera_avalon_uart_write>
      fd->fd_flags);
}
 40057f4:	e037883a 	mov	sp,fp
 40057f8:	dfc00117 	ldw	ra,4(sp)
 40057fc:	df000017 	ldw	fp,0(sp)
 4005800:	dec00204 	addi	sp,sp,8
 4005804:	f800283a 	ret

04005808 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 4005808:	defffc04 	addi	sp,sp,-16
 400580c:	dfc00315 	stw	ra,12(sp)
 4005810:	df000215 	stw	fp,8(sp)
 4005814:	df000204 	addi	fp,sp,8
 4005818:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400581c:	e0bfff17 	ldw	r2,-4(fp)
 4005820:	10800017 	ldw	r2,0(r2)
 4005824:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 4005828:	e0bffe17 	ldw	r2,-8(fp)
 400582c:	10c00a04 	addi	r3,r2,40
 4005830:	e0bfff17 	ldw	r2,-4(fp)
 4005834:	10800217 	ldw	r2,8(r2)
 4005838:	100b883a 	mov	r5,r2
 400583c:	1809883a 	mov	r4,r3
 4005840:	4005bcc0 	call	4005bcc <altera_avalon_uart_close>
}
 4005844:	e037883a 	mov	sp,fp
 4005848:	dfc00117 	ldw	ra,4(sp)
 400584c:	df000017 	ldw	fp,0(sp)
 4005850:	dec00204 	addi	sp,sp,8
 4005854:	f800283a 	ret

04005858 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 4005858:	defff804 	addi	sp,sp,-32
 400585c:	dfc00715 	stw	ra,28(sp)
 4005860:	df000615 	stw	fp,24(sp)
 4005864:	df000604 	addi	fp,sp,24
 4005868:	e13ffd15 	stw	r4,-12(fp)
 400586c:	e17ffe15 	stw	r5,-8(fp)
 4005870:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 4005874:	e0bffd17 	ldw	r2,-12(fp)
 4005878:	10800017 	ldw	r2,0(r2)
 400587c:	e0bffb15 	stw	r2,-20(fp)
 4005880:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 4005884:	1000041e 	bne	r2,zero,4005898 <altera_avalon_uart_init+0x40>
 4005888:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 400588c:	1000021e 	bne	r2,zero,4005898 <altera_avalon_uart_init+0x40>
 4005890:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 4005894:	10000226 	beq	r2,zero,40058a0 <altera_avalon_uart_init+0x48>
 4005898:	00800044 	movi	r2,1
 400589c:	00000106 	br	40058a4 <altera_avalon_uart_init+0x4c>
 40058a0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 40058a4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 40058a8:	e0bffc17 	ldw	r2,-16(fp)
 40058ac:	10000f1e 	bne	r2,zero,40058ec <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 40058b0:	e0bffd17 	ldw	r2,-12(fp)
 40058b4:	00c32004 	movi	r3,3200
 40058b8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 40058bc:	e0bffb17 	ldw	r2,-20(fp)
 40058c0:	10800304 	addi	r2,r2,12
 40058c4:	e0fffd17 	ldw	r3,-12(fp)
 40058c8:	18c00117 	ldw	r3,4(r3)
 40058cc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 40058d0:	d8000015 	stw	zero,0(sp)
 40058d4:	e1fffd17 	ldw	r7,-12(fp)
 40058d8:	01810034 	movhi	r6,1024
 40058dc:	31964104 	addi	r6,r6,22788
 40058e0:	e17fff17 	ldw	r5,-4(fp)
 40058e4:	e13ffe17 	ldw	r4,-8(fp)
 40058e8:	40065140 	call	4006514 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 40058ec:	0001883a 	nop
 40058f0:	e037883a 	mov	sp,fp
 40058f4:	dfc00117 	ldw	ra,4(sp)
 40058f8:	df000017 	ldw	fp,0(sp)
 40058fc:	dec00204 	addi	sp,sp,8
 4005900:	f800283a 	ret

04005904 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 4005904:	defffa04 	addi	sp,sp,-24
 4005908:	dfc00515 	stw	ra,20(sp)
 400590c:	df000415 	stw	fp,16(sp)
 4005910:	df000404 	addi	fp,sp,16
 4005914:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 4005918:	e0bfff17 	ldw	r2,-4(fp)
 400591c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 4005920:	e0bffc17 	ldw	r2,-16(fp)
 4005924:	10800017 	ldw	r2,0(r2)
 4005928:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 400592c:	e0bffd17 	ldw	r2,-12(fp)
 4005930:	10800204 	addi	r2,r2,8
 4005934:	10800037 	ldwio	r2,0(r2)
 4005938:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 400593c:	e0bffd17 	ldw	r2,-12(fp)
 4005940:	10800204 	addi	r2,r2,8
 4005944:	0007883a 	mov	r3,zero
 4005948:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 400594c:	e0bffd17 	ldw	r2,-12(fp)
 4005950:	10800204 	addi	r2,r2,8
 4005954:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 4005958:	e0bffe17 	ldw	r2,-8(fp)
 400595c:	1080200c 	andi	r2,r2,128
 4005960:	10000326 	beq	r2,zero,4005970 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 4005964:	e17ffe17 	ldw	r5,-8(fp)
 4005968:	e13ffc17 	ldw	r4,-16(fp)
 400596c:	40059a00 	call	40059a0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 4005970:	e0bffe17 	ldw	r2,-8(fp)
 4005974:	1081100c 	andi	r2,r2,1088
 4005978:	10000326 	beq	r2,zero,4005988 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 400597c:	e17ffe17 	ldw	r5,-8(fp)
 4005980:	e13ffc17 	ldw	r4,-16(fp)
 4005984:	4005a840 	call	4005a84 <altera_avalon_uart_txirq>
  }
  

}
 4005988:	0001883a 	nop
 400598c:	e037883a 	mov	sp,fp
 4005990:	dfc00117 	ldw	ra,4(sp)
 4005994:	df000017 	ldw	fp,0(sp)
 4005998:	dec00204 	addi	sp,sp,8
 400599c:	f800283a 	ret

040059a0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 40059a0:	defffc04 	addi	sp,sp,-16
 40059a4:	df000315 	stw	fp,12(sp)
 40059a8:	df000304 	addi	fp,sp,12
 40059ac:	e13ffe15 	stw	r4,-8(fp)
 40059b0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 40059b4:	e0bfff17 	ldw	r2,-4(fp)
 40059b8:	108000cc 	andi	r2,r2,3
 40059bc:	10002c1e 	bne	r2,zero,4005a70 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 40059c0:	e0bffe17 	ldw	r2,-8(fp)
 40059c4:	10800317 	ldw	r2,12(r2)
 40059c8:	e0bffe17 	ldw	r2,-8(fp)
 40059cc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 40059d0:	e0bffe17 	ldw	r2,-8(fp)
 40059d4:	10800317 	ldw	r2,12(r2)
 40059d8:	10800044 	addi	r2,r2,1
 40059dc:	10800fcc 	andi	r2,r2,63
 40059e0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 40059e4:	e0bffe17 	ldw	r2,-8(fp)
 40059e8:	10800317 	ldw	r2,12(r2)
 40059ec:	e0fffe17 	ldw	r3,-8(fp)
 40059f0:	18c00017 	ldw	r3,0(r3)
 40059f4:	18c00037 	ldwio	r3,0(r3)
 40059f8:	1809883a 	mov	r4,r3
 40059fc:	e0fffe17 	ldw	r3,-8(fp)
 4005a00:	1885883a 	add	r2,r3,r2
 4005a04:	10800704 	addi	r2,r2,28
 4005a08:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 4005a0c:	e0bffe17 	ldw	r2,-8(fp)
 4005a10:	e0fffd17 	ldw	r3,-12(fp)
 4005a14:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4005a18:	e0bffe17 	ldw	r2,-8(fp)
 4005a1c:	10800317 	ldw	r2,12(r2)
 4005a20:	10800044 	addi	r2,r2,1
 4005a24:	10800fcc 	andi	r2,r2,63
 4005a28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 4005a2c:	e0bffe17 	ldw	r2,-8(fp)
 4005a30:	10c00217 	ldw	r3,8(r2)
 4005a34:	e0bffd17 	ldw	r2,-12(fp)
 4005a38:	18800e1e 	bne	r3,r2,4005a74 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4005a3c:	e0bffe17 	ldw	r2,-8(fp)
 4005a40:	10c00117 	ldw	r3,4(r2)
 4005a44:	00bfdfc4 	movi	r2,-129
 4005a48:	1886703a 	and	r3,r3,r2
 4005a4c:	e0bffe17 	ldw	r2,-8(fp)
 4005a50:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 4005a54:	e0bffe17 	ldw	r2,-8(fp)
 4005a58:	10800017 	ldw	r2,0(r2)
 4005a5c:	10800304 	addi	r2,r2,12
 4005a60:	e0fffe17 	ldw	r3,-8(fp)
 4005a64:	18c00117 	ldw	r3,4(r3)
 4005a68:	10c00035 	stwio	r3,0(r2)
 4005a6c:	00000106 	br	4005a74 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 4005a70:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 4005a74:	e037883a 	mov	sp,fp
 4005a78:	df000017 	ldw	fp,0(sp)
 4005a7c:	dec00104 	addi	sp,sp,4
 4005a80:	f800283a 	ret

04005a84 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4005a84:	defffb04 	addi	sp,sp,-20
 4005a88:	df000415 	stw	fp,16(sp)
 4005a8c:	df000404 	addi	fp,sp,16
 4005a90:	e13ffc15 	stw	r4,-16(fp)
 4005a94:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 4005a98:	e0bffc17 	ldw	r2,-16(fp)
 4005a9c:	10c00417 	ldw	r3,16(r2)
 4005aa0:	e0bffc17 	ldw	r2,-16(fp)
 4005aa4:	10800517 	ldw	r2,20(r2)
 4005aa8:	18803226 	beq	r3,r2,4005b74 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 4005aac:	e0bffc17 	ldw	r2,-16(fp)
 4005ab0:	10800617 	ldw	r2,24(r2)
 4005ab4:	1080008c 	andi	r2,r2,2
 4005ab8:	10000326 	beq	r2,zero,4005ac8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 4005abc:	e0bffd17 	ldw	r2,-12(fp)
 4005ac0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 4005ac4:	10001d26 	beq	r2,zero,4005b3c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 4005ac8:	e0bffc17 	ldw	r2,-16(fp)
 4005acc:	10800417 	ldw	r2,16(r2)
 4005ad0:	e0bffc17 	ldw	r2,-16(fp)
 4005ad4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 4005ad8:	e0bffc17 	ldw	r2,-16(fp)
 4005adc:	10800017 	ldw	r2,0(r2)
 4005ae0:	10800104 	addi	r2,r2,4
 4005ae4:	e0fffc17 	ldw	r3,-16(fp)
 4005ae8:	18c00417 	ldw	r3,16(r3)
 4005aec:	e13ffc17 	ldw	r4,-16(fp)
 4005af0:	20c7883a 	add	r3,r4,r3
 4005af4:	18c01704 	addi	r3,r3,92
 4005af8:	18c00003 	ldbu	r3,0(r3)
 4005afc:	18c03fcc 	andi	r3,r3,255
 4005b00:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 4005b04:	e0bffc17 	ldw	r2,-16(fp)
 4005b08:	10800417 	ldw	r2,16(r2)
 4005b0c:	10800044 	addi	r2,r2,1
 4005b10:	e0fffc17 	ldw	r3,-16(fp)
 4005b14:	18800415 	stw	r2,16(r3)
 4005b18:	10c00fcc 	andi	r3,r2,63
 4005b1c:	e0bffc17 	ldw	r2,-16(fp)
 4005b20:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4005b24:	e0bffc17 	ldw	r2,-16(fp)
 4005b28:	10800117 	ldw	r2,4(r2)
 4005b2c:	10c01014 	ori	r3,r2,64
 4005b30:	e0bffc17 	ldw	r2,-16(fp)
 4005b34:	10c00115 	stw	r3,4(r2)
 4005b38:	00000e06 	br	4005b74 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 4005b3c:	e0bffc17 	ldw	r2,-16(fp)
 4005b40:	10800017 	ldw	r2,0(r2)
 4005b44:	10800204 	addi	r2,r2,8
 4005b48:	10800037 	ldwio	r2,0(r2)
 4005b4c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 4005b50:	e0bffd17 	ldw	r2,-12(fp)
 4005b54:	1082000c 	andi	r2,r2,2048
 4005b58:	1000061e 	bne	r2,zero,4005b74 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4005b5c:	e0bffc17 	ldw	r2,-16(fp)
 4005b60:	10c00117 	ldw	r3,4(r2)
 4005b64:	00bfefc4 	movi	r2,-65
 4005b68:	1886703a 	and	r3,r3,r2
 4005b6c:	e0bffc17 	ldw	r2,-16(fp)
 4005b70:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 4005b74:	e0bffc17 	ldw	r2,-16(fp)
 4005b78:	10c00417 	ldw	r3,16(r2)
 4005b7c:	e0bffc17 	ldw	r2,-16(fp)
 4005b80:	10800517 	ldw	r2,20(r2)
 4005b84:	1880061e 	bne	r3,r2,4005ba0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4005b88:	e0bffc17 	ldw	r2,-16(fp)
 4005b8c:	10c00117 	ldw	r3,4(r2)
 4005b90:	00beefc4 	movi	r2,-1089
 4005b94:	1886703a 	and	r3,r3,r2
 4005b98:	e0bffc17 	ldw	r2,-16(fp)
 4005b9c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4005ba0:	e0bffc17 	ldw	r2,-16(fp)
 4005ba4:	10800017 	ldw	r2,0(r2)
 4005ba8:	10800304 	addi	r2,r2,12
 4005bac:	e0fffc17 	ldw	r3,-16(fp)
 4005bb0:	18c00117 	ldw	r3,4(r3)
 4005bb4:	10c00035 	stwio	r3,0(r2)
}
 4005bb8:	0001883a 	nop
 4005bbc:	e037883a 	mov	sp,fp
 4005bc0:	df000017 	ldw	fp,0(sp)
 4005bc4:	dec00104 	addi	sp,sp,4
 4005bc8:	f800283a 	ret

04005bcc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 4005bcc:	defffd04 	addi	sp,sp,-12
 4005bd0:	df000215 	stw	fp,8(sp)
 4005bd4:	df000204 	addi	fp,sp,8
 4005bd8:	e13ffe15 	stw	r4,-8(fp)
 4005bdc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 4005be0:	00000506 	br	4005bf8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4005be4:	e0bfff17 	ldw	r2,-4(fp)
 4005be8:	1090000c 	andi	r2,r2,16384
 4005bec:	10000226 	beq	r2,zero,4005bf8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4005bf0:	00bffd44 	movi	r2,-11
 4005bf4:	00000606 	br	4005c10 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 4005bf8:	e0bffe17 	ldw	r2,-8(fp)
 4005bfc:	10c00417 	ldw	r3,16(r2)
 4005c00:	e0bffe17 	ldw	r2,-8(fp)
 4005c04:	10800517 	ldw	r2,20(r2)
 4005c08:	18bff61e 	bne	r3,r2,4005be4 <__alt_data_end+0xfc005be4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4005c0c:	0005883a 	mov	r2,zero
}
 4005c10:	e037883a 	mov	sp,fp
 4005c14:	df000017 	ldw	fp,0(sp)
 4005c18:	dec00104 	addi	sp,sp,4
 4005c1c:	f800283a 	ret

04005c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4005c20:	defffe04 	addi	sp,sp,-8
 4005c24:	dfc00115 	stw	ra,4(sp)
 4005c28:	df000015 	stw	fp,0(sp)
 4005c2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4005c30:	d0a00917 	ldw	r2,-32732(gp)
 4005c34:	10000326 	beq	r2,zero,4005c44 <alt_get_errno+0x24>
 4005c38:	d0a00917 	ldw	r2,-32732(gp)
 4005c3c:	103ee83a 	callr	r2
 4005c40:	00000106 	br	4005c48 <alt_get_errno+0x28>
 4005c44:	d0a6ef04 	addi	r2,gp,-25668
}
 4005c48:	e037883a 	mov	sp,fp
 4005c4c:	dfc00117 	ldw	ra,4(sp)
 4005c50:	df000017 	ldw	fp,0(sp)
 4005c54:	dec00204 	addi	sp,sp,8
 4005c58:	f800283a 	ret

04005c5c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 4005c5c:	defff204 	addi	sp,sp,-56
 4005c60:	dfc00d15 	stw	ra,52(sp)
 4005c64:	df000c15 	stw	fp,48(sp)
 4005c68:	df000c04 	addi	fp,sp,48
 4005c6c:	e13ffc15 	stw	r4,-16(fp)
 4005c70:	e17ffd15 	stw	r5,-12(fp)
 4005c74:	e1bffe15 	stw	r6,-8(fp)
 4005c78:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 4005c7c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 4005c80:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 4005c84:	e0bfff17 	ldw	r2,-4(fp)
 4005c88:	1090000c 	andi	r2,r2,16384
 4005c8c:	1005003a 	cmpeq	r2,r2,zero
 4005c90:	10803fcc 	andi	r2,r2,255
 4005c94:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 4005c98:	00001306 	br	4005ce8 <altera_avalon_uart_read+0x8c>
    {
      count++;
 4005c9c:	e0bff517 	ldw	r2,-44(fp)
 4005ca0:	10800044 	addi	r2,r2,1
 4005ca4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 4005ca8:	e0bffd17 	ldw	r2,-12(fp)
 4005cac:	10c00044 	addi	r3,r2,1
 4005cb0:	e0fffd15 	stw	r3,-12(fp)
 4005cb4:	e0fffc17 	ldw	r3,-16(fp)
 4005cb8:	18c00217 	ldw	r3,8(r3)
 4005cbc:	e13ffc17 	ldw	r4,-16(fp)
 4005cc0:	20c7883a 	add	r3,r4,r3
 4005cc4:	18c00704 	addi	r3,r3,28
 4005cc8:	18c00003 	ldbu	r3,0(r3)
 4005ccc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 4005cd0:	e0bffc17 	ldw	r2,-16(fp)
 4005cd4:	10800217 	ldw	r2,8(r2)
 4005cd8:	10800044 	addi	r2,r2,1
 4005cdc:	10c00fcc 	andi	r3,r2,63
 4005ce0:	e0bffc17 	ldw	r2,-16(fp)
 4005ce4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 4005ce8:	e0fff517 	ldw	r3,-44(fp)
 4005cec:	e0bffe17 	ldw	r2,-8(fp)
 4005cf0:	1880050e 	bge	r3,r2,4005d08 <altera_avalon_uart_read+0xac>
 4005cf4:	e0bffc17 	ldw	r2,-16(fp)
 4005cf8:	10c00217 	ldw	r3,8(r2)
 4005cfc:	e0bffc17 	ldw	r2,-16(fp)
 4005d00:	10800317 	ldw	r2,12(r2)
 4005d04:	18bfe51e 	bne	r3,r2,4005c9c <__alt_data_end+0xfc005c9c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 4005d08:	e0bff517 	ldw	r2,-44(fp)
 4005d0c:	1000251e 	bne	r2,zero,4005da4 <altera_avalon_uart_read+0x148>
 4005d10:	e0bffc17 	ldw	r2,-16(fp)
 4005d14:	10c00217 	ldw	r3,8(r2)
 4005d18:	e0bffc17 	ldw	r2,-16(fp)
 4005d1c:	10800317 	ldw	r2,12(r2)
 4005d20:	1880201e 	bne	r3,r2,4005da4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 4005d24:	e0bff617 	ldw	r2,-40(fp)
 4005d28:	1000071e 	bne	r2,zero,4005d48 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 4005d2c:	4005c200 	call	4005c20 <alt_get_errno>
 4005d30:	1007883a 	mov	r3,r2
 4005d34:	008002c4 	movi	r2,11
 4005d38:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 4005d3c:	00800044 	movi	r2,1
 4005d40:	e0bff405 	stb	r2,-48(fp)
        break;
 4005d44:	00001b06 	br	4005db4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005d48:	0005303a 	rdctl	r2,status
 4005d4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005d50:	e0fff917 	ldw	r3,-28(fp)
 4005d54:	00bfff84 	movi	r2,-2
 4005d58:	1884703a 	and	r2,r3,r2
 4005d5c:	1001703a 	wrctl	status,r2
  
  return context;
 4005d60:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 4005d64:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4005d68:	e0bffc17 	ldw	r2,-16(fp)
 4005d6c:	10800117 	ldw	r2,4(r2)
 4005d70:	10c02014 	ori	r3,r2,128
 4005d74:	e0bffc17 	ldw	r2,-16(fp)
 4005d78:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4005d7c:	e0bffc17 	ldw	r2,-16(fp)
 4005d80:	10800017 	ldw	r2,0(r2)
 4005d84:	10800304 	addi	r2,r2,12
 4005d88:	e0fffc17 	ldw	r3,-16(fp)
 4005d8c:	18c00117 	ldw	r3,4(r3)
 4005d90:	10c00035 	stwio	r3,0(r2)
 4005d94:	e0bff817 	ldw	r2,-32(fp)
 4005d98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005d9c:	e0bffa17 	ldw	r2,-24(fp)
 4005da0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 4005da4:	e0bff517 	ldw	r2,-44(fp)
 4005da8:	1000021e 	bne	r2,zero,4005db4 <altera_avalon_uart_read+0x158>
 4005dac:	e0bffe17 	ldw	r2,-8(fp)
 4005db0:	103fcd1e 	bne	r2,zero,4005ce8 <__alt_data_end+0xfc005ce8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005db4:	0005303a 	rdctl	r2,status
 4005db8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005dbc:	e0fffb17 	ldw	r3,-20(fp)
 4005dc0:	00bfff84 	movi	r2,-2
 4005dc4:	1884703a 	and	r2,r3,r2
 4005dc8:	1001703a 	wrctl	status,r2
  
  return context;
 4005dcc:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 4005dd0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4005dd4:	e0bffc17 	ldw	r2,-16(fp)
 4005dd8:	10800117 	ldw	r2,4(r2)
 4005ddc:	10c02014 	ori	r3,r2,128
 4005de0:	e0bffc17 	ldw	r2,-16(fp)
 4005de4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4005de8:	e0bffc17 	ldw	r2,-16(fp)
 4005dec:	10800017 	ldw	r2,0(r2)
 4005df0:	10800304 	addi	r2,r2,12
 4005df4:	e0fffc17 	ldw	r3,-16(fp)
 4005df8:	18c00117 	ldw	r3,4(r3)
 4005dfc:	10c00035 	stwio	r3,0(r2)
 4005e00:	e0bff817 	ldw	r2,-32(fp)
 4005e04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005e08:	e0bff717 	ldw	r2,-36(fp)
 4005e0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 4005e10:	e0bff403 	ldbu	r2,-48(fp)
 4005e14:	10000226 	beq	r2,zero,4005e20 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 4005e18:	00bffd44 	movi	r2,-11
 4005e1c:	00000106 	br	4005e24 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 4005e20:	e0bff517 	ldw	r2,-44(fp)
  }
}
 4005e24:	e037883a 	mov	sp,fp
 4005e28:	dfc00117 	ldw	ra,4(sp)
 4005e2c:	df000017 	ldw	fp,0(sp)
 4005e30:	dec00204 	addi	sp,sp,8
 4005e34:	f800283a 	ret

04005e38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4005e38:	defffe04 	addi	sp,sp,-8
 4005e3c:	dfc00115 	stw	ra,4(sp)
 4005e40:	df000015 	stw	fp,0(sp)
 4005e44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4005e48:	d0a00917 	ldw	r2,-32732(gp)
 4005e4c:	10000326 	beq	r2,zero,4005e5c <alt_get_errno+0x24>
 4005e50:	d0a00917 	ldw	r2,-32732(gp)
 4005e54:	103ee83a 	callr	r2
 4005e58:	00000106 	br	4005e60 <alt_get_errno+0x28>
 4005e5c:	d0a6ef04 	addi	r2,gp,-25668
}
 4005e60:	e037883a 	mov	sp,fp
 4005e64:	dfc00117 	ldw	ra,4(sp)
 4005e68:	df000017 	ldw	fp,0(sp)
 4005e6c:	dec00204 	addi	sp,sp,8
 4005e70:	f800283a 	ret

04005e74 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 4005e74:	defff204 	addi	sp,sp,-56
 4005e78:	dfc00d15 	stw	ra,52(sp)
 4005e7c:	df000c15 	stw	fp,48(sp)
 4005e80:	df000c04 	addi	fp,sp,48
 4005e84:	e13ffc15 	stw	r4,-16(fp)
 4005e88:	e17ffd15 	stw	r5,-12(fp)
 4005e8c:	e1bffe15 	stw	r6,-8(fp)
 4005e90:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 4005e94:	e0bffe17 	ldw	r2,-8(fp)
 4005e98:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 4005e9c:	e0bfff17 	ldw	r2,-4(fp)
 4005ea0:	1090000c 	andi	r2,r2,16384
 4005ea4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 4005ea8:	00003c06 	br	4005f9c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4005eac:	e0bffc17 	ldw	r2,-16(fp)
 4005eb0:	10800517 	ldw	r2,20(r2)
 4005eb4:	10800044 	addi	r2,r2,1
 4005eb8:	10800fcc 	andi	r2,r2,63
 4005ebc:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 4005ec0:	e0bffc17 	ldw	r2,-16(fp)
 4005ec4:	10c00417 	ldw	r3,16(r2)
 4005ec8:	e0bff717 	ldw	r2,-36(fp)
 4005ecc:	1880221e 	bne	r3,r2,4005f58 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 4005ed0:	e0bff517 	ldw	r2,-44(fp)
 4005ed4:	10000526 	beq	r2,zero,4005eec <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 4005ed8:	4005e380 	call	4005e38 <alt_get_errno>
 4005edc:	1007883a 	mov	r3,r2
 4005ee0:	008002c4 	movi	r2,11
 4005ee4:	18800015 	stw	r2,0(r3)
        break;
 4005ee8:	00002e06 	br	4005fa4 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005eec:	0005303a 	rdctl	r2,status
 4005ef0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005ef4:	e0fff917 	ldw	r3,-28(fp)
 4005ef8:	00bfff84 	movi	r2,-2
 4005efc:	1884703a 	and	r2,r3,r2
 4005f00:	1001703a 	wrctl	status,r2
  
  return context;
 4005f04:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 4005f08:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4005f0c:	e0bffc17 	ldw	r2,-16(fp)
 4005f10:	10800117 	ldw	r2,4(r2)
 4005f14:	10c11014 	ori	r3,r2,1088
 4005f18:	e0bffc17 	ldw	r2,-16(fp)
 4005f1c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4005f20:	e0bffc17 	ldw	r2,-16(fp)
 4005f24:	10800017 	ldw	r2,0(r2)
 4005f28:	10800304 	addi	r2,r2,12
 4005f2c:	e0fffc17 	ldw	r3,-16(fp)
 4005f30:	18c00117 	ldw	r3,4(r3)
 4005f34:	10c00035 	stwio	r3,0(r2)
 4005f38:	e0bff817 	ldw	r2,-32(fp)
 4005f3c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005f40:	e0bff617 	ldw	r2,-40(fp)
 4005f44:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 4005f48:	e0bffc17 	ldw	r2,-16(fp)
 4005f4c:	10c00417 	ldw	r3,16(r2)
 4005f50:	e0bff717 	ldw	r2,-36(fp)
 4005f54:	18bffc26 	beq	r3,r2,4005f48 <__alt_data_end+0xfc005f48>
      }
    }

    count--;
 4005f58:	e0bff417 	ldw	r2,-48(fp)
 4005f5c:	10bfffc4 	addi	r2,r2,-1
 4005f60:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 4005f64:	e0bffc17 	ldw	r2,-16(fp)
 4005f68:	10c00517 	ldw	r3,20(r2)
 4005f6c:	e0bffd17 	ldw	r2,-12(fp)
 4005f70:	11000044 	addi	r4,r2,1
 4005f74:	e13ffd15 	stw	r4,-12(fp)
 4005f78:	10800003 	ldbu	r2,0(r2)
 4005f7c:	1009883a 	mov	r4,r2
 4005f80:	e0bffc17 	ldw	r2,-16(fp)
 4005f84:	10c5883a 	add	r2,r2,r3
 4005f88:	10801704 	addi	r2,r2,92
 4005f8c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 4005f90:	e0bffc17 	ldw	r2,-16(fp)
 4005f94:	e0fff717 	ldw	r3,-36(fp)
 4005f98:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 4005f9c:	e0bff417 	ldw	r2,-48(fp)
 4005fa0:	103fc21e 	bne	r2,zero,4005eac <__alt_data_end+0xfc005eac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005fa4:	0005303a 	rdctl	r2,status
 4005fa8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005fac:	e0fffb17 	ldw	r3,-20(fp)
 4005fb0:	00bfff84 	movi	r2,-2
 4005fb4:	1884703a 	and	r2,r3,r2
 4005fb8:	1001703a 	wrctl	status,r2
  
  return context;
 4005fbc:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 4005fc0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4005fc4:	e0bffc17 	ldw	r2,-16(fp)
 4005fc8:	10800117 	ldw	r2,4(r2)
 4005fcc:	10c11014 	ori	r3,r2,1088
 4005fd0:	e0bffc17 	ldw	r2,-16(fp)
 4005fd4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4005fd8:	e0bffc17 	ldw	r2,-16(fp)
 4005fdc:	10800017 	ldw	r2,0(r2)
 4005fe0:	10800304 	addi	r2,r2,12
 4005fe4:	e0fffc17 	ldw	r3,-16(fp)
 4005fe8:	18c00117 	ldw	r3,4(r3)
 4005fec:	10c00035 	stwio	r3,0(r2)
 4005ff0:	e0bff817 	ldw	r2,-32(fp)
 4005ff4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005ff8:	e0bffa17 	ldw	r2,-24(fp)
 4005ffc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 4006000:	e0fffe17 	ldw	r3,-8(fp)
 4006004:	e0bff417 	ldw	r2,-48(fp)
 4006008:	1885c83a 	sub	r2,r3,r2
}
 400600c:	e037883a 	mov	sp,fp
 4006010:	dfc00117 	ldw	ra,4(sp)
 4006014:	df000017 	ldw	fp,0(sp)
 4006018:	dec00204 	addi	sp,sp,8
 400601c:	f800283a 	ret

04006020 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4006020:	defff504 	addi	sp,sp,-44
 4006024:	df000a15 	stw	fp,40(sp)
 4006028:	df000a04 	addi	fp,sp,40
 400602c:	e13ffc15 	stw	r4,-16(fp)
 4006030:	e17ffd15 	stw	r5,-12(fp)
 4006034:	e1bffe15 	stw	r6,-8(fp)
 4006038:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400603c:	e03ff615 	stw	zero,-40(fp)
 4006040:	d0a6f617 	ldw	r2,-25640(gp)
  
  if (alt_ticks_per_second ())
 4006044:	10003c26 	beq	r2,zero,4006138 <alt_alarm_start+0x118>
  {
    if (alarm)
 4006048:	e0bffc17 	ldw	r2,-16(fp)
 400604c:	10003826 	beq	r2,zero,4006130 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4006050:	e0bffc17 	ldw	r2,-16(fp)
 4006054:	e0fffe17 	ldw	r3,-8(fp)
 4006058:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400605c:	e0bffc17 	ldw	r2,-16(fp)
 4006060:	e0ffff17 	ldw	r3,-4(fp)
 4006064:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006068:	0005303a 	rdctl	r2,status
 400606c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006070:	e0fff917 	ldw	r3,-28(fp)
 4006074:	00bfff84 	movi	r2,-2
 4006078:	1884703a 	and	r2,r3,r2
 400607c:	1001703a 	wrctl	status,r2
  
  return context;
 4006080:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4006084:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4006088:	d0a6f717 	ldw	r2,-25636(gp)
      
      current_nticks = alt_nticks();
 400608c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4006090:	e0fffd17 	ldw	r3,-12(fp)
 4006094:	e0bff617 	ldw	r2,-40(fp)
 4006098:	1885883a 	add	r2,r3,r2
 400609c:	10c00044 	addi	r3,r2,1
 40060a0:	e0bffc17 	ldw	r2,-16(fp)
 40060a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 40060a8:	e0bffc17 	ldw	r2,-16(fp)
 40060ac:	10c00217 	ldw	r3,8(r2)
 40060b0:	e0bff617 	ldw	r2,-40(fp)
 40060b4:	1880042e 	bgeu	r3,r2,40060c8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 40060b8:	e0bffc17 	ldw	r2,-16(fp)
 40060bc:	00c00044 	movi	r3,1
 40060c0:	10c00405 	stb	r3,16(r2)
 40060c4:	00000206 	br	40060d0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 40060c8:	e0bffc17 	ldw	r2,-16(fp)
 40060cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 40060d0:	e0bffc17 	ldw	r2,-16(fp)
 40060d4:	d0e00e04 	addi	r3,gp,-32712
 40060d8:	e0fffa15 	stw	r3,-24(fp)
 40060dc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40060e0:	e0bffb17 	ldw	r2,-20(fp)
 40060e4:	e0fffa17 	ldw	r3,-24(fp)
 40060e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40060ec:	e0bffa17 	ldw	r2,-24(fp)
 40060f0:	10c00017 	ldw	r3,0(r2)
 40060f4:	e0bffb17 	ldw	r2,-20(fp)
 40060f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40060fc:	e0bffa17 	ldw	r2,-24(fp)
 4006100:	10800017 	ldw	r2,0(r2)
 4006104:	e0fffb17 	ldw	r3,-20(fp)
 4006108:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400610c:	e0bffa17 	ldw	r2,-24(fp)
 4006110:	e0fffb17 	ldw	r3,-20(fp)
 4006114:	10c00015 	stw	r3,0(r2)
 4006118:	e0bff817 	ldw	r2,-32(fp)
 400611c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006120:	e0bff717 	ldw	r2,-36(fp)
 4006124:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4006128:	0005883a 	mov	r2,zero
 400612c:	00000306 	br	400613c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4006130:	00bffa84 	movi	r2,-22
 4006134:	00000106 	br	400613c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4006138:	00bfde84 	movi	r2,-134
  }
}
 400613c:	e037883a 	mov	sp,fp
 4006140:	df000017 	ldw	fp,0(sp)
 4006144:	dec00104 	addi	sp,sp,4
 4006148:	f800283a 	ret

0400614c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400614c:	defffa04 	addi	sp,sp,-24
 4006150:	dfc00515 	stw	ra,20(sp)
 4006154:	df000415 	stw	fp,16(sp)
 4006158:	df000404 	addi	fp,sp,16
 400615c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4006160:	00800244 	movi	r2,9
 4006164:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4006168:	014003f4 	movhi	r5,15
 400616c:	29509004 	addi	r5,r5,16960
 4006170:	e13ffd17 	ldw	r4,-12(fp)
 4006174:	40024f40 	call	40024f4 <__mulsi3>
 4006178:	100b883a 	mov	r5,r2
 400617c:	01017db4 	movhi	r4,1526
 4006180:	21384004 	addi	r4,r4,-7936
 4006184:	40004480 	call	4000448 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4006188:	100b883a 	mov	r5,r2
 400618c:	01200034 	movhi	r4,32768
 4006190:	213fffc4 	addi	r4,r4,-1
 4006194:	40004480 	call	4000448 <__udivsi3>
 4006198:	100b883a 	mov	r5,r2
 400619c:	e13fff17 	ldw	r4,-4(fp)
 40061a0:	40004480 	call	4000448 <__udivsi3>
 40061a4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 40061a8:	e0bffe17 	ldw	r2,-8(fp)
 40061ac:	10002a26 	beq	r2,zero,4006258 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 40061b0:	e03ffc15 	stw	zero,-16(fp)
 40061b4:	00001706 	br	4006214 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40061b8:	00a00034 	movhi	r2,32768
 40061bc:	10bfffc4 	addi	r2,r2,-1
 40061c0:	10bfffc4 	addi	r2,r2,-1
 40061c4:	103ffe1e 	bne	r2,zero,40061c0 <__alt_data_end+0xfc0061c0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40061c8:	014003f4 	movhi	r5,15
 40061cc:	29509004 	addi	r5,r5,16960
 40061d0:	e13ffd17 	ldw	r4,-12(fp)
 40061d4:	40024f40 	call	40024f4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40061d8:	100b883a 	mov	r5,r2
 40061dc:	01017db4 	movhi	r4,1526
 40061e0:	21384004 	addi	r4,r4,-7936
 40061e4:	40004480 	call	4000448 <__udivsi3>
 40061e8:	100b883a 	mov	r5,r2
 40061ec:	01200034 	movhi	r4,32768
 40061f0:	213fffc4 	addi	r4,r4,-1
 40061f4:	40004480 	call	4000448 <__udivsi3>
 40061f8:	1007883a 	mov	r3,r2
 40061fc:	e0bfff17 	ldw	r2,-4(fp)
 4006200:	10c5c83a 	sub	r2,r2,r3
 4006204:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4006208:	e0bffc17 	ldw	r2,-16(fp)
 400620c:	10800044 	addi	r2,r2,1
 4006210:	e0bffc15 	stw	r2,-16(fp)
 4006214:	e0fffc17 	ldw	r3,-16(fp)
 4006218:	e0bffe17 	ldw	r2,-8(fp)
 400621c:	18bfe616 	blt	r3,r2,40061b8 <__alt_data_end+0xfc0061b8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4006220:	014003f4 	movhi	r5,15
 4006224:	29509004 	addi	r5,r5,16960
 4006228:	e13ffd17 	ldw	r4,-12(fp)
 400622c:	40024f40 	call	40024f4 <__mulsi3>
 4006230:	100b883a 	mov	r5,r2
 4006234:	01017db4 	movhi	r4,1526
 4006238:	21384004 	addi	r4,r4,-7936
 400623c:	40004480 	call	4000448 <__udivsi3>
 4006240:	e17fff17 	ldw	r5,-4(fp)
 4006244:	1009883a 	mov	r4,r2
 4006248:	40024f40 	call	40024f4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400624c:	10bfffc4 	addi	r2,r2,-1
 4006250:	103ffe1e 	bne	r2,zero,400624c <__alt_data_end+0xfc00624c>
 4006254:	00000d06 	br	400628c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4006258:	014003f4 	movhi	r5,15
 400625c:	29509004 	addi	r5,r5,16960
 4006260:	e13ffd17 	ldw	r4,-12(fp)
 4006264:	40024f40 	call	40024f4 <__mulsi3>
 4006268:	100b883a 	mov	r5,r2
 400626c:	01017db4 	movhi	r4,1526
 4006270:	21384004 	addi	r4,r4,-7936
 4006274:	40004480 	call	4000448 <__udivsi3>
 4006278:	e17fff17 	ldw	r5,-4(fp)
 400627c:	1009883a 	mov	r4,r2
 4006280:	40024f40 	call	40024f4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4006284:	10bfffc4 	addi	r2,r2,-1
 4006288:	00bffe16 	blt	zero,r2,4006284 <__alt_data_end+0xfc006284>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 400628c:	0005883a 	mov	r2,zero
}
 4006290:	e037883a 	mov	sp,fp
 4006294:	dfc00117 	ldw	ra,4(sp)
 4006298:	df000017 	ldw	fp,0(sp)
 400629c:	dec00204 	addi	sp,sp,8
 40062a0:	f800283a 	ret

040062a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40062a4:	deffff04 	addi	sp,sp,-4
 40062a8:	df000015 	stw	fp,0(sp)
 40062ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40062b0:	0001883a 	nop
 40062b4:	e037883a 	mov	sp,fp
 40062b8:	df000017 	ldw	fp,0(sp)
 40062bc:	dec00104 	addi	sp,sp,4
 40062c0:	f800283a 	ret

040062c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40062c4:	defffe04 	addi	sp,sp,-8
 40062c8:	dfc00115 	stw	ra,4(sp)
 40062cc:	df000015 	stw	fp,0(sp)
 40062d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40062d4:	d0a00917 	ldw	r2,-32732(gp)
 40062d8:	10000326 	beq	r2,zero,40062e8 <alt_get_errno+0x24>
 40062dc:	d0a00917 	ldw	r2,-32732(gp)
 40062e0:	103ee83a 	callr	r2
 40062e4:	00000106 	br	40062ec <alt_get_errno+0x28>
 40062e8:	d0a6ef04 	addi	r2,gp,-25668
}
 40062ec:	e037883a 	mov	sp,fp
 40062f0:	dfc00117 	ldw	ra,4(sp)
 40062f4:	df000017 	ldw	fp,0(sp)
 40062f8:	dec00204 	addi	sp,sp,8
 40062fc:	f800283a 	ret

04006300 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4006300:	defffa04 	addi	sp,sp,-24
 4006304:	dfc00515 	stw	ra,20(sp)
 4006308:	df000415 	stw	fp,16(sp)
 400630c:	df000404 	addi	fp,sp,16
 4006310:	e13ffe15 	stw	r4,-8(fp)
 4006314:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4006318:	e0bffe17 	ldw	r2,-8(fp)
 400631c:	10000326 	beq	r2,zero,400632c <alt_dev_llist_insert+0x2c>
 4006320:	e0bffe17 	ldw	r2,-8(fp)
 4006324:	10800217 	ldw	r2,8(r2)
 4006328:	1000061e 	bne	r2,zero,4006344 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400632c:	40062c40 	call	40062c4 <alt_get_errno>
 4006330:	1007883a 	mov	r3,r2
 4006334:	00800584 	movi	r2,22
 4006338:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400633c:	00bffa84 	movi	r2,-22
 4006340:	00001306 	br	4006390 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4006344:	e0bffe17 	ldw	r2,-8(fp)
 4006348:	e0ffff17 	ldw	r3,-4(fp)
 400634c:	e0fffc15 	stw	r3,-16(fp)
 4006350:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4006354:	e0bffd17 	ldw	r2,-12(fp)
 4006358:	e0fffc17 	ldw	r3,-16(fp)
 400635c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4006360:	e0bffc17 	ldw	r2,-16(fp)
 4006364:	10c00017 	ldw	r3,0(r2)
 4006368:	e0bffd17 	ldw	r2,-12(fp)
 400636c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4006370:	e0bffc17 	ldw	r2,-16(fp)
 4006374:	10800017 	ldw	r2,0(r2)
 4006378:	e0fffd17 	ldw	r3,-12(fp)
 400637c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4006380:	e0bffc17 	ldw	r2,-16(fp)
 4006384:	e0fffd17 	ldw	r3,-12(fp)
 4006388:	10c00015 	stw	r3,0(r2)

  return 0;  
 400638c:	0005883a 	mov	r2,zero
}
 4006390:	e037883a 	mov	sp,fp
 4006394:	dfc00117 	ldw	ra,4(sp)
 4006398:	df000017 	ldw	fp,0(sp)
 400639c:	dec00204 	addi	sp,sp,8
 40063a0:	f800283a 	ret

040063a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40063a4:	defffd04 	addi	sp,sp,-12
 40063a8:	dfc00215 	stw	ra,8(sp)
 40063ac:	df000115 	stw	fp,4(sp)
 40063b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40063b4:	00810034 	movhi	r2,1024
 40063b8:	109dc104 	addi	r2,r2,30468
 40063bc:	e0bfff15 	stw	r2,-4(fp)
 40063c0:	00000606 	br	40063dc <_do_ctors+0x38>
        (*ctor) (); 
 40063c4:	e0bfff17 	ldw	r2,-4(fp)
 40063c8:	10800017 	ldw	r2,0(r2)
 40063cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40063d0:	e0bfff17 	ldw	r2,-4(fp)
 40063d4:	10bfff04 	addi	r2,r2,-4
 40063d8:	e0bfff15 	stw	r2,-4(fp)
 40063dc:	e0ffff17 	ldw	r3,-4(fp)
 40063e0:	00810034 	movhi	r2,1024
 40063e4:	109dc204 	addi	r2,r2,30472
 40063e8:	18bff62e 	bgeu	r3,r2,40063c4 <__alt_data_end+0xfc0063c4>
        (*ctor) (); 
}
 40063ec:	0001883a 	nop
 40063f0:	e037883a 	mov	sp,fp
 40063f4:	dfc00117 	ldw	ra,4(sp)
 40063f8:	df000017 	ldw	fp,0(sp)
 40063fc:	dec00204 	addi	sp,sp,8
 4006400:	f800283a 	ret

04006404 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4006404:	defffd04 	addi	sp,sp,-12
 4006408:	dfc00215 	stw	ra,8(sp)
 400640c:	df000115 	stw	fp,4(sp)
 4006410:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4006414:	00810034 	movhi	r2,1024
 4006418:	109dc104 	addi	r2,r2,30468
 400641c:	e0bfff15 	stw	r2,-4(fp)
 4006420:	00000606 	br	400643c <_do_dtors+0x38>
        (*dtor) (); 
 4006424:	e0bfff17 	ldw	r2,-4(fp)
 4006428:	10800017 	ldw	r2,0(r2)
 400642c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4006430:	e0bfff17 	ldw	r2,-4(fp)
 4006434:	10bfff04 	addi	r2,r2,-4
 4006438:	e0bfff15 	stw	r2,-4(fp)
 400643c:	e0ffff17 	ldw	r3,-4(fp)
 4006440:	00810034 	movhi	r2,1024
 4006444:	109dc204 	addi	r2,r2,30472
 4006448:	18bff62e 	bgeu	r3,r2,4006424 <__alt_data_end+0xfc006424>
        (*dtor) (); 
}
 400644c:	0001883a 	nop
 4006450:	e037883a 	mov	sp,fp
 4006454:	dfc00117 	ldw	ra,4(sp)
 4006458:	df000017 	ldw	fp,0(sp)
 400645c:	dec00204 	addi	sp,sp,8
 4006460:	f800283a 	ret

04006464 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4006464:	defffa04 	addi	sp,sp,-24
 4006468:	dfc00515 	stw	ra,20(sp)
 400646c:	df000415 	stw	fp,16(sp)
 4006470:	df000404 	addi	fp,sp,16
 4006474:	e13ffe15 	stw	r4,-8(fp)
 4006478:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400647c:	e0bfff17 	ldw	r2,-4(fp)
 4006480:	10800017 	ldw	r2,0(r2)
 4006484:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4006488:	e13ffe17 	ldw	r4,-8(fp)
 400648c:	40073a40 	call	40073a4 <strlen>
 4006490:	10800044 	addi	r2,r2,1
 4006494:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4006498:	00000d06 	br	40064d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400649c:	e0bffc17 	ldw	r2,-16(fp)
 40064a0:	10800217 	ldw	r2,8(r2)
 40064a4:	e0fffd17 	ldw	r3,-12(fp)
 40064a8:	180d883a 	mov	r6,r3
 40064ac:	e17ffe17 	ldw	r5,-8(fp)
 40064b0:	1009883a 	mov	r4,r2
 40064b4:	40071e00 	call	40071e0 <memcmp>
 40064b8:	1000021e 	bne	r2,zero,40064c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40064bc:	e0bffc17 	ldw	r2,-16(fp)
 40064c0:	00000706 	br	40064e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40064c4:	e0bffc17 	ldw	r2,-16(fp)
 40064c8:	10800017 	ldw	r2,0(r2)
 40064cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40064d0:	e0fffc17 	ldw	r3,-16(fp)
 40064d4:	e0bfff17 	ldw	r2,-4(fp)
 40064d8:	18bff01e 	bne	r3,r2,400649c <__alt_data_end+0xfc00649c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40064dc:	0005883a 	mov	r2,zero
}
 40064e0:	e037883a 	mov	sp,fp
 40064e4:	dfc00117 	ldw	ra,4(sp)
 40064e8:	df000017 	ldw	fp,0(sp)
 40064ec:	dec00204 	addi	sp,sp,8
 40064f0:	f800283a 	ret

040064f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40064f4:	deffff04 	addi	sp,sp,-4
 40064f8:	df000015 	stw	fp,0(sp)
 40064fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4006500:	0001883a 	nop
 4006504:	e037883a 	mov	sp,fp
 4006508:	df000017 	ldw	fp,0(sp)
 400650c:	dec00104 	addi	sp,sp,4
 4006510:	f800283a 	ret

04006514 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4006514:	defff904 	addi	sp,sp,-28
 4006518:	dfc00615 	stw	ra,24(sp)
 400651c:	df000515 	stw	fp,20(sp)
 4006520:	df000504 	addi	fp,sp,20
 4006524:	e13ffc15 	stw	r4,-16(fp)
 4006528:	e17ffd15 	stw	r5,-12(fp)
 400652c:	e1bffe15 	stw	r6,-8(fp)
 4006530:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4006534:	e0800217 	ldw	r2,8(fp)
 4006538:	d8800015 	stw	r2,0(sp)
 400653c:	e1ffff17 	ldw	r7,-4(fp)
 4006540:	e1bffe17 	ldw	r6,-8(fp)
 4006544:	e17ffd17 	ldw	r5,-12(fp)
 4006548:	e13ffc17 	ldw	r4,-16(fp)
 400654c:	40066c40 	call	40066c4 <alt_iic_isr_register>
}  
 4006550:	e037883a 	mov	sp,fp
 4006554:	dfc00117 	ldw	ra,4(sp)
 4006558:	df000017 	ldw	fp,0(sp)
 400655c:	dec00204 	addi	sp,sp,8
 4006560:	f800283a 	ret

04006564 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4006564:	defff904 	addi	sp,sp,-28
 4006568:	df000615 	stw	fp,24(sp)
 400656c:	df000604 	addi	fp,sp,24
 4006570:	e13ffe15 	stw	r4,-8(fp)
 4006574:	e17fff15 	stw	r5,-4(fp)
 4006578:	e0bfff17 	ldw	r2,-4(fp)
 400657c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006580:	0005303a 	rdctl	r2,status
 4006584:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006588:	e0fffb17 	ldw	r3,-20(fp)
 400658c:	00bfff84 	movi	r2,-2
 4006590:	1884703a 	and	r2,r3,r2
 4006594:	1001703a 	wrctl	status,r2
  
  return context;
 4006598:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400659c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 40065a0:	00c00044 	movi	r3,1
 40065a4:	e0bffa17 	ldw	r2,-24(fp)
 40065a8:	1884983a 	sll	r2,r3,r2
 40065ac:	1007883a 	mov	r3,r2
 40065b0:	d0a6f517 	ldw	r2,-25644(gp)
 40065b4:	1884b03a 	or	r2,r3,r2
 40065b8:	d0a6f515 	stw	r2,-25644(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40065bc:	d0a6f517 	ldw	r2,-25644(gp)
 40065c0:	100170fa 	wrctl	ienable,r2
 40065c4:	e0bffc17 	ldw	r2,-16(fp)
 40065c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40065cc:	e0bffd17 	ldw	r2,-12(fp)
 40065d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40065d4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 40065d8:	0001883a 	nop
}
 40065dc:	e037883a 	mov	sp,fp
 40065e0:	df000017 	ldw	fp,0(sp)
 40065e4:	dec00104 	addi	sp,sp,4
 40065e8:	f800283a 	ret

040065ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40065ec:	defff904 	addi	sp,sp,-28
 40065f0:	df000615 	stw	fp,24(sp)
 40065f4:	df000604 	addi	fp,sp,24
 40065f8:	e13ffe15 	stw	r4,-8(fp)
 40065fc:	e17fff15 	stw	r5,-4(fp)
 4006600:	e0bfff17 	ldw	r2,-4(fp)
 4006604:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006608:	0005303a 	rdctl	r2,status
 400660c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006610:	e0fffb17 	ldw	r3,-20(fp)
 4006614:	00bfff84 	movi	r2,-2
 4006618:	1884703a 	and	r2,r3,r2
 400661c:	1001703a 	wrctl	status,r2
  
  return context;
 4006620:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4006624:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4006628:	00c00044 	movi	r3,1
 400662c:	e0bffa17 	ldw	r2,-24(fp)
 4006630:	1884983a 	sll	r2,r3,r2
 4006634:	0084303a 	nor	r2,zero,r2
 4006638:	1007883a 	mov	r3,r2
 400663c:	d0a6f517 	ldw	r2,-25644(gp)
 4006640:	1884703a 	and	r2,r3,r2
 4006644:	d0a6f515 	stw	r2,-25644(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4006648:	d0a6f517 	ldw	r2,-25644(gp)
 400664c:	100170fa 	wrctl	ienable,r2
 4006650:	e0bffc17 	ldw	r2,-16(fp)
 4006654:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006658:	e0bffd17 	ldw	r2,-12(fp)
 400665c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4006660:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4006664:	0001883a 	nop
}
 4006668:	e037883a 	mov	sp,fp
 400666c:	df000017 	ldw	fp,0(sp)
 4006670:	dec00104 	addi	sp,sp,4
 4006674:	f800283a 	ret

04006678 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4006678:	defffc04 	addi	sp,sp,-16
 400667c:	df000315 	stw	fp,12(sp)
 4006680:	df000304 	addi	fp,sp,12
 4006684:	e13ffe15 	stw	r4,-8(fp)
 4006688:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400668c:	000530fa 	rdctl	r2,ienable
 4006690:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4006694:	00c00044 	movi	r3,1
 4006698:	e0bfff17 	ldw	r2,-4(fp)
 400669c:	1884983a 	sll	r2,r3,r2
 40066a0:	1007883a 	mov	r3,r2
 40066a4:	e0bffd17 	ldw	r2,-12(fp)
 40066a8:	1884703a 	and	r2,r3,r2
 40066ac:	1004c03a 	cmpne	r2,r2,zero
 40066b0:	10803fcc 	andi	r2,r2,255
}
 40066b4:	e037883a 	mov	sp,fp
 40066b8:	df000017 	ldw	fp,0(sp)
 40066bc:	dec00104 	addi	sp,sp,4
 40066c0:	f800283a 	ret

040066c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40066c4:	defff504 	addi	sp,sp,-44
 40066c8:	dfc00a15 	stw	ra,40(sp)
 40066cc:	df000915 	stw	fp,36(sp)
 40066d0:	df000904 	addi	fp,sp,36
 40066d4:	e13ffc15 	stw	r4,-16(fp)
 40066d8:	e17ffd15 	stw	r5,-12(fp)
 40066dc:	e1bffe15 	stw	r6,-8(fp)
 40066e0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40066e4:	00bffa84 	movi	r2,-22
 40066e8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40066ec:	e0bffd17 	ldw	r2,-12(fp)
 40066f0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40066f4:	e0bff817 	ldw	r2,-32(fp)
 40066f8:	10800808 	cmpgei	r2,r2,32
 40066fc:	1000271e 	bne	r2,zero,400679c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006700:	0005303a 	rdctl	r2,status
 4006704:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006708:	e0fffb17 	ldw	r3,-20(fp)
 400670c:	00bfff84 	movi	r2,-2
 4006710:	1884703a 	and	r2,r3,r2
 4006714:	1001703a 	wrctl	status,r2
  
  return context;
 4006718:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400671c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4006720:	00810074 	movhi	r2,1025
 4006724:	10abac04 	addi	r2,r2,-20816
 4006728:	e0fff817 	ldw	r3,-32(fp)
 400672c:	180690fa 	slli	r3,r3,3
 4006730:	10c5883a 	add	r2,r2,r3
 4006734:	e0fffe17 	ldw	r3,-8(fp)
 4006738:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400673c:	00810074 	movhi	r2,1025
 4006740:	10abac04 	addi	r2,r2,-20816
 4006744:	e0fff817 	ldw	r3,-32(fp)
 4006748:	180690fa 	slli	r3,r3,3
 400674c:	10c5883a 	add	r2,r2,r3
 4006750:	10800104 	addi	r2,r2,4
 4006754:	e0ffff17 	ldw	r3,-4(fp)
 4006758:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400675c:	e0bffe17 	ldw	r2,-8(fp)
 4006760:	10000526 	beq	r2,zero,4006778 <alt_iic_isr_register+0xb4>
 4006764:	e0bff817 	ldw	r2,-32(fp)
 4006768:	100b883a 	mov	r5,r2
 400676c:	e13ffc17 	ldw	r4,-16(fp)
 4006770:	40065640 	call	4006564 <alt_ic_irq_enable>
 4006774:	00000406 	br	4006788 <alt_iic_isr_register+0xc4>
 4006778:	e0bff817 	ldw	r2,-32(fp)
 400677c:	100b883a 	mov	r5,r2
 4006780:	e13ffc17 	ldw	r4,-16(fp)
 4006784:	40065ec0 	call	40065ec <alt_ic_irq_disable>
 4006788:	e0bff715 	stw	r2,-36(fp)
 400678c:	e0bffa17 	ldw	r2,-24(fp)
 4006790:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006794:	e0bff917 	ldw	r2,-28(fp)
 4006798:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400679c:	e0bff717 	ldw	r2,-36(fp)
}
 40067a0:	e037883a 	mov	sp,fp
 40067a4:	dfc00117 	ldw	ra,4(sp)
 40067a8:	df000017 	ldw	fp,0(sp)
 40067ac:	dec00204 	addi	sp,sp,8
 40067b0:	f800283a 	ret

040067b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40067b4:	defff804 	addi	sp,sp,-32
 40067b8:	dfc00715 	stw	ra,28(sp)
 40067bc:	df000615 	stw	fp,24(sp)
 40067c0:	dc000515 	stw	r16,20(sp)
 40067c4:	df000604 	addi	fp,sp,24
 40067c8:	e13ffb15 	stw	r4,-20(fp)
 40067cc:	e17ffc15 	stw	r5,-16(fp)
 40067d0:	e1bffd15 	stw	r6,-12(fp)
 40067d4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 40067d8:	e1bffe17 	ldw	r6,-8(fp)
 40067dc:	e17ffd17 	ldw	r5,-12(fp)
 40067e0:	e13ffc17 	ldw	r4,-16(fp)
 40067e4:	4006a3c0 	call	4006a3c <open>
 40067e8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 40067ec:	e0bffa17 	ldw	r2,-24(fp)
 40067f0:	10002216 	blt	r2,zero,400687c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 40067f4:	04010034 	movhi	r16,1024
 40067f8:	841ff304 	addi	r16,r16,32716
 40067fc:	e0bffa17 	ldw	r2,-24(fp)
 4006800:	01400304 	movi	r5,12
 4006804:	1009883a 	mov	r4,r2
 4006808:	40024f40 	call	40024f4 <__mulsi3>
 400680c:	8085883a 	add	r2,r16,r2
 4006810:	10c00017 	ldw	r3,0(r2)
 4006814:	e0bffb17 	ldw	r2,-20(fp)
 4006818:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400681c:	04010034 	movhi	r16,1024
 4006820:	841ff304 	addi	r16,r16,32716
 4006824:	e0bffa17 	ldw	r2,-24(fp)
 4006828:	01400304 	movi	r5,12
 400682c:	1009883a 	mov	r4,r2
 4006830:	40024f40 	call	40024f4 <__mulsi3>
 4006834:	8085883a 	add	r2,r16,r2
 4006838:	10800104 	addi	r2,r2,4
 400683c:	10c00017 	ldw	r3,0(r2)
 4006840:	e0bffb17 	ldw	r2,-20(fp)
 4006844:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4006848:	04010034 	movhi	r16,1024
 400684c:	841ff304 	addi	r16,r16,32716
 4006850:	e0bffa17 	ldw	r2,-24(fp)
 4006854:	01400304 	movi	r5,12
 4006858:	1009883a 	mov	r4,r2
 400685c:	40024f40 	call	40024f4 <__mulsi3>
 4006860:	8085883a 	add	r2,r16,r2
 4006864:	10800204 	addi	r2,r2,8
 4006868:	10c00017 	ldw	r3,0(r2)
 400686c:	e0bffb17 	ldw	r2,-20(fp)
 4006870:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4006874:	e13ffa17 	ldw	r4,-24(fp)
 4006878:	4002c400 	call	4002c40 <alt_release_fd>
  }
} 
 400687c:	0001883a 	nop
 4006880:	e6ffff04 	addi	sp,fp,-4
 4006884:	dfc00217 	ldw	ra,8(sp)
 4006888:	df000117 	ldw	fp,4(sp)
 400688c:	dc000017 	ldw	r16,0(sp)
 4006890:	dec00304 	addi	sp,sp,12
 4006894:	f800283a 	ret

04006898 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4006898:	defffb04 	addi	sp,sp,-20
 400689c:	dfc00415 	stw	ra,16(sp)
 40068a0:	df000315 	stw	fp,12(sp)
 40068a4:	df000304 	addi	fp,sp,12
 40068a8:	e13ffd15 	stw	r4,-12(fp)
 40068ac:	e17ffe15 	stw	r5,-8(fp)
 40068b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40068b4:	01c07fc4 	movi	r7,511
 40068b8:	01800044 	movi	r6,1
 40068bc:	e17ffd17 	ldw	r5,-12(fp)
 40068c0:	01010034 	movhi	r4,1024
 40068c4:	211ff604 	addi	r4,r4,32728
 40068c8:	40067b40 	call	40067b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40068cc:	01c07fc4 	movi	r7,511
 40068d0:	000d883a 	mov	r6,zero
 40068d4:	e17ffe17 	ldw	r5,-8(fp)
 40068d8:	01010034 	movhi	r4,1024
 40068dc:	211ff304 	addi	r4,r4,32716
 40068e0:	40067b40 	call	40067b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40068e4:	01c07fc4 	movi	r7,511
 40068e8:	01800044 	movi	r6,1
 40068ec:	e17fff17 	ldw	r5,-4(fp)
 40068f0:	01010034 	movhi	r4,1024
 40068f4:	211ff904 	addi	r4,r4,32740
 40068f8:	40067b40 	call	40067b4 <alt_open_fd>
}  
 40068fc:	0001883a 	nop
 4006900:	e037883a 	mov	sp,fp
 4006904:	dfc00117 	ldw	ra,4(sp)
 4006908:	df000017 	ldw	fp,0(sp)
 400690c:	dec00204 	addi	sp,sp,8
 4006910:	f800283a 	ret

04006914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4006914:	defffe04 	addi	sp,sp,-8
 4006918:	dfc00115 	stw	ra,4(sp)
 400691c:	df000015 	stw	fp,0(sp)
 4006920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4006924:	d0a00917 	ldw	r2,-32732(gp)
 4006928:	10000326 	beq	r2,zero,4006938 <alt_get_errno+0x24>
 400692c:	d0a00917 	ldw	r2,-32732(gp)
 4006930:	103ee83a 	callr	r2
 4006934:	00000106 	br	400693c <alt_get_errno+0x28>
 4006938:	d0a6ef04 	addi	r2,gp,-25668
}
 400693c:	e037883a 	mov	sp,fp
 4006940:	dfc00117 	ldw	ra,4(sp)
 4006944:	df000017 	ldw	fp,0(sp)
 4006948:	dec00204 	addi	sp,sp,8
 400694c:	f800283a 	ret

04006950 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4006950:	defffb04 	addi	sp,sp,-20
 4006954:	dfc00415 	stw	ra,16(sp)
 4006958:	df000315 	stw	fp,12(sp)
 400695c:	dc000215 	stw	r16,8(sp)
 4006960:	df000304 	addi	fp,sp,12
 4006964:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4006968:	e0bffe17 	ldw	r2,-8(fp)
 400696c:	10800217 	ldw	r2,8(r2)
 4006970:	10d00034 	orhi	r3,r2,16384
 4006974:	e0bffe17 	ldw	r2,-8(fp)
 4006978:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400697c:	e03ffd15 	stw	zero,-12(fp)
 4006980:	00002306 	br	4006a10 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4006984:	04010034 	movhi	r16,1024
 4006988:	841ff304 	addi	r16,r16,32716
 400698c:	e0bffd17 	ldw	r2,-12(fp)
 4006990:	01400304 	movi	r5,12
 4006994:	1009883a 	mov	r4,r2
 4006998:	40024f40 	call	40024f4 <__mulsi3>
 400699c:	8085883a 	add	r2,r16,r2
 40069a0:	10c00017 	ldw	r3,0(r2)
 40069a4:	e0bffe17 	ldw	r2,-8(fp)
 40069a8:	10800017 	ldw	r2,0(r2)
 40069ac:	1880151e 	bne	r3,r2,4006a04 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40069b0:	04010034 	movhi	r16,1024
 40069b4:	841ff304 	addi	r16,r16,32716
 40069b8:	e0bffd17 	ldw	r2,-12(fp)
 40069bc:	01400304 	movi	r5,12
 40069c0:	1009883a 	mov	r4,r2
 40069c4:	40024f40 	call	40024f4 <__mulsi3>
 40069c8:	8085883a 	add	r2,r16,r2
 40069cc:	10800204 	addi	r2,r2,8
 40069d0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40069d4:	10000b0e 	bge	r2,zero,4006a04 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40069d8:	01400304 	movi	r5,12
 40069dc:	e13ffd17 	ldw	r4,-12(fp)
 40069e0:	40024f40 	call	40024f4 <__mulsi3>
 40069e4:	1007883a 	mov	r3,r2
 40069e8:	00810034 	movhi	r2,1024
 40069ec:	109ff304 	addi	r2,r2,32716
 40069f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40069f4:	e0bffe17 	ldw	r2,-8(fp)
 40069f8:	18800226 	beq	r3,r2,4006a04 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40069fc:	00bffcc4 	movi	r2,-13
 4006a00:	00000806 	br	4006a24 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4006a04:	e0bffd17 	ldw	r2,-12(fp)
 4006a08:	10800044 	addi	r2,r2,1
 4006a0c:	e0bffd15 	stw	r2,-12(fp)
 4006a10:	d0a00817 	ldw	r2,-32736(gp)
 4006a14:	1007883a 	mov	r3,r2
 4006a18:	e0bffd17 	ldw	r2,-12(fp)
 4006a1c:	18bfd92e 	bgeu	r3,r2,4006984 <__alt_data_end+0xfc006984>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4006a20:	0005883a 	mov	r2,zero
}
 4006a24:	e6ffff04 	addi	sp,fp,-4
 4006a28:	dfc00217 	ldw	ra,8(sp)
 4006a2c:	df000117 	ldw	fp,4(sp)
 4006a30:	dc000017 	ldw	r16,0(sp)
 4006a34:	dec00304 	addi	sp,sp,12
 4006a38:	f800283a 	ret

04006a3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4006a3c:	defff604 	addi	sp,sp,-40
 4006a40:	dfc00915 	stw	ra,36(sp)
 4006a44:	df000815 	stw	fp,32(sp)
 4006a48:	df000804 	addi	fp,sp,32
 4006a4c:	e13ffd15 	stw	r4,-12(fp)
 4006a50:	e17ffe15 	stw	r5,-8(fp)
 4006a54:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4006a58:	00bfffc4 	movi	r2,-1
 4006a5c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4006a60:	00bffb44 	movi	r2,-19
 4006a64:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4006a68:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4006a6c:	d1600604 	addi	r5,gp,-32744
 4006a70:	e13ffd17 	ldw	r4,-12(fp)
 4006a74:	40064640 	call	4006464 <alt_find_dev>
 4006a78:	e0bff815 	stw	r2,-32(fp)
 4006a7c:	e0bff817 	ldw	r2,-32(fp)
 4006a80:	1000051e 	bne	r2,zero,4006a98 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4006a84:	e13ffd17 	ldw	r4,-12(fp)
 4006a88:	4006fc80 	call	4006fc8 <alt_find_file>
 4006a8c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4006a90:	00800044 	movi	r2,1
 4006a94:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4006a98:	e0bff817 	ldw	r2,-32(fp)
 4006a9c:	10002b26 	beq	r2,zero,4006b4c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4006aa0:	e13ff817 	ldw	r4,-32(fp)
 4006aa4:	40070d00 	call	40070d0 <alt_get_fd>
 4006aa8:	e0bff915 	stw	r2,-28(fp)
 4006aac:	e0bff917 	ldw	r2,-28(fp)
 4006ab0:	1000030e 	bge	r2,zero,4006ac0 <open+0x84>
    {
      status = index;
 4006ab4:	e0bff917 	ldw	r2,-28(fp)
 4006ab8:	e0bffa15 	stw	r2,-24(fp)
 4006abc:	00002506 	br	4006b54 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4006ac0:	01400304 	movi	r5,12
 4006ac4:	e13ff917 	ldw	r4,-28(fp)
 4006ac8:	40024f40 	call	40024f4 <__mulsi3>
 4006acc:	1007883a 	mov	r3,r2
 4006ad0:	00810034 	movhi	r2,1024
 4006ad4:	109ff304 	addi	r2,r2,32716
 4006ad8:	1885883a 	add	r2,r3,r2
 4006adc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4006ae0:	e0fffe17 	ldw	r3,-8(fp)
 4006ae4:	00900034 	movhi	r2,16384
 4006ae8:	10bfffc4 	addi	r2,r2,-1
 4006aec:	1886703a 	and	r3,r3,r2
 4006af0:	e0bffc17 	ldw	r2,-16(fp)
 4006af4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4006af8:	e0bffb17 	ldw	r2,-20(fp)
 4006afc:	1000051e 	bne	r2,zero,4006b14 <open+0xd8>
 4006b00:	e13ffc17 	ldw	r4,-16(fp)
 4006b04:	40069500 	call	4006950 <alt_file_locked>
 4006b08:	e0bffa15 	stw	r2,-24(fp)
 4006b0c:	e0bffa17 	ldw	r2,-24(fp)
 4006b10:	10001016 	blt	r2,zero,4006b54 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4006b14:	e0bff817 	ldw	r2,-32(fp)
 4006b18:	10800317 	ldw	r2,12(r2)
 4006b1c:	10000826 	beq	r2,zero,4006b40 <open+0x104>
 4006b20:	e0bff817 	ldw	r2,-32(fp)
 4006b24:	10800317 	ldw	r2,12(r2)
 4006b28:	e1ffff17 	ldw	r7,-4(fp)
 4006b2c:	e1bffe17 	ldw	r6,-8(fp)
 4006b30:	e17ffd17 	ldw	r5,-12(fp)
 4006b34:	e13ffc17 	ldw	r4,-16(fp)
 4006b38:	103ee83a 	callr	r2
 4006b3c:	00000106 	br	4006b44 <open+0x108>
 4006b40:	0005883a 	mov	r2,zero
 4006b44:	e0bffa15 	stw	r2,-24(fp)
 4006b48:	00000206 	br	4006b54 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4006b4c:	00bffb44 	movi	r2,-19
 4006b50:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4006b54:	e0bffa17 	ldw	r2,-24(fp)
 4006b58:	1000090e 	bge	r2,zero,4006b80 <open+0x144>
  {
    alt_release_fd (index);  
 4006b5c:	e13ff917 	ldw	r4,-28(fp)
 4006b60:	4002c400 	call	4002c40 <alt_release_fd>
    ALT_ERRNO = -status;
 4006b64:	40069140 	call	4006914 <alt_get_errno>
 4006b68:	1007883a 	mov	r3,r2
 4006b6c:	e0bffa17 	ldw	r2,-24(fp)
 4006b70:	0085c83a 	sub	r2,zero,r2
 4006b74:	18800015 	stw	r2,0(r3)
    return -1;
 4006b78:	00bfffc4 	movi	r2,-1
 4006b7c:	00000106 	br	4006b84 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4006b80:	e0bff917 	ldw	r2,-28(fp)
}
 4006b84:	e037883a 	mov	sp,fp
 4006b88:	dfc00117 	ldw	ra,4(sp)
 4006b8c:	df000017 	ldw	fp,0(sp)
 4006b90:	dec00204 	addi	sp,sp,8
 4006b94:	f800283a 	ret

04006b98 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 4006b98:	defff204 	addi	sp,sp,-56
 4006b9c:	dfc00a15 	stw	ra,40(sp)
 4006ba0:	df000915 	stw	fp,36(sp)
 4006ba4:	df000904 	addi	fp,sp,36
 4006ba8:	e13fff15 	stw	r4,-4(fp)
 4006bac:	e1400215 	stw	r5,8(fp)
 4006bb0:	e1800315 	stw	r6,12(fp)
 4006bb4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 4006bb8:	e0800204 	addi	r2,fp,8
 4006bbc:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 4006bc0:	e0bfff17 	ldw	r2,-4(fp)
 4006bc4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 4006bc8:	00006f06 	br	4006d88 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 4006bcc:	e0bff807 	ldb	r2,-32(fp)
 4006bd0:	10800960 	cmpeqi	r2,r2,37
 4006bd4:	1000041e 	bne	r2,zero,4006be8 <alt_printf+0x50>
        {
            alt_putchar(c);
 4006bd8:	e0bff807 	ldb	r2,-32(fp)
 4006bdc:	1009883a 	mov	r4,r2
 4006be0:	4006dc40 	call	4006dc4 <alt_putchar>
 4006be4:	00006806 	br	4006d88 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 4006be8:	e0bff717 	ldw	r2,-36(fp)
 4006bec:	10c00044 	addi	r3,r2,1
 4006bf0:	e0fff715 	stw	r3,-36(fp)
 4006bf4:	10800003 	ldbu	r2,0(r2)
 4006bf8:	e0bff805 	stb	r2,-32(fp)
 4006bfc:	e0bff807 	ldb	r2,-32(fp)
 4006c00:	10006926 	beq	r2,zero,4006da8 <alt_printf+0x210>
            {
                if (c == '%')
 4006c04:	e0bff807 	ldb	r2,-32(fp)
 4006c08:	10800958 	cmpnei	r2,r2,37
 4006c0c:	1000041e 	bne	r2,zero,4006c20 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 4006c10:	e0bff807 	ldb	r2,-32(fp)
 4006c14:	1009883a 	mov	r4,r2
 4006c18:	4006dc40 	call	4006dc4 <alt_putchar>
 4006c1c:	00005a06 	br	4006d88 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 4006c20:	e0bff807 	ldb	r2,-32(fp)
 4006c24:	108018d8 	cmpnei	r2,r2,99
 4006c28:	1000081e 	bne	r2,zero,4006c4c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 4006c2c:	e0bffe17 	ldw	r2,-8(fp)
 4006c30:	10c00104 	addi	r3,r2,4
 4006c34:	e0fffe15 	stw	r3,-8(fp)
 4006c38:	10800017 	ldw	r2,0(r2)
 4006c3c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 4006c40:	e13ffd17 	ldw	r4,-12(fp)
 4006c44:	4006dc40 	call	4006dc4 <alt_putchar>
 4006c48:	00004f06 	br	4006d88 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 4006c4c:	e0bff807 	ldb	r2,-32(fp)
 4006c50:	10801e18 	cmpnei	r2,r2,120
 4006c54:	1000341e 	bne	r2,zero,4006d28 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 4006c58:	e0bffe17 	ldw	r2,-8(fp)
 4006c5c:	10c00104 	addi	r3,r2,4
 4006c60:	e0fffe15 	stw	r3,-8(fp)
 4006c64:	10800017 	ldw	r2,0(r2)
 4006c68:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 4006c6c:	e0bffb17 	ldw	r2,-20(fp)
 4006c70:	1000031e 	bne	r2,zero,4006c80 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 4006c74:	01000c04 	movi	r4,48
 4006c78:	4006dc40 	call	4006dc4 <alt_putchar>
                        continue;
 4006c7c:	00004206 	br	4006d88 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 4006c80:	00800704 	movi	r2,28
 4006c84:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 4006c88:	00000306 	br	4006c98 <alt_printf+0x100>
                        digit_shift -= 4;
 4006c8c:	e0bff917 	ldw	r2,-28(fp)
 4006c90:	10bfff04 	addi	r2,r2,-4
 4006c94:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 4006c98:	00c003c4 	movi	r3,15
 4006c9c:	e0bff917 	ldw	r2,-28(fp)
 4006ca0:	1884983a 	sll	r2,r3,r2
 4006ca4:	1007883a 	mov	r3,r2
 4006ca8:	e0bffb17 	ldw	r2,-20(fp)
 4006cac:	1884703a 	and	r2,r3,r2
 4006cb0:	103ff626 	beq	r2,zero,4006c8c <__alt_data_end+0xfc006c8c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4006cb4:	00001906 	br	4006d1c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4006cb8:	00c003c4 	movi	r3,15
 4006cbc:	e0bff917 	ldw	r2,-28(fp)
 4006cc0:	1884983a 	sll	r2,r3,r2
 4006cc4:	1007883a 	mov	r3,r2
 4006cc8:	e0bffb17 	ldw	r2,-20(fp)
 4006ccc:	1886703a 	and	r3,r3,r2
 4006cd0:	e0bff917 	ldw	r2,-28(fp)
 4006cd4:	1884d83a 	srl	r2,r3,r2
 4006cd8:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 4006cdc:	e0bffc17 	ldw	r2,-16(fp)
 4006ce0:	108002a8 	cmpgeui	r2,r2,10
 4006ce4:	1000041e 	bne	r2,zero,4006cf8 <alt_printf+0x160>
                            c = '0' + digit;
 4006ce8:	e0bffc17 	ldw	r2,-16(fp)
 4006cec:	10800c04 	addi	r2,r2,48
 4006cf0:	e0bff805 	stb	r2,-32(fp)
 4006cf4:	00000306 	br	4006d04 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 4006cf8:	e0bffc17 	ldw	r2,-16(fp)
 4006cfc:	108015c4 	addi	r2,r2,87
 4006d00:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 4006d04:	e0bff807 	ldb	r2,-32(fp)
 4006d08:	1009883a 	mov	r4,r2
 4006d0c:	4006dc40 	call	4006dc4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4006d10:	e0bff917 	ldw	r2,-28(fp)
 4006d14:	10bfff04 	addi	r2,r2,-4
 4006d18:	e0bff915 	stw	r2,-28(fp)
 4006d1c:	e0bff917 	ldw	r2,-28(fp)
 4006d20:	103fe50e 	bge	r2,zero,4006cb8 <__alt_data_end+0xfc006cb8>
 4006d24:	00001806 	br	4006d88 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 4006d28:	e0bff807 	ldb	r2,-32(fp)
 4006d2c:	10801cd8 	cmpnei	r2,r2,115
 4006d30:	1000151e 	bne	r2,zero,4006d88 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 4006d34:	e0bffe17 	ldw	r2,-8(fp)
 4006d38:	10c00104 	addi	r3,r2,4
 4006d3c:	e0fffe15 	stw	r3,-8(fp)
 4006d40:	10800017 	ldw	r2,0(r2)
 4006d44:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 4006d48:	00000906 	br	4006d70 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 4006d4c:	e0bffa17 	ldw	r2,-24(fp)
 4006d50:	10c00044 	addi	r3,r2,1
 4006d54:	e0fffa15 	stw	r3,-24(fp)
 4006d58:	10800003 	ldbu	r2,0(r2)
 4006d5c:	10803fcc 	andi	r2,r2,255
 4006d60:	1080201c 	xori	r2,r2,128
 4006d64:	10bfe004 	addi	r2,r2,-128
 4006d68:	1009883a 	mov	r4,r2
 4006d6c:	4006dc40 	call	4006dc4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 4006d70:	e0bffa17 	ldw	r2,-24(fp)
 4006d74:	10800003 	ldbu	r2,0(r2)
 4006d78:	10803fcc 	andi	r2,r2,255
 4006d7c:	1080201c 	xori	r2,r2,128
 4006d80:	10bfe004 	addi	r2,r2,-128
 4006d84:	103ff11e 	bne	r2,zero,4006d4c <__alt_data_end+0xfc006d4c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4006d88:	e0bff717 	ldw	r2,-36(fp)
 4006d8c:	10c00044 	addi	r3,r2,1
 4006d90:	e0fff715 	stw	r3,-36(fp)
 4006d94:	10800003 	ldbu	r2,0(r2)
 4006d98:	e0bff805 	stb	r2,-32(fp)
 4006d9c:	e0bff807 	ldb	r2,-32(fp)
 4006da0:	103f8a1e 	bne	r2,zero,4006bcc <__alt_data_end+0xfc006bcc>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4006da4:	00000106 	br	4006dac <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 4006da8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4006dac:	0001883a 	nop
 4006db0:	e037883a 	mov	sp,fp
 4006db4:	dfc00117 	ldw	ra,4(sp)
 4006db8:	df000017 	ldw	fp,0(sp)
 4006dbc:	dec00504 	addi	sp,sp,20
 4006dc0:	f800283a 	ret

04006dc4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4006dc4:	defffd04 	addi	sp,sp,-12
 4006dc8:	dfc00215 	stw	ra,8(sp)
 4006dcc:	df000115 	stw	fp,4(sp)
 4006dd0:	df000104 	addi	fp,sp,4
 4006dd4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 4006dd8:	d0a00117 	ldw	r2,-32764(gp)
 4006ddc:	10800217 	ldw	r2,8(r2)
 4006de0:	100b883a 	mov	r5,r2
 4006de4:	e13fff17 	ldw	r4,-4(fp)
 4006de8:	40005c40 	call	40005c4 <putc>
#endif
#endif
}
 4006dec:	e037883a 	mov	sp,fp
 4006df0:	dfc00117 	ldw	ra,4(sp)
 4006df4:	df000017 	ldw	fp,0(sp)
 4006df8:	dec00204 	addi	sp,sp,8
 4006dfc:	f800283a 	ret

04006e00 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4006e00:	defffa04 	addi	sp,sp,-24
 4006e04:	df000515 	stw	fp,20(sp)
 4006e08:	df000504 	addi	fp,sp,20
 4006e0c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006e10:	0005303a 	rdctl	r2,status
 4006e14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006e18:	e0fffc17 	ldw	r3,-16(fp)
 4006e1c:	00bfff84 	movi	r2,-2
 4006e20:	1884703a 	and	r2,r3,r2
 4006e24:	1001703a 	wrctl	status,r2
  
  return context;
 4006e28:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4006e2c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4006e30:	e0bfff17 	ldw	r2,-4(fp)
 4006e34:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4006e38:	e0bffd17 	ldw	r2,-12(fp)
 4006e3c:	10800017 	ldw	r2,0(r2)
 4006e40:	e0fffd17 	ldw	r3,-12(fp)
 4006e44:	18c00117 	ldw	r3,4(r3)
 4006e48:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4006e4c:	e0bffd17 	ldw	r2,-12(fp)
 4006e50:	10800117 	ldw	r2,4(r2)
 4006e54:	e0fffd17 	ldw	r3,-12(fp)
 4006e58:	18c00017 	ldw	r3,0(r3)
 4006e5c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4006e60:	e0bffd17 	ldw	r2,-12(fp)
 4006e64:	e0fffd17 	ldw	r3,-12(fp)
 4006e68:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4006e6c:	e0bffd17 	ldw	r2,-12(fp)
 4006e70:	e0fffd17 	ldw	r3,-12(fp)
 4006e74:	10c00015 	stw	r3,0(r2)
 4006e78:	e0bffb17 	ldw	r2,-20(fp)
 4006e7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006e80:	e0bffe17 	ldw	r2,-8(fp)
 4006e84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4006e88:	0001883a 	nop
 4006e8c:	e037883a 	mov	sp,fp
 4006e90:	df000017 	ldw	fp,0(sp)
 4006e94:	dec00104 	addi	sp,sp,4
 4006e98:	f800283a 	ret

04006e9c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4006e9c:	defffb04 	addi	sp,sp,-20
 4006ea0:	dfc00415 	stw	ra,16(sp)
 4006ea4:	df000315 	stw	fp,12(sp)
 4006ea8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4006eac:	d0a00e17 	ldw	r2,-32712(gp)
 4006eb0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4006eb4:	d0a6f717 	ldw	r2,-25636(gp)
 4006eb8:	10800044 	addi	r2,r2,1
 4006ebc:	d0a6f715 	stw	r2,-25636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4006ec0:	00002e06 	br	4006f7c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4006ec4:	e0bffd17 	ldw	r2,-12(fp)
 4006ec8:	10800017 	ldw	r2,0(r2)
 4006ecc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4006ed0:	e0bffd17 	ldw	r2,-12(fp)
 4006ed4:	10800403 	ldbu	r2,16(r2)
 4006ed8:	10803fcc 	andi	r2,r2,255
 4006edc:	10000426 	beq	r2,zero,4006ef0 <alt_tick+0x54>
 4006ee0:	d0a6f717 	ldw	r2,-25636(gp)
 4006ee4:	1000021e 	bne	r2,zero,4006ef0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4006ee8:	e0bffd17 	ldw	r2,-12(fp)
 4006eec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4006ef0:	e0bffd17 	ldw	r2,-12(fp)
 4006ef4:	10800217 	ldw	r2,8(r2)
 4006ef8:	d0e6f717 	ldw	r3,-25636(gp)
 4006efc:	18801d36 	bltu	r3,r2,4006f74 <alt_tick+0xd8>
 4006f00:	e0bffd17 	ldw	r2,-12(fp)
 4006f04:	10800403 	ldbu	r2,16(r2)
 4006f08:	10803fcc 	andi	r2,r2,255
 4006f0c:	1000191e 	bne	r2,zero,4006f74 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4006f10:	e0bffd17 	ldw	r2,-12(fp)
 4006f14:	10800317 	ldw	r2,12(r2)
 4006f18:	e0fffd17 	ldw	r3,-12(fp)
 4006f1c:	18c00517 	ldw	r3,20(r3)
 4006f20:	1809883a 	mov	r4,r3
 4006f24:	103ee83a 	callr	r2
 4006f28:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4006f2c:	e0bfff17 	ldw	r2,-4(fp)
 4006f30:	1000031e 	bne	r2,zero,4006f40 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4006f34:	e13ffd17 	ldw	r4,-12(fp)
 4006f38:	4006e000 	call	4006e00 <alt_alarm_stop>
 4006f3c:	00000d06 	br	4006f74 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4006f40:	e0bffd17 	ldw	r2,-12(fp)
 4006f44:	10c00217 	ldw	r3,8(r2)
 4006f48:	e0bfff17 	ldw	r2,-4(fp)
 4006f4c:	1887883a 	add	r3,r3,r2
 4006f50:	e0bffd17 	ldw	r2,-12(fp)
 4006f54:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4006f58:	e0bffd17 	ldw	r2,-12(fp)
 4006f5c:	10c00217 	ldw	r3,8(r2)
 4006f60:	d0a6f717 	ldw	r2,-25636(gp)
 4006f64:	1880032e 	bgeu	r3,r2,4006f74 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4006f68:	e0bffd17 	ldw	r2,-12(fp)
 4006f6c:	00c00044 	movi	r3,1
 4006f70:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4006f74:	e0bffe17 	ldw	r2,-8(fp)
 4006f78:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4006f7c:	e0fffd17 	ldw	r3,-12(fp)
 4006f80:	d0a00e04 	addi	r2,gp,-32712
 4006f84:	18bfcf1e 	bne	r3,r2,4006ec4 <__alt_data_end+0xfc006ec4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4006f88:	0001883a 	nop
}
 4006f8c:	0001883a 	nop
 4006f90:	e037883a 	mov	sp,fp
 4006f94:	dfc00117 	ldw	ra,4(sp)
 4006f98:	df000017 	ldw	fp,0(sp)
 4006f9c:	dec00204 	addi	sp,sp,8
 4006fa0:	f800283a 	ret

04006fa4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4006fa4:	deffff04 	addi	sp,sp,-4
 4006fa8:	df000015 	stw	fp,0(sp)
 4006fac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4006fb0:	000170fa 	wrctl	ienable,zero
}
 4006fb4:	0001883a 	nop
 4006fb8:	e037883a 	mov	sp,fp
 4006fbc:	df000017 	ldw	fp,0(sp)
 4006fc0:	dec00104 	addi	sp,sp,4
 4006fc4:	f800283a 	ret

04006fc8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4006fc8:	defffb04 	addi	sp,sp,-20
 4006fcc:	dfc00415 	stw	ra,16(sp)
 4006fd0:	df000315 	stw	fp,12(sp)
 4006fd4:	df000304 	addi	fp,sp,12
 4006fd8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4006fdc:	d0a00417 	ldw	r2,-32752(gp)
 4006fe0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4006fe4:	00003106 	br	40070ac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4006fe8:	e0bffd17 	ldw	r2,-12(fp)
 4006fec:	10800217 	ldw	r2,8(r2)
 4006ff0:	1009883a 	mov	r4,r2
 4006ff4:	40073a40 	call	40073a4 <strlen>
 4006ff8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4006ffc:	e0bffd17 	ldw	r2,-12(fp)
 4007000:	10c00217 	ldw	r3,8(r2)
 4007004:	e0bffe17 	ldw	r2,-8(fp)
 4007008:	10bfffc4 	addi	r2,r2,-1
 400700c:	1885883a 	add	r2,r3,r2
 4007010:	10800003 	ldbu	r2,0(r2)
 4007014:	10803fcc 	andi	r2,r2,255
 4007018:	1080201c 	xori	r2,r2,128
 400701c:	10bfe004 	addi	r2,r2,-128
 4007020:	10800bd8 	cmpnei	r2,r2,47
 4007024:	1000031e 	bne	r2,zero,4007034 <alt_find_file+0x6c>
    {
      len -= 1;
 4007028:	e0bffe17 	ldw	r2,-8(fp)
 400702c:	10bfffc4 	addi	r2,r2,-1
 4007030:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4007034:	e0bffe17 	ldw	r2,-8(fp)
 4007038:	e0ffff17 	ldw	r3,-4(fp)
 400703c:	1885883a 	add	r2,r3,r2
 4007040:	10800003 	ldbu	r2,0(r2)
 4007044:	10803fcc 	andi	r2,r2,255
 4007048:	1080201c 	xori	r2,r2,128
 400704c:	10bfe004 	addi	r2,r2,-128
 4007050:	10800be0 	cmpeqi	r2,r2,47
 4007054:	1000081e 	bne	r2,zero,4007078 <alt_find_file+0xb0>
 4007058:	e0bffe17 	ldw	r2,-8(fp)
 400705c:	e0ffff17 	ldw	r3,-4(fp)
 4007060:	1885883a 	add	r2,r3,r2
 4007064:	10800003 	ldbu	r2,0(r2)
 4007068:	10803fcc 	andi	r2,r2,255
 400706c:	1080201c 	xori	r2,r2,128
 4007070:	10bfe004 	addi	r2,r2,-128
 4007074:	10000a1e 	bne	r2,zero,40070a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4007078:	e0bffd17 	ldw	r2,-12(fp)
 400707c:	10800217 	ldw	r2,8(r2)
 4007080:	e0fffe17 	ldw	r3,-8(fp)
 4007084:	180d883a 	mov	r6,r3
 4007088:	e17fff17 	ldw	r5,-4(fp)
 400708c:	1009883a 	mov	r4,r2
 4007090:	40071e00 	call	40071e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4007094:	1000021e 	bne	r2,zero,40070a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4007098:	e0bffd17 	ldw	r2,-12(fp)
 400709c:	00000706 	br	40070bc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40070a0:	e0bffd17 	ldw	r2,-12(fp)
 40070a4:	10800017 	ldw	r2,0(r2)
 40070a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40070ac:	e0fffd17 	ldw	r3,-12(fp)
 40070b0:	d0a00404 	addi	r2,gp,-32752
 40070b4:	18bfcc1e 	bne	r3,r2,4006fe8 <__alt_data_end+0xfc006fe8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40070b8:	0005883a 	mov	r2,zero
}
 40070bc:	e037883a 	mov	sp,fp
 40070c0:	dfc00117 	ldw	ra,4(sp)
 40070c4:	df000017 	ldw	fp,0(sp)
 40070c8:	dec00204 	addi	sp,sp,8
 40070cc:	f800283a 	ret

040070d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40070d0:	defffa04 	addi	sp,sp,-24
 40070d4:	dfc00515 	stw	ra,20(sp)
 40070d8:	df000415 	stw	fp,16(sp)
 40070dc:	dc000315 	stw	r16,12(sp)
 40070e0:	df000404 	addi	fp,sp,16
 40070e4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 40070e8:	00bffa04 	movi	r2,-24
 40070ec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40070f0:	e03ffc15 	stw	zero,-16(fp)
 40070f4:	00001d06 	br	400716c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 40070f8:	04010034 	movhi	r16,1024
 40070fc:	841ff304 	addi	r16,r16,32716
 4007100:	e0bffc17 	ldw	r2,-16(fp)
 4007104:	01400304 	movi	r5,12
 4007108:	1009883a 	mov	r4,r2
 400710c:	40024f40 	call	40024f4 <__mulsi3>
 4007110:	8085883a 	add	r2,r16,r2
 4007114:	10800017 	ldw	r2,0(r2)
 4007118:	1000111e 	bne	r2,zero,4007160 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 400711c:	04010034 	movhi	r16,1024
 4007120:	841ff304 	addi	r16,r16,32716
 4007124:	e0bffc17 	ldw	r2,-16(fp)
 4007128:	01400304 	movi	r5,12
 400712c:	1009883a 	mov	r4,r2
 4007130:	40024f40 	call	40024f4 <__mulsi3>
 4007134:	8085883a 	add	r2,r16,r2
 4007138:	e0fffe17 	ldw	r3,-8(fp)
 400713c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4007140:	d0e00817 	ldw	r3,-32736(gp)
 4007144:	e0bffc17 	ldw	r2,-16(fp)
 4007148:	1880020e 	bge	r3,r2,4007154 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 400714c:	e0bffc17 	ldw	r2,-16(fp)
 4007150:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 4007154:	e0bffc17 	ldw	r2,-16(fp)
 4007158:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 400715c:	00000606 	br	4007178 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4007160:	e0bffc17 	ldw	r2,-16(fp)
 4007164:	10800044 	addi	r2,r2,1
 4007168:	e0bffc15 	stw	r2,-16(fp)
 400716c:	e0bffc17 	ldw	r2,-16(fp)
 4007170:	10800810 	cmplti	r2,r2,32
 4007174:	103fe01e 	bne	r2,zero,40070f8 <__alt_data_end+0xfc0070f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4007178:	e0bffd17 	ldw	r2,-12(fp)
}
 400717c:	e6ffff04 	addi	sp,fp,-4
 4007180:	dfc00217 	ldw	ra,8(sp)
 4007184:	df000117 	ldw	fp,4(sp)
 4007188:	dc000017 	ldw	r16,0(sp)
 400718c:	dec00304 	addi	sp,sp,12
 4007190:	f800283a 	ret

04007194 <atexit>:
 4007194:	200b883a 	mov	r5,r4
 4007198:	000f883a 	mov	r7,zero
 400719c:	000d883a 	mov	r6,zero
 40071a0:	0009883a 	mov	r4,zero
 40071a4:	400743c1 	jmpi	400743c <__register_exitproc>

040071a8 <exit>:
 40071a8:	defffe04 	addi	sp,sp,-8
 40071ac:	000b883a 	mov	r5,zero
 40071b0:	dc000015 	stw	r16,0(sp)
 40071b4:	dfc00115 	stw	ra,4(sp)
 40071b8:	2021883a 	mov	r16,r4
 40071bc:	40075540 	call	4007554 <__call_exitprocs>
 40071c0:	00810074 	movhi	r2,1025
 40071c4:	10a4aa04 	addi	r2,r2,-27992
 40071c8:	11000017 	ldw	r4,0(r2)
 40071cc:	20800f17 	ldw	r2,60(r4)
 40071d0:	10000126 	beq	r2,zero,40071d8 <exit+0x30>
 40071d4:	103ee83a 	callr	r2
 40071d8:	8009883a 	mov	r4,r16
 40071dc:	40076d40 	call	40076d4 <_exit>

040071e0 <memcmp>:
 40071e0:	01c000c4 	movi	r7,3
 40071e4:	3980192e 	bgeu	r7,r6,400724c <memcmp+0x6c>
 40071e8:	2144b03a 	or	r2,r4,r5
 40071ec:	11c4703a 	and	r2,r2,r7
 40071f0:	10000f26 	beq	r2,zero,4007230 <memcmp+0x50>
 40071f4:	20800003 	ldbu	r2,0(r4)
 40071f8:	28c00003 	ldbu	r3,0(r5)
 40071fc:	10c0151e 	bne	r2,r3,4007254 <memcmp+0x74>
 4007200:	31bfff84 	addi	r6,r6,-2
 4007204:	01ffffc4 	movi	r7,-1
 4007208:	00000406 	br	400721c <memcmp+0x3c>
 400720c:	20800003 	ldbu	r2,0(r4)
 4007210:	28c00003 	ldbu	r3,0(r5)
 4007214:	31bfffc4 	addi	r6,r6,-1
 4007218:	10c00e1e 	bne	r2,r3,4007254 <memcmp+0x74>
 400721c:	21000044 	addi	r4,r4,1
 4007220:	29400044 	addi	r5,r5,1
 4007224:	31fff91e 	bne	r6,r7,400720c <__alt_data_end+0xfc00720c>
 4007228:	0005883a 	mov	r2,zero
 400722c:	f800283a 	ret
 4007230:	20c00017 	ldw	r3,0(r4)
 4007234:	28800017 	ldw	r2,0(r5)
 4007238:	18bfee1e 	bne	r3,r2,40071f4 <__alt_data_end+0xfc0071f4>
 400723c:	31bfff04 	addi	r6,r6,-4
 4007240:	21000104 	addi	r4,r4,4
 4007244:	29400104 	addi	r5,r5,4
 4007248:	39bff936 	bltu	r7,r6,4007230 <__alt_data_end+0xfc007230>
 400724c:	303fe91e 	bne	r6,zero,40071f4 <__alt_data_end+0xfc0071f4>
 4007250:	003ff506 	br	4007228 <__alt_data_end+0xfc007228>
 4007254:	10c5c83a 	sub	r2,r2,r3
 4007258:	f800283a 	ret

0400725c <memcpy>:
 400725c:	defffd04 	addi	sp,sp,-12
 4007260:	dfc00215 	stw	ra,8(sp)
 4007264:	dc400115 	stw	r17,4(sp)
 4007268:	dc000015 	stw	r16,0(sp)
 400726c:	00c003c4 	movi	r3,15
 4007270:	2005883a 	mov	r2,r4
 4007274:	1980452e 	bgeu	r3,r6,400738c <memcpy+0x130>
 4007278:	2906b03a 	or	r3,r5,r4
 400727c:	18c000cc 	andi	r3,r3,3
 4007280:	1800441e 	bne	r3,zero,4007394 <memcpy+0x138>
 4007284:	347ffc04 	addi	r17,r6,-16
 4007288:	8822d13a 	srli	r17,r17,4
 400728c:	28c00104 	addi	r3,r5,4
 4007290:	23400104 	addi	r13,r4,4
 4007294:	8820913a 	slli	r16,r17,4
 4007298:	2b000204 	addi	r12,r5,8
 400729c:	22c00204 	addi	r11,r4,8
 40072a0:	84000504 	addi	r16,r16,20
 40072a4:	2a800304 	addi	r10,r5,12
 40072a8:	22400304 	addi	r9,r4,12
 40072ac:	2c21883a 	add	r16,r5,r16
 40072b0:	2811883a 	mov	r8,r5
 40072b4:	200f883a 	mov	r7,r4
 40072b8:	41000017 	ldw	r4,0(r8)
 40072bc:	1fc00017 	ldw	ra,0(r3)
 40072c0:	63c00017 	ldw	r15,0(r12)
 40072c4:	39000015 	stw	r4,0(r7)
 40072c8:	53800017 	ldw	r14,0(r10)
 40072cc:	6fc00015 	stw	ra,0(r13)
 40072d0:	5bc00015 	stw	r15,0(r11)
 40072d4:	4b800015 	stw	r14,0(r9)
 40072d8:	18c00404 	addi	r3,r3,16
 40072dc:	39c00404 	addi	r7,r7,16
 40072e0:	42000404 	addi	r8,r8,16
 40072e4:	6b400404 	addi	r13,r13,16
 40072e8:	63000404 	addi	r12,r12,16
 40072ec:	5ac00404 	addi	r11,r11,16
 40072f0:	52800404 	addi	r10,r10,16
 40072f4:	4a400404 	addi	r9,r9,16
 40072f8:	1c3fef1e 	bne	r3,r16,40072b8 <__alt_data_end+0xfc0072b8>
 40072fc:	89c00044 	addi	r7,r17,1
 4007300:	380e913a 	slli	r7,r7,4
 4007304:	310003cc 	andi	r4,r6,15
 4007308:	02c000c4 	movi	r11,3
 400730c:	11c7883a 	add	r3,r2,r7
 4007310:	29cb883a 	add	r5,r5,r7
 4007314:	5900212e 	bgeu	r11,r4,400739c <memcpy+0x140>
 4007318:	1813883a 	mov	r9,r3
 400731c:	2811883a 	mov	r8,r5
 4007320:	200f883a 	mov	r7,r4
 4007324:	42800017 	ldw	r10,0(r8)
 4007328:	4a400104 	addi	r9,r9,4
 400732c:	39ffff04 	addi	r7,r7,-4
 4007330:	4abfff15 	stw	r10,-4(r9)
 4007334:	42000104 	addi	r8,r8,4
 4007338:	59fffa36 	bltu	r11,r7,4007324 <__alt_data_end+0xfc007324>
 400733c:	213fff04 	addi	r4,r4,-4
 4007340:	2008d0ba 	srli	r4,r4,2
 4007344:	318000cc 	andi	r6,r6,3
 4007348:	21000044 	addi	r4,r4,1
 400734c:	2109883a 	add	r4,r4,r4
 4007350:	2109883a 	add	r4,r4,r4
 4007354:	1907883a 	add	r3,r3,r4
 4007358:	290b883a 	add	r5,r5,r4
 400735c:	30000626 	beq	r6,zero,4007378 <memcpy+0x11c>
 4007360:	198d883a 	add	r6,r3,r6
 4007364:	29c00003 	ldbu	r7,0(r5)
 4007368:	18c00044 	addi	r3,r3,1
 400736c:	29400044 	addi	r5,r5,1
 4007370:	19ffffc5 	stb	r7,-1(r3)
 4007374:	19bffb1e 	bne	r3,r6,4007364 <__alt_data_end+0xfc007364>
 4007378:	dfc00217 	ldw	ra,8(sp)
 400737c:	dc400117 	ldw	r17,4(sp)
 4007380:	dc000017 	ldw	r16,0(sp)
 4007384:	dec00304 	addi	sp,sp,12
 4007388:	f800283a 	ret
 400738c:	2007883a 	mov	r3,r4
 4007390:	003ff206 	br	400735c <__alt_data_end+0xfc00735c>
 4007394:	2007883a 	mov	r3,r4
 4007398:	003ff106 	br	4007360 <__alt_data_end+0xfc007360>
 400739c:	200d883a 	mov	r6,r4
 40073a0:	003fee06 	br	400735c <__alt_data_end+0xfc00735c>

040073a4 <strlen>:
 40073a4:	208000cc 	andi	r2,r4,3
 40073a8:	10002026 	beq	r2,zero,400742c <strlen+0x88>
 40073ac:	20800007 	ldb	r2,0(r4)
 40073b0:	10002026 	beq	r2,zero,4007434 <strlen+0x90>
 40073b4:	2005883a 	mov	r2,r4
 40073b8:	00000206 	br	40073c4 <strlen+0x20>
 40073bc:	10c00007 	ldb	r3,0(r2)
 40073c0:	18001826 	beq	r3,zero,4007424 <strlen+0x80>
 40073c4:	10800044 	addi	r2,r2,1
 40073c8:	10c000cc 	andi	r3,r2,3
 40073cc:	183ffb1e 	bne	r3,zero,40073bc <__alt_data_end+0xfc0073bc>
 40073d0:	10c00017 	ldw	r3,0(r2)
 40073d4:	01ffbff4 	movhi	r7,65279
 40073d8:	39ffbfc4 	addi	r7,r7,-257
 40073dc:	00ca303a 	nor	r5,zero,r3
 40073e0:	01a02074 	movhi	r6,32897
 40073e4:	19c7883a 	add	r3,r3,r7
 40073e8:	31a02004 	addi	r6,r6,-32640
 40073ec:	1946703a 	and	r3,r3,r5
 40073f0:	1986703a 	and	r3,r3,r6
 40073f4:	1800091e 	bne	r3,zero,400741c <strlen+0x78>
 40073f8:	10800104 	addi	r2,r2,4
 40073fc:	10c00017 	ldw	r3,0(r2)
 4007400:	19cb883a 	add	r5,r3,r7
 4007404:	00c6303a 	nor	r3,zero,r3
 4007408:	28c6703a 	and	r3,r5,r3
 400740c:	1986703a 	and	r3,r3,r6
 4007410:	183ff926 	beq	r3,zero,40073f8 <__alt_data_end+0xfc0073f8>
 4007414:	00000106 	br	400741c <strlen+0x78>
 4007418:	10800044 	addi	r2,r2,1
 400741c:	10c00007 	ldb	r3,0(r2)
 4007420:	183ffd1e 	bne	r3,zero,4007418 <__alt_data_end+0xfc007418>
 4007424:	1105c83a 	sub	r2,r2,r4
 4007428:	f800283a 	ret
 400742c:	2005883a 	mov	r2,r4
 4007430:	003fe706 	br	40073d0 <__alt_data_end+0xfc0073d0>
 4007434:	0005883a 	mov	r2,zero
 4007438:	f800283a 	ret

0400743c <__register_exitproc>:
 400743c:	defffa04 	addi	sp,sp,-24
 4007440:	dc000315 	stw	r16,12(sp)
 4007444:	04010074 	movhi	r16,1025
 4007448:	8424aa04 	addi	r16,r16,-27992
 400744c:	80c00017 	ldw	r3,0(r16)
 4007450:	dc400415 	stw	r17,16(sp)
 4007454:	dfc00515 	stw	ra,20(sp)
 4007458:	18805217 	ldw	r2,328(r3)
 400745c:	2023883a 	mov	r17,r4
 4007460:	10003726 	beq	r2,zero,4007540 <__register_exitproc+0x104>
 4007464:	10c00117 	ldw	r3,4(r2)
 4007468:	010007c4 	movi	r4,31
 400746c:	20c00e16 	blt	r4,r3,40074a8 <__register_exitproc+0x6c>
 4007470:	1a000044 	addi	r8,r3,1
 4007474:	8800221e 	bne	r17,zero,4007500 <__register_exitproc+0xc4>
 4007478:	18c00084 	addi	r3,r3,2
 400747c:	18c7883a 	add	r3,r3,r3
 4007480:	18c7883a 	add	r3,r3,r3
 4007484:	12000115 	stw	r8,4(r2)
 4007488:	10c7883a 	add	r3,r2,r3
 400748c:	19400015 	stw	r5,0(r3)
 4007490:	0005883a 	mov	r2,zero
 4007494:	dfc00517 	ldw	ra,20(sp)
 4007498:	dc400417 	ldw	r17,16(sp)
 400749c:	dc000317 	ldw	r16,12(sp)
 40074a0:	dec00604 	addi	sp,sp,24
 40074a4:	f800283a 	ret
 40074a8:	00800034 	movhi	r2,0
 40074ac:	10800004 	addi	r2,r2,0
 40074b0:	10002626 	beq	r2,zero,400754c <__register_exitproc+0x110>
 40074b4:	01006404 	movi	r4,400
 40074b8:	d9400015 	stw	r5,0(sp)
 40074bc:	d9800115 	stw	r6,4(sp)
 40074c0:	d9c00215 	stw	r7,8(sp)
 40074c4:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>
 40074c8:	d9400017 	ldw	r5,0(sp)
 40074cc:	d9800117 	ldw	r6,4(sp)
 40074d0:	d9c00217 	ldw	r7,8(sp)
 40074d4:	10001d26 	beq	r2,zero,400754c <__register_exitproc+0x110>
 40074d8:	81000017 	ldw	r4,0(r16)
 40074dc:	10000115 	stw	zero,4(r2)
 40074e0:	02000044 	movi	r8,1
 40074e4:	22405217 	ldw	r9,328(r4)
 40074e8:	0007883a 	mov	r3,zero
 40074ec:	12400015 	stw	r9,0(r2)
 40074f0:	20805215 	stw	r2,328(r4)
 40074f4:	10006215 	stw	zero,392(r2)
 40074f8:	10006315 	stw	zero,396(r2)
 40074fc:	883fde26 	beq	r17,zero,4007478 <__alt_data_end+0xfc007478>
 4007500:	18c9883a 	add	r4,r3,r3
 4007504:	2109883a 	add	r4,r4,r4
 4007508:	1109883a 	add	r4,r2,r4
 400750c:	21802215 	stw	r6,136(r4)
 4007510:	01800044 	movi	r6,1
 4007514:	12406217 	ldw	r9,392(r2)
 4007518:	30cc983a 	sll	r6,r6,r3
 400751c:	4992b03a 	or	r9,r9,r6
 4007520:	12406215 	stw	r9,392(r2)
 4007524:	21c04215 	stw	r7,264(r4)
 4007528:	01000084 	movi	r4,2
 400752c:	893fd21e 	bne	r17,r4,4007478 <__alt_data_end+0xfc007478>
 4007530:	11006317 	ldw	r4,396(r2)
 4007534:	218cb03a 	or	r6,r4,r6
 4007538:	11806315 	stw	r6,396(r2)
 400753c:	003fce06 	br	4007478 <__alt_data_end+0xfc007478>
 4007540:	18805304 	addi	r2,r3,332
 4007544:	18805215 	stw	r2,328(r3)
 4007548:	003fc606 	br	4007464 <__alt_data_end+0xfc007464>
 400754c:	00bfffc4 	movi	r2,-1
 4007550:	003fd006 	br	4007494 <__alt_data_end+0xfc007494>

04007554 <__call_exitprocs>:
 4007554:	defff504 	addi	sp,sp,-44
 4007558:	df000915 	stw	fp,36(sp)
 400755c:	dd400615 	stw	r21,24(sp)
 4007560:	dc800315 	stw	r18,12(sp)
 4007564:	dfc00a15 	stw	ra,40(sp)
 4007568:	ddc00815 	stw	r23,32(sp)
 400756c:	dd800715 	stw	r22,28(sp)
 4007570:	dd000515 	stw	r20,20(sp)
 4007574:	dcc00415 	stw	r19,16(sp)
 4007578:	dc400215 	stw	r17,8(sp)
 400757c:	dc000115 	stw	r16,4(sp)
 4007580:	d9000015 	stw	r4,0(sp)
 4007584:	2839883a 	mov	fp,r5
 4007588:	04800044 	movi	r18,1
 400758c:	057fffc4 	movi	r21,-1
 4007590:	00810074 	movhi	r2,1025
 4007594:	10a4aa04 	addi	r2,r2,-27992
 4007598:	12000017 	ldw	r8,0(r2)
 400759c:	45005217 	ldw	r20,328(r8)
 40075a0:	44c05204 	addi	r19,r8,328
 40075a4:	a0001c26 	beq	r20,zero,4007618 <__call_exitprocs+0xc4>
 40075a8:	a0800117 	ldw	r2,4(r20)
 40075ac:	15ffffc4 	addi	r23,r2,-1
 40075b0:	b8000d16 	blt	r23,zero,40075e8 <__call_exitprocs+0x94>
 40075b4:	14000044 	addi	r16,r2,1
 40075b8:	8421883a 	add	r16,r16,r16
 40075bc:	8421883a 	add	r16,r16,r16
 40075c0:	84402004 	addi	r17,r16,128
 40075c4:	a463883a 	add	r17,r20,r17
 40075c8:	a421883a 	add	r16,r20,r16
 40075cc:	e0001e26 	beq	fp,zero,4007648 <__call_exitprocs+0xf4>
 40075d0:	80804017 	ldw	r2,256(r16)
 40075d4:	e0801c26 	beq	fp,r2,4007648 <__call_exitprocs+0xf4>
 40075d8:	bdffffc4 	addi	r23,r23,-1
 40075dc:	843fff04 	addi	r16,r16,-4
 40075e0:	8c7fff04 	addi	r17,r17,-4
 40075e4:	bd7ff91e 	bne	r23,r21,40075cc <__alt_data_end+0xfc0075cc>
 40075e8:	00800034 	movhi	r2,0
 40075ec:	10800004 	addi	r2,r2,0
 40075f0:	10000926 	beq	r2,zero,4007618 <__call_exitprocs+0xc4>
 40075f4:	a0800117 	ldw	r2,4(r20)
 40075f8:	1000301e 	bne	r2,zero,40076bc <__call_exitprocs+0x168>
 40075fc:	a0800017 	ldw	r2,0(r20)
 4007600:	10003226 	beq	r2,zero,40076cc <__call_exitprocs+0x178>
 4007604:	a009883a 	mov	r4,r20
 4007608:	98800015 	stw	r2,0(r19)
 400760c:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>
 4007610:	9d000017 	ldw	r20,0(r19)
 4007614:	a03fe41e 	bne	r20,zero,40075a8 <__alt_data_end+0xfc0075a8>
 4007618:	dfc00a17 	ldw	ra,40(sp)
 400761c:	df000917 	ldw	fp,36(sp)
 4007620:	ddc00817 	ldw	r23,32(sp)
 4007624:	dd800717 	ldw	r22,28(sp)
 4007628:	dd400617 	ldw	r21,24(sp)
 400762c:	dd000517 	ldw	r20,20(sp)
 4007630:	dcc00417 	ldw	r19,16(sp)
 4007634:	dc800317 	ldw	r18,12(sp)
 4007638:	dc400217 	ldw	r17,8(sp)
 400763c:	dc000117 	ldw	r16,4(sp)
 4007640:	dec00b04 	addi	sp,sp,44
 4007644:	f800283a 	ret
 4007648:	a0800117 	ldw	r2,4(r20)
 400764c:	80c00017 	ldw	r3,0(r16)
 4007650:	10bfffc4 	addi	r2,r2,-1
 4007654:	15c01426 	beq	r2,r23,40076a8 <__call_exitprocs+0x154>
 4007658:	80000015 	stw	zero,0(r16)
 400765c:	183fde26 	beq	r3,zero,40075d8 <__alt_data_end+0xfc0075d8>
 4007660:	95c8983a 	sll	r4,r18,r23
 4007664:	a0806217 	ldw	r2,392(r20)
 4007668:	a5800117 	ldw	r22,4(r20)
 400766c:	2084703a 	and	r2,r4,r2
 4007670:	10000b26 	beq	r2,zero,40076a0 <__call_exitprocs+0x14c>
 4007674:	a0806317 	ldw	r2,396(r20)
 4007678:	2088703a 	and	r4,r4,r2
 400767c:	20000c1e 	bne	r4,zero,40076b0 <__call_exitprocs+0x15c>
 4007680:	89400017 	ldw	r5,0(r17)
 4007684:	d9000017 	ldw	r4,0(sp)
 4007688:	183ee83a 	callr	r3
 400768c:	a0800117 	ldw	r2,4(r20)
 4007690:	15bfbf1e 	bne	r2,r22,4007590 <__alt_data_end+0xfc007590>
 4007694:	98800017 	ldw	r2,0(r19)
 4007698:	153fcf26 	beq	r2,r20,40075d8 <__alt_data_end+0xfc0075d8>
 400769c:	003fbc06 	br	4007590 <__alt_data_end+0xfc007590>
 40076a0:	183ee83a 	callr	r3
 40076a4:	003ff906 	br	400768c <__alt_data_end+0xfc00768c>
 40076a8:	a5c00115 	stw	r23,4(r20)
 40076ac:	003feb06 	br	400765c <__alt_data_end+0xfc00765c>
 40076b0:	89000017 	ldw	r4,0(r17)
 40076b4:	183ee83a 	callr	r3
 40076b8:	003ff406 	br	400768c <__alt_data_end+0xfc00768c>
 40076bc:	a0800017 	ldw	r2,0(r20)
 40076c0:	a027883a 	mov	r19,r20
 40076c4:	1029883a 	mov	r20,r2
 40076c8:	003fb606 	br	40075a4 <__alt_data_end+0xfc0075a4>
 40076cc:	0005883a 	mov	r2,zero
 40076d0:	003ffb06 	br	40076c0 <__alt_data_end+0xfc0076c0>

040076d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40076d4:	defffd04 	addi	sp,sp,-12
 40076d8:	df000215 	stw	fp,8(sp)
 40076dc:	df000204 	addi	fp,sp,8
 40076e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40076e4:	0001883a 	nop
 40076e8:	e0bfff17 	ldw	r2,-4(fp)
 40076ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40076f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40076f4:	10000226 	beq	r2,zero,4007700 <_exit+0x2c>
    ALT_SIM_FAIL();
 40076f8:	002af070 	cmpltui	zero,zero,43969
 40076fc:	00000106 	br	4007704 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4007700:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4007704:	003fff06 	br	4007704 <__alt_data_end+0xfc007704>
